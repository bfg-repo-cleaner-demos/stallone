#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/mc/IDynamicalExpectations.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace mc {

      ::java::lang::Class *IDynamicalExpectations::class$ = NULL;
      jmethodID *IDynamicalExpectations::mids$ = NULL;
      bool IDynamicalExpectations::live$ = false;

      jclass IDynamicalExpectations::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/mc/IDynamicalExpectations");

          mids$ = new jmethodID[max_mid];
          mids$[mid_calculateAutocorrelation_f5db6ad3] = env->getMethodID(cls, "calculateAutocorrelation", "(Lstallone/api/doubles/IDoubleArray;D)D");
          mids$[mid_calculateCorrelation_cf06784b] = env->getMethodID(cls, "calculateCorrelation", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;D)D");
          mids$[mid_calculatePerturbationExpectation_cf06784b] = env->getMethodID(cls, "calculatePerturbationExpectation", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;D)D");
          mids$[mid_setK_0253084a] = env->getMethodID(cls, "setK", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_setStationaryDistribution_0253084a] = env->getMethodID(cls, "setStationaryDistribution", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_setT_0253084a] = env->getMethodID(cls, "setT", "(Lstallone/api/doubles/IDoubleArray;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jdouble IDynamicalExpectations::calculateAutocorrelation(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_calculateAutocorrelation_f5db6ad3], a0.this$, a1);
      }

      jdouble IDynamicalExpectations::calculateCorrelation(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1, jdouble a2) const
      {
        return env->callDoubleMethod(this$, mids$[mid_calculateCorrelation_cf06784b], a0.this$, a1.this$, a2);
      }

      jdouble IDynamicalExpectations::calculatePerturbationExpectation(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1, jdouble a2) const
      {
        return env->callDoubleMethod(this$, mids$[mid_calculatePerturbationExpectation_cf06784b], a0.this$, a1.this$, a2);
      }

      void IDynamicalExpectations::setK(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setK_0253084a], a0.this$);
      }

      void IDynamicalExpectations::setStationaryDistribution(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setStationaryDistribution_0253084a], a0.this$);
      }

      void IDynamicalExpectations::setT(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setT_0253084a], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace mc {
      static PyObject *t_IDynamicalExpectations_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDynamicalExpectations_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDynamicalExpectations_calculateAutocorrelation(t_IDynamicalExpectations *self, PyObject *args);
      static PyObject *t_IDynamicalExpectations_calculateCorrelation(t_IDynamicalExpectations *self, PyObject *args);
      static PyObject *t_IDynamicalExpectations_calculatePerturbationExpectation(t_IDynamicalExpectations *self, PyObject *args);
      static PyObject *t_IDynamicalExpectations_setK(t_IDynamicalExpectations *self, PyObject *arg);
      static PyObject *t_IDynamicalExpectations_setStationaryDistribution(t_IDynamicalExpectations *self, PyObject *arg);
      static PyObject *t_IDynamicalExpectations_setT(t_IDynamicalExpectations *self, PyObject *arg);
      static int t_IDynamicalExpectations_set__k(t_IDynamicalExpectations *self, PyObject *arg, void *data);
      static int t_IDynamicalExpectations_set__stationaryDistribution(t_IDynamicalExpectations *self, PyObject *arg, void *data);
      static int t_IDynamicalExpectations_set__t(t_IDynamicalExpectations *self, PyObject *arg, void *data);
      static PyGetSetDef t_IDynamicalExpectations__fields_[] = {
        DECLARE_SET_FIELD(t_IDynamicalExpectations, k),
        DECLARE_SET_FIELD(t_IDynamicalExpectations, stationaryDistribution),
        DECLARE_SET_FIELD(t_IDynamicalExpectations, t),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IDynamicalExpectations__methods_[] = {
        DECLARE_METHOD(t_IDynamicalExpectations, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDynamicalExpectations, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDynamicalExpectations, calculateAutocorrelation, METH_VARARGS),
        DECLARE_METHOD(t_IDynamicalExpectations, calculateCorrelation, METH_VARARGS),
        DECLARE_METHOD(t_IDynamicalExpectations, calculatePerturbationExpectation, METH_VARARGS),
        DECLARE_METHOD(t_IDynamicalExpectations, setK, METH_O),
        DECLARE_METHOD(t_IDynamicalExpectations, setStationaryDistribution, METH_O),
        DECLARE_METHOD(t_IDynamicalExpectations, setT, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IDynamicalExpectations, t_IDynamicalExpectations, ::java::lang::Object, IDynamicalExpectations, abstract_init, 0, 0, t_IDynamicalExpectations__fields_, 0, 0);

      void t_IDynamicalExpectations::install(PyObject *module)
      {
        installType(&PY_TYPE(IDynamicalExpectations), module, "IDynamicalExpectations", 0);
      }

      void t_IDynamicalExpectations::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IDynamicalExpectations).tp_dict, "class_", make_descriptor(IDynamicalExpectations::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IDynamicalExpectations).tp_dict, "wrapfn_", make_descriptor(t_IDynamicalExpectations::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IDynamicalExpectations).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IDynamicalExpectations_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IDynamicalExpectations::initializeClass, 1)))
          return NULL;
        return t_IDynamicalExpectations::wrap_Object(IDynamicalExpectations(((t_IDynamicalExpectations *) arg)->object.this$));
      }
      static PyObject *t_IDynamicalExpectations_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IDynamicalExpectations::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IDynamicalExpectations_calculateAutocorrelation(t_IDynamicalExpectations *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        jdouble result;

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.calculateAutocorrelation(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "calculateAutocorrelation", args);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectations_calculateCorrelation(t_IDynamicalExpectations *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        jdouble a2;
        jdouble result;

        if (!parseArgs(args, "kkD", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.calculateCorrelation(a0, a1, a2));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "calculateCorrelation", args);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectations_calculatePerturbationExpectation(t_IDynamicalExpectations *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        jdouble a2;
        jdouble result;

        if (!parseArgs(args, "kkD", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.calculatePerturbationExpectation(a0, a1, a2));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "calculatePerturbationExpectation", args);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectations_setK(t_IDynamicalExpectations *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setK(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setK", arg);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectations_setStationaryDistribution(t_IDynamicalExpectations *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setStationaryDistribution(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setStationaryDistribution", arg);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectations_setT(t_IDynamicalExpectations *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setT(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setT", arg);
        return NULL;
      }

      static int t_IDynamicalExpectations_set__k(t_IDynamicalExpectations *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setK(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "k", arg);
        return -1;
      }

      static int t_IDynamicalExpectations_set__stationaryDistribution(t_IDynamicalExpectations *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setStationaryDistribution(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "stationaryDistribution", arg);
        return -1;
      }

      static int t_IDynamicalExpectations_set__t(t_IDynamicalExpectations *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setT(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "t", arg);
        return -1;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/mc/tpt/ITPTFlux.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace mc {
      namespace tpt {

        ::java::lang::Class *ITPTFlux::class$ = NULL;
        jmethodID *ITPTFlux::mids$ = NULL;
        bool ITPTFlux::live$ = false;

        jclass ITPTFlux::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("stallone/api/mc/tpt/ITPTFlux");

            mids$ = new jmethodID[max_mid];
            mids$[mid_calculate_54c6a166] = env->getMethodID(cls, "calculate", "()V");
            mids$[mid_getBackwardCommittor_1d53e353] = env->getMethodID(cls, "getBackwardCommittor", "()Lstallone/api/doubles/IDoubleArray;");
            mids$[mid_getFlux_1d53e353] = env->getMethodID(cls, "getFlux", "()Lstallone/api/doubles/IDoubleArray;");
            mids$[mid_getForwardCommittor_1d53e353] = env->getMethodID(cls, "getForwardCommittor", "()Lstallone/api/doubles/IDoubleArray;");
            mids$[mid_getNetFlux_1d53e353] = env->getMethodID(cls, "getNetFlux", "()Lstallone/api/doubles/IDoubleArray;");
            mids$[mid_getRate_54c6a174] = env->getMethodID(cls, "getRate", "()D");
            mids$[mid_getStationaryDistribution_1d53e353] = env->getMethodID(cls, "getStationaryDistribution", "()Lstallone/api/doubles/IDoubleArray;");
            mids$[mid_getTotalFlux_54c6a174] = env->getMethodID(cls, "getTotalFlux", "()D");
            mids$[mid_setRateMatrix_0253084a] = env->getMethodID(cls, "setRateMatrix", "(Lstallone/api/doubles/IDoubleArray;)V");
            mids$[mid_setStationaryDistribution_0253084a] = env->getMethodID(cls, "setStationaryDistribution", "(Lstallone/api/doubles/IDoubleArray;)V");
            mids$[mid_setTransitionMatrix_0253084a] = env->getMethodID(cls, "setTransitionMatrix", "(Lstallone/api/doubles/IDoubleArray;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void ITPTFlux::calculate() const
        {
          env->callVoidMethod(this$, mids$[mid_calculate_54c6a166]);
        }

        ::stallone::api::doubles::IDoubleArray ITPTFlux::getBackwardCommittor() const
        {
          return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getBackwardCommittor_1d53e353]));
        }

        ::stallone::api::doubles::IDoubleArray ITPTFlux::getFlux() const
        {
          return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getFlux_1d53e353]));
        }

        ::stallone::api::doubles::IDoubleArray ITPTFlux::getForwardCommittor() const
        {
          return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getForwardCommittor_1d53e353]));
        }

        ::stallone::api::doubles::IDoubleArray ITPTFlux::getNetFlux() const
        {
          return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getNetFlux_1d53e353]));
        }

        jdouble ITPTFlux::getRate() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRate_54c6a174]);
        }

        ::stallone::api::doubles::IDoubleArray ITPTFlux::getStationaryDistribution() const
        {
          return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getStationaryDistribution_1d53e353]));
        }

        jdouble ITPTFlux::getTotalFlux() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getTotalFlux_54c6a174]);
        }

        void ITPTFlux::setRateMatrix(const ::stallone::api::doubles::IDoubleArray & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setRateMatrix_0253084a], a0.this$);
        }

        void ITPTFlux::setStationaryDistribution(const ::stallone::api::doubles::IDoubleArray & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStationaryDistribution_0253084a], a0.this$);
        }

        void ITPTFlux::setTransitionMatrix(const ::stallone::api::doubles::IDoubleArray & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTransitionMatrix_0253084a], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace mc {
      namespace tpt {
        static PyObject *t_ITPTFlux_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ITPTFlux_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ITPTFlux_calculate(t_ITPTFlux *self);
        static PyObject *t_ITPTFlux_getBackwardCommittor(t_ITPTFlux *self);
        static PyObject *t_ITPTFlux_getFlux(t_ITPTFlux *self);
        static PyObject *t_ITPTFlux_getForwardCommittor(t_ITPTFlux *self);
        static PyObject *t_ITPTFlux_getNetFlux(t_ITPTFlux *self);
        static PyObject *t_ITPTFlux_getRate(t_ITPTFlux *self);
        static PyObject *t_ITPTFlux_getStationaryDistribution(t_ITPTFlux *self);
        static PyObject *t_ITPTFlux_getTotalFlux(t_ITPTFlux *self);
        static PyObject *t_ITPTFlux_setRateMatrix(t_ITPTFlux *self, PyObject *arg);
        static PyObject *t_ITPTFlux_setStationaryDistribution(t_ITPTFlux *self, PyObject *arg);
        static PyObject *t_ITPTFlux_setTransitionMatrix(t_ITPTFlux *self, PyObject *arg);
        static PyObject *t_ITPTFlux_get__backwardCommittor(t_ITPTFlux *self, void *data);
        static PyObject *t_ITPTFlux_get__flux(t_ITPTFlux *self, void *data);
        static PyObject *t_ITPTFlux_get__forwardCommittor(t_ITPTFlux *self, void *data);
        static PyObject *t_ITPTFlux_get__netFlux(t_ITPTFlux *self, void *data);
        static PyObject *t_ITPTFlux_get__rate(t_ITPTFlux *self, void *data);
        static int t_ITPTFlux_set__rateMatrix(t_ITPTFlux *self, PyObject *arg, void *data);
        static PyObject *t_ITPTFlux_get__stationaryDistribution(t_ITPTFlux *self, void *data);
        static int t_ITPTFlux_set__stationaryDistribution(t_ITPTFlux *self, PyObject *arg, void *data);
        static PyObject *t_ITPTFlux_get__totalFlux(t_ITPTFlux *self, void *data);
        static int t_ITPTFlux_set__transitionMatrix(t_ITPTFlux *self, PyObject *arg, void *data);
        static PyGetSetDef t_ITPTFlux__fields_[] = {
          DECLARE_GET_FIELD(t_ITPTFlux, backwardCommittor),
          DECLARE_GET_FIELD(t_ITPTFlux, flux),
          DECLARE_GET_FIELD(t_ITPTFlux, forwardCommittor),
          DECLARE_GET_FIELD(t_ITPTFlux, netFlux),
          DECLARE_GET_FIELD(t_ITPTFlux, rate),
          DECLARE_SET_FIELD(t_ITPTFlux, rateMatrix),
          DECLARE_GETSET_FIELD(t_ITPTFlux, stationaryDistribution),
          DECLARE_GET_FIELD(t_ITPTFlux, totalFlux),
          DECLARE_SET_FIELD(t_ITPTFlux, transitionMatrix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ITPTFlux__methods_[] = {
          DECLARE_METHOD(t_ITPTFlux, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ITPTFlux, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ITPTFlux, calculate, METH_NOARGS),
          DECLARE_METHOD(t_ITPTFlux, getBackwardCommittor, METH_NOARGS),
          DECLARE_METHOD(t_ITPTFlux, getFlux, METH_NOARGS),
          DECLARE_METHOD(t_ITPTFlux, getForwardCommittor, METH_NOARGS),
          DECLARE_METHOD(t_ITPTFlux, getNetFlux, METH_NOARGS),
          DECLARE_METHOD(t_ITPTFlux, getRate, METH_NOARGS),
          DECLARE_METHOD(t_ITPTFlux, getStationaryDistribution, METH_NOARGS),
          DECLARE_METHOD(t_ITPTFlux, getTotalFlux, METH_NOARGS),
          DECLARE_METHOD(t_ITPTFlux, setRateMatrix, METH_O),
          DECLARE_METHOD(t_ITPTFlux, setStationaryDistribution, METH_O),
          DECLARE_METHOD(t_ITPTFlux, setTransitionMatrix, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ITPTFlux, t_ITPTFlux, ::java::lang::Object, ITPTFlux, abstract_init, 0, 0, t_ITPTFlux__fields_, 0, 0);

        void t_ITPTFlux::install(PyObject *module)
        {
          installType(&PY_TYPE(ITPTFlux), module, "ITPTFlux", 0);
        }

        void t_ITPTFlux::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ITPTFlux).tp_dict, "class_", make_descriptor(ITPTFlux::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ITPTFlux).tp_dict, "wrapfn_", make_descriptor(t_ITPTFlux::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ITPTFlux).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ITPTFlux_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ITPTFlux::initializeClass, 1)))
            return NULL;
          return t_ITPTFlux::wrap_Object(ITPTFlux(((t_ITPTFlux *) arg)->object.this$));
        }
        static PyObject *t_ITPTFlux_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ITPTFlux::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ITPTFlux_calculate(t_ITPTFlux *self)
        {
          OBJ_CALL(self->object.calculate());
          Py_RETURN_NONE;
        }

        static PyObject *t_ITPTFlux_getBackwardCommittor(t_ITPTFlux *self)
        {
          ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
          OBJ_CALL(result = self->object.getBackwardCommittor());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        static PyObject *t_ITPTFlux_getFlux(t_ITPTFlux *self)
        {
          ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
          OBJ_CALL(result = self->object.getFlux());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        static PyObject *t_ITPTFlux_getForwardCommittor(t_ITPTFlux *self)
        {
          ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
          OBJ_CALL(result = self->object.getForwardCommittor());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        static PyObject *t_ITPTFlux_getNetFlux(t_ITPTFlux *self)
        {
          ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
          OBJ_CALL(result = self->object.getNetFlux());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        static PyObject *t_ITPTFlux_getRate(t_ITPTFlux *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getRate());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_ITPTFlux_getStationaryDistribution(t_ITPTFlux *self)
        {
          ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
          OBJ_CALL(result = self->object.getStationaryDistribution());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        static PyObject *t_ITPTFlux_getTotalFlux(t_ITPTFlux *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getTotalFlux());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_ITPTFlux_setRateMatrix(t_ITPTFlux *self, PyObject *arg)
        {
          ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setRateMatrix(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRateMatrix", arg);
          return NULL;
        }

        static PyObject *t_ITPTFlux_setStationaryDistribution(t_ITPTFlux *self, PyObject *arg)
        {
          ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setStationaryDistribution(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStationaryDistribution", arg);
          return NULL;
        }

        static PyObject *t_ITPTFlux_setTransitionMatrix(t_ITPTFlux *self, PyObject *arg)
        {
          ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTransitionMatrix(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTransitionMatrix", arg);
          return NULL;
        }

        static PyObject *t_ITPTFlux_get__backwardCommittor(t_ITPTFlux *self, void *data)
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          OBJ_CALL(value = self->object.getBackwardCommittor());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
        }

        static PyObject *t_ITPTFlux_get__flux(t_ITPTFlux *self, void *data)
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          OBJ_CALL(value = self->object.getFlux());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
        }

        static PyObject *t_ITPTFlux_get__forwardCommittor(t_ITPTFlux *self, void *data)
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          OBJ_CALL(value = self->object.getForwardCommittor());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
        }

        static PyObject *t_ITPTFlux_get__netFlux(t_ITPTFlux *self, void *data)
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          OBJ_CALL(value = self->object.getNetFlux());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
        }

        static PyObject *t_ITPTFlux_get__rate(t_ITPTFlux *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRate());
          return PyFloat_FromDouble((double) value);
        }

        static int t_ITPTFlux_set__rateMatrix(t_ITPTFlux *self, PyObject *arg, void *data)
        {
          {
            ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
            if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
            {
              INT_CALL(self->object.setRateMatrix(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rateMatrix", arg);
          return -1;
        }

        static PyObject *t_ITPTFlux_get__stationaryDistribution(t_ITPTFlux *self, void *data)
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          OBJ_CALL(value = self->object.getStationaryDistribution());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
        }
        static int t_ITPTFlux_set__stationaryDistribution(t_ITPTFlux *self, PyObject *arg, void *data)
        {
          {
            ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
            if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
            {
              INT_CALL(self->object.setStationaryDistribution(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "stationaryDistribution", arg);
          return -1;
        }

        static PyObject *t_ITPTFlux_get__totalFlux(t_ITPTFlux *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getTotalFlux());
          return PyFloat_FromDouble((double) value);
        }

        static int t_ITPTFlux_set__transitionMatrix(t_ITPTFlux *self, PyObject *arg, void *data)
        {
          {
            ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
            if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
            {
              INT_CALL(self->object.setTransitionMatrix(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "transitionMatrix", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/io/IOFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace io {

      ::java::lang::Class *IOFactory::class$ = NULL;
      jmethodID *IOFactory::mids$ = NULL;
      bool IOFactory::live$ = false;

      jclass IOFactory::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/io/IOFactory");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      IOFactory::IOFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace io {
      static PyObject *t_IOFactory_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IOFactory_instance_(PyTypeObject *type, PyObject *arg);
      static int t_IOFactory_init_(t_IOFactory *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_IOFactory__methods_[] = {
        DECLARE_METHOD(t_IOFactory, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IOFactory, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IOFactory, t_IOFactory, ::java::lang::Object, IOFactory, t_IOFactory_init_, 0, 0, 0, 0, 0);

      void t_IOFactory::install(PyObject *module)
      {
        installType(&PY_TYPE(IOFactory), module, "IOFactory", 0);
      }

      void t_IOFactory::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IOFactory).tp_dict, "class_", make_descriptor(IOFactory::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IOFactory).tp_dict, "wrapfn_", make_descriptor(t_IOFactory::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IOFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IOFactory_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IOFactory::initializeClass, 1)))
          return NULL;
        return t_IOFactory::wrap_Object(IOFactory(((t_IOFactory *) arg)->object.this$));
      }
      static PyObject *t_IOFactory_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IOFactory::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_IOFactory_init_(t_IOFactory *self, PyObject *args, PyObject *kwds)
      {
        IOFactory object((jobject) NULL);

        INT_CALL(object = IOFactory());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/datasequence/IDataWriter.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Iterable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace datasequence {

      ::java::lang::Class *IDataWriter::class$ = NULL;
      jmethodID *IDataWriter::mids$ = NULL;
      bool IDataWriter::live$ = false;

      jclass IDataWriter::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/datasequence/IDataWriter");

          mids$ = new jmethodID[max_mid];
          mids$[mid_add_0253084a] = env->getMethodID(cls, "add", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_addAll_d1cac205] = env->getMethodID(cls, "addAll", "(Ljava/lang/Iterable;)V");
          mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void IDataWriter::add(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_add_0253084a], a0.this$);
      }

      void IDataWriter::addAll(const ::java::lang::Iterable & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_addAll_d1cac205], a0.this$);
      }

      void IDataWriter::close() const
      {
        env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace datasequence {
      static PyObject *t_IDataWriter_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDataWriter_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDataWriter_add(t_IDataWriter *self, PyObject *arg);
      static PyObject *t_IDataWriter_addAll(t_IDataWriter *self, PyObject *arg);
      static PyObject *t_IDataWriter_close(t_IDataWriter *self);

      static PyMethodDef t_IDataWriter__methods_[] = {
        DECLARE_METHOD(t_IDataWriter, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDataWriter, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDataWriter, add, METH_O),
        DECLARE_METHOD(t_IDataWriter, addAll, METH_O),
        DECLARE_METHOD(t_IDataWriter, close, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IDataWriter, t_IDataWriter, ::java::lang::Object, IDataWriter, abstract_init, 0, 0, 0, 0, 0);

      void t_IDataWriter::install(PyObject *module)
      {
        installType(&PY_TYPE(IDataWriter), module, "IDataWriter", 0);
      }

      void t_IDataWriter::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IDataWriter).tp_dict, "class_", make_descriptor(IDataWriter::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IDataWriter).tp_dict, "wrapfn_", make_descriptor(t_IDataWriter::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IDataWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IDataWriter_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IDataWriter::initializeClass, 1)))
          return NULL;
        return t_IDataWriter::wrap_Object(IDataWriter(((t_IDataWriter *) arg)->object.this$));
      }
      static PyObject *t_IDataWriter_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IDataWriter::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IDataWriter_add(t_IDataWriter *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.add(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "add", arg);
        return NULL;
      }

      static PyObject *t_IDataWriter_addAll(t_IDataWriter *self, PyObject *arg)
      {
        ::java::lang::Iterable a0((jobject) NULL);
        PyTypeObject **p0;

        if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
        {
          OBJ_CALL(self->object.addAll(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "addAll", arg);
        return NULL;
      }

      static PyObject *t_IDataWriter_close(t_IDataWriter *self)
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/potential/PotentialFactory.h"
#include "stallone/api/ints/IIntArray.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/potential/IEnergyModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace potential {

      ::java::lang::Class *PotentialFactory::class$ = NULL;
      jmethodID *PotentialFactory::mids$ = NULL;
      bool PotentialFactory::live$ = false;

      jclass PotentialFactory::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/potential/PotentialFactory");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_createBistablePotential_39cb644b] = env->getMethodID(cls, "createBistablePotential", "(DDD)Lstallone/api/potential/IEnergyModel;");
          mids$[mid_createBistablePotential_caf283f6] = env->getMethodID(cls, "createBistablePotential", "(DDDD)Lstallone/api/potential/IEnergyModel;");
          mids$[mid_createCoulombPotential_1de4cd01] = env->getMethodID(cls, "createCoulombPotential", "(Lstallone/api/doubles/IDoubleArray;D)Lstallone/api/potential/IEnergyModel;");
          mids$[mid_createCoulombPotential_389e8ec3] = env->getMethodID(cls, "createCoulombPotential", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/ints/IIntArray;D)Lstallone/api/potential/IEnergyModel;");
          mids$[mid_createFoldingModel_ac319d50] = env->getMethodID(cls, "createFoldingModel", "(DDDDI)Lstallone/api/potential/IEnergyModel;");
          mids$[mid_createHarmonicNetwork_373667c4] = env->getMethodID(cls, "createHarmonicNetwork", "(I)Lstallone/api/potential/IEnergyModel;");
          mids$[mid_createHarmonicOscillator_49727f51] = env->getMethodID(cls, "createHarmonicOscillator", "(D)Lstallone/api/potential/IEnergyModel;");
          mids$[mid_createLennardJonesModel_9c427ad8] = env->getMethodID(cls, "createLennardJonesModel", "(ILstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/potential/IEnergyModel;");
          mids$[mid_createLennardJonesModel_3d9f564e] = env->getMethodID(cls, "createLennardJonesModel", "(ILstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;Lstallone/api/ints/IIntArray;)Lstallone/api/potential/IEnergyModel;");
          mids$[mid_createPotential_44f9853a] = env->getMethodID(cls, "createPotential", "(Ljava/lang/String;[Ljava/lang/String;)Lstallone/api/potential/IEnergyModel;");
          mids$[mid_createPotential_f9bdb1a8] = env->getMethodID(cls, "createPotential", "([Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lstallone/api/potential/IEnergyModel;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      PotentialFactory::PotentialFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::stallone::api::potential::IEnergyModel PotentialFactory::createBistablePotential(jdouble a0, jdouble a1, jdouble a2) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createBistablePotential_39cb644b], a0, a1, a2));
      }

      ::stallone::api::potential::IEnergyModel PotentialFactory::createBistablePotential(jdouble a0, jdouble a1, jdouble a2, jdouble a3) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createBistablePotential_caf283f6], a0, a1, a2, a3));
      }

      ::stallone::api::potential::IEnergyModel PotentialFactory::createCoulombPotential(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createCoulombPotential_1de4cd01], a0.this$, a1));
      }

      ::stallone::api::potential::IEnergyModel PotentialFactory::createCoulombPotential(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::ints::IIntArray & a1, jdouble a2) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createCoulombPotential_389e8ec3], a0.this$, a1.this$, a2));
      }

      ::stallone::api::potential::IEnergyModel PotentialFactory::createFoldingModel(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jint a4) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createFoldingModel_ac319d50], a0, a1, a2, a3, a4));
      }

      ::stallone::api::potential::IEnergyModel PotentialFactory::createHarmonicNetwork(jint a0) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createHarmonicNetwork_373667c4], a0));
      }

      ::stallone::api::potential::IEnergyModel PotentialFactory::createHarmonicOscillator(jdouble a0) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createHarmonicOscillator_49727f51], a0));
      }

      ::stallone::api::potential::IEnergyModel PotentialFactory::createLennardJonesModel(jint a0, const ::stallone::api::doubles::IDoubleArray & a1, const ::stallone::api::doubles::IDoubleArray & a2) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createLennardJonesModel_9c427ad8], a0, a1.this$, a2.this$));
      }

      ::stallone::api::potential::IEnergyModel PotentialFactory::createLennardJonesModel(jint a0, const ::stallone::api::doubles::IDoubleArray & a1, const ::stallone::api::doubles::IDoubleArray & a2, const ::stallone::api::ints::IIntArray & a3) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createLennardJonesModel_3d9f564e], a0, a1.this$, a2.this$, a3.this$));
      }

      ::stallone::api::potential::IEnergyModel PotentialFactory::createPotential(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createPotential_44f9853a], a0.this$, a1.this$));
      }

      ::stallone::api::potential::IEnergyModel PotentialFactory::createPotential(const JArray< ::java::lang::String > & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
      {
        return ::stallone::api::potential::IEnergyModel(env->callObjectMethod(this$, mids$[mid_createPotential_f9bdb1a8], a0.this$, a1.this$, a2.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace potential {
      static PyObject *t_PotentialFactory_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_PotentialFactory_instance_(PyTypeObject *type, PyObject *arg);
      static int t_PotentialFactory_init_(t_PotentialFactory *self, PyObject *args, PyObject *kwds);
      static PyObject *t_PotentialFactory_createBistablePotential(t_PotentialFactory *self, PyObject *args);
      static PyObject *t_PotentialFactory_createCoulombPotential(t_PotentialFactory *self, PyObject *args);
      static PyObject *t_PotentialFactory_createFoldingModel(t_PotentialFactory *self, PyObject *args);
      static PyObject *t_PotentialFactory_createHarmonicNetwork(t_PotentialFactory *self, PyObject *arg);
      static PyObject *t_PotentialFactory_createHarmonicOscillator(t_PotentialFactory *self, PyObject *arg);
      static PyObject *t_PotentialFactory_createLennardJonesModel(t_PotentialFactory *self, PyObject *args);
      static PyObject *t_PotentialFactory_createPotential(t_PotentialFactory *self, PyObject *args);

      static PyMethodDef t_PotentialFactory__methods_[] = {
        DECLARE_METHOD(t_PotentialFactory, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_PotentialFactory, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_PotentialFactory, createBistablePotential, METH_VARARGS),
        DECLARE_METHOD(t_PotentialFactory, createCoulombPotential, METH_VARARGS),
        DECLARE_METHOD(t_PotentialFactory, createFoldingModel, METH_VARARGS),
        DECLARE_METHOD(t_PotentialFactory, createHarmonicNetwork, METH_O),
        DECLARE_METHOD(t_PotentialFactory, createHarmonicOscillator, METH_O),
        DECLARE_METHOD(t_PotentialFactory, createLennardJonesModel, METH_VARARGS),
        DECLARE_METHOD(t_PotentialFactory, createPotential, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(PotentialFactory, t_PotentialFactory, ::java::lang::Object, PotentialFactory, t_PotentialFactory_init_, 0, 0, 0, 0, 0);

      void t_PotentialFactory::install(PyObject *module)
      {
        installType(&PY_TYPE(PotentialFactory), module, "PotentialFactory", 0);
      }

      void t_PotentialFactory::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(PotentialFactory).tp_dict, "class_", make_descriptor(PotentialFactory::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(PotentialFactory).tp_dict, "wrapfn_", make_descriptor(t_PotentialFactory::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(PotentialFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_PotentialFactory_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, PotentialFactory::initializeClass, 1)))
          return NULL;
        return t_PotentialFactory::wrap_Object(PotentialFactory(((t_PotentialFactory *) arg)->object.this$));
      }
      static PyObject *t_PotentialFactory_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, PotentialFactory::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_PotentialFactory_init_(t_PotentialFactory *self, PyObject *args, PyObject *kwds)
      {
        PotentialFactory object((jobject) NULL);

        INT_CALL(object = PotentialFactory());
        self->object = object;

        return 0;
      }

      static PyObject *t_PotentialFactory_createBistablePotential(t_PotentialFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 3:
          {
            jdouble a0;
            jdouble a1;
            jdouble a2;
            ::stallone::api::potential::IEnergyModel result((jobject) NULL);

            if (!parseArgs(args, "DDD", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.createBistablePotential(a0, a1, a2));
              return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
            }
          }
          break;
         case 4:
          {
            jdouble a0;
            jdouble a1;
            jdouble a2;
            jdouble a3;
            ::stallone::api::potential::IEnergyModel result((jobject) NULL);

            if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.createBistablePotential(a0, a1, a2, a3));
              return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "createBistablePotential", args);
        return NULL;
      }

      static PyObject *t_PotentialFactory_createCoulombPotential(t_PotentialFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jdouble a1;
            ::stallone::api::potential::IEnergyModel result((jobject) NULL);

            if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createCoulombPotential(a0, a1));
              return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            jdouble a2;
            ::stallone::api::potential::IEnergyModel result((jobject) NULL);

            if (!parseArgs(args, "kkD", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.createCoulombPotential(a0, a1, a2));
              return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "createCoulombPotential", args);
        return NULL;
      }

      static PyObject *t_PotentialFactory_createFoldingModel(t_PotentialFactory *self, PyObject *args)
      {
        jdouble a0;
        jdouble a1;
        jdouble a2;
        jdouble a3;
        jint a4;
        ::stallone::api::potential::IEnergyModel result((jobject) NULL);

        if (!parseArgs(args, "DDDDI", &a0, &a1, &a2, &a3, &a4))
        {
          OBJ_CALL(result = self->object.createFoldingModel(a0, a1, a2, a3, a4));
          return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "createFoldingModel", args);
        return NULL;
      }

      static PyObject *t_PotentialFactory_createHarmonicNetwork(t_PotentialFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::potential::IEnergyModel result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.createHarmonicNetwork(a0));
          return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "createHarmonicNetwork", arg);
        return NULL;
      }

      static PyObject *t_PotentialFactory_createHarmonicOscillator(t_PotentialFactory *self, PyObject *arg)
      {
        jdouble a0;
        ::stallone::api::potential::IEnergyModel result((jobject) NULL);

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(result = self->object.createHarmonicOscillator(a0));
          return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "createHarmonicOscillator", arg);
        return NULL;
      }

      static PyObject *t_PotentialFactory_createLennardJonesModel(t_PotentialFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 3:
          {
            jint a0;
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a2((jobject) NULL);
            ::stallone::api::potential::IEnergyModel result((jobject) NULL);

            if (!parseArgs(args, "Ikk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.createLennardJonesModel(a0, a1, a2));
              return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
            }
          }
          break;
         case 4:
          {
            jint a0;
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a2((jobject) NULL);
            ::stallone::api::ints::IIntArray a3((jobject) NULL);
            ::stallone::api::potential::IEnergyModel result((jobject) NULL);

            if (!parseArgs(args, "Ikkk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.createLennardJonesModel(a0, a1, a2, a3));
              return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "createLennardJonesModel", args);
        return NULL;
      }

      static PyObject *t_PotentialFactory_createPotential(t_PotentialFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::stallone::api::potential::IEnergyModel result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.createPotential(a0, a1));
              return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            JArray< ::java::lang::String > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::stallone::api::potential::IEnergyModel result((jobject) NULL);

            if (!parseArgs(args, "[ss[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.createPotential(a0, a1, a2));
              return ::stallone::api::potential::t_IEnergyModel::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "createPotential", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Short.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Comparable.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Short::class$ = NULL;
    jmethodID *Short::mids$ = NULL;
    bool Short::live$ = false;
    jshort Short::MAX_VALUE = (jshort) 0;
    jshort Short::MIN_VALUE = (jshort) 0;
    jint Short::SIZE = (jint) 0;
    ::java::lang::Class *Short::TYPE = NULL;

    jclass Short::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Short");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_3bc40c6a] = env->getMethodID(cls, "<init>", "(S)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compareTo_6b8573d1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Short;)I");
        mids$[mid_decode_88c4db41] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseShort_5fdc3f4d] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;)S");
        mids$[mid_parseShort_6e53ccc3] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;I)S");
        mids$[mid_reverseBytes_3bc40c6f] = env->getStaticMethodID(cls, "reverseBytes", "(S)S");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_9c2e4c45] = env->getStaticMethodID(cls, "toString", "(S)Ljava/lang/String;");
        mids$[mid_valueOf_5d563b1b] = env->getStaticMethodID(cls, "valueOf", "(S)Ljava/lang/Short;");
        mids$[mid_valueOf_88c4db41] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_valueOf_0f6bcb23] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Short;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_VALUE = env->getStaticShortField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticShortField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Short::Short(jshort a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_3bc40c6a, a0)) {}

    Short::Short(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Short::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Short::compareTo(const Short & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_6b8573d1], a0.this$);
    }

    Short Short::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_decode_88c4db41], a0.this$));
    }

    jdouble Short::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Short::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Short::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Short::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Short::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Short::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jshort Short::parseShort(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_5fdc3f4d], a0.this$);
    }

    jshort Short::parseShort(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_6e53ccc3], a0.this$, a1);
    }

    jshort Short::reverseBytes(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_reverseBytes_3bc40c6f], a0);
    }

    jshort Short::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Short::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Short::toString(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9c2e4c45], a0));
    }

    Short Short::valueOf(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5d563b1b], a0));
    }

    Short Short::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_88c4db41], a0.this$));
    }

    Short Short::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0f6bcb23], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg);
    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_equals(t_Short *self, PyObject *args);
    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args);
    static PyObject *t_Short_intValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_longValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Short__methods_[] = {
      DECLARE_METHOD(t_Short, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, compareTo, METH_O),
      DECLARE_METHOD(t_Short, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, equals, METH_VARARGS),
      DECLARE_METHOD(t_Short, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Short, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, parseShort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Short, t_Short, ::java::lang::Number, Short, t_Short_init_, 0, 0, 0, 0, 0);

    void t_Short::install(PyObject *module)
    {
      installType(&PY_TYPE(Short), module, "Short", 0);
    }

    void t_Short::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "class_", make_descriptor(Short::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "wrapfn_", make_descriptor(unboxShort));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "boxfn_", make_descriptor(boxShort));
      env->getClass(Short::initializeClass);
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MAX_VALUE", make_descriptor(Short::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MIN_VALUE", make_descriptor(Short::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "SIZE", make_descriptor(Short::SIZE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Short::TYPE)));
    }

    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Short::initializeClass, 1)))
        return NULL;
      return t_Short::wrap_Object(Short(((t_Short *) arg)->object.this$));
    }
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Short::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jshort a0;
          Short object((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Short object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg)
    {
      Short a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Short), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Short result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::decode(a0));
        return t_Short::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Short_equals(t_Short *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Short_intValue(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Short_longValue(t_Short *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jshort result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jshort result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseShort", args);
      return NULL;
    }

    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jshort result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::reverseBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Short_toString(t_Short *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jshort a0;
          Short result((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Short result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Short result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0, a1));
            return t_Short::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/discretization/DiscretizationUtilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace discretization {

      ::java::lang::Class *DiscretizationUtilities::class$ = NULL;
      jmethodID *DiscretizationUtilities::mids$ = NULL;
      bool DiscretizationUtilities::live$ = false;

      jclass DiscretizationUtilities::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/discretization/DiscretizationUtilities");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      DiscretizationUtilities::DiscretizationUtilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace discretization {
      static PyObject *t_DiscretizationUtilities_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiscretizationUtilities_instance_(PyTypeObject *type, PyObject *arg);
      static int t_DiscretizationUtilities_init_(t_DiscretizationUtilities *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_DiscretizationUtilities__methods_[] = {
        DECLARE_METHOD(t_DiscretizationUtilities, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiscretizationUtilities, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(DiscretizationUtilities, t_DiscretizationUtilities, ::java::lang::Object, DiscretizationUtilities, t_DiscretizationUtilities_init_, 0, 0, 0, 0, 0);

      void t_DiscretizationUtilities::install(PyObject *module)
      {
        installType(&PY_TYPE(DiscretizationUtilities), module, "DiscretizationUtilities", 0);
      }

      void t_DiscretizationUtilities::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(DiscretizationUtilities).tp_dict, "class_", make_descriptor(DiscretizationUtilities::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(DiscretizationUtilities).tp_dict, "wrapfn_", make_descriptor(t_DiscretizationUtilities::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(DiscretizationUtilities).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_DiscretizationUtilities_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, DiscretizationUtilities::initializeClass, 1)))
          return NULL;
        return t_DiscretizationUtilities::wrap_Object(DiscretizationUtilities(((t_DiscretizationUtilities *) arg)->object.this$));
      }
      static PyObject *t_DiscretizationUtilities_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, DiscretizationUtilities::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_DiscretizationUtilities_init_(t_DiscretizationUtilities *self, PyObject *args, PyObject *kwds)
      {
        DiscretizationUtilities object((jobject) NULL);

        INT_CALL(object = DiscretizationUtilities());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/datasequence/IDataSequenceLoader.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Iterable.h"
#include "stallone/api/datasequence/IDataSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace datasequence {

      ::java::lang::Class *IDataSequenceLoader::class$ = NULL;
      jmethodID *IDataSequenceLoader::mids$ = NULL;
      bool IDataSequenceLoader::live$ = false;

      jclass IDataSequenceLoader::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/datasequence/IDataSequenceLoader");

          mids$ = new jmethodID[max_mid];
          mids$[mid_dimension_54c6a179] = env->getMethodID(cls, "dimension", "()I");
          mids$[mid_getSingleDataLoader_0ab6fc38] = env->getMethodID(cls, "getSingleDataLoader", "()Ljava/lang/Iterable;");
          mids$[mid_getSingleSequenceLoader_0ab6fc38] = env->getMethodID(cls, "getSingleSequenceLoader", "()Ljava/lang/Iterable;");
          mids$[mid_load_3cbb604f] = env->getMethodID(cls, "load", "(II)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_loadSequence_062b33a3] = env->getMethodID(cls, "loadSequence", "(I)Lstallone/api/datasequence/IDataSequence;");
          mids$[mid_memorySizeOfLargestSequence_54c6a17a] = env->getMethodID(cls, "memorySizeOfLargestSequence", "()J");
          mids$[mid_memorySizeOfSingleSequence_39c7bd20] = env->getMethodID(cls, "memorySizeOfSingleSequence", "(I)J");
          mids$[mid_memorySizeTotal_54c6a17a] = env->getMethodID(cls, "memorySizeTotal", "()J");
          mids$[mid_numberOfSequences_54c6a179] = env->getMethodID(cls, "numberOfSequences", "()I");
          mids$[mid_scan_54c6a166] = env->getMethodID(cls, "scan", "()V");
          mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
          mids$[mid_size_39c7bd23] = env->getMethodID(cls, "size", "(I)I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jint IDataSequenceLoader::dimension() const
      {
        return env->callIntMethod(this$, mids$[mid_dimension_54c6a179]);
      }

      ::java::lang::Iterable IDataSequenceLoader::getSingleDataLoader() const
      {
        return ::java::lang::Iterable(env->callObjectMethod(this$, mids$[mid_getSingleDataLoader_0ab6fc38]));
      }

      ::java::lang::Iterable IDataSequenceLoader::getSingleSequenceLoader() const
      {
        return ::java::lang::Iterable(env->callObjectMethod(this$, mids$[mid_getSingleSequenceLoader_0ab6fc38]));
      }

      ::stallone::api::doubles::IDoubleArray IDataSequenceLoader::load(jint a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_load_3cbb604f], a0, a1));
      }

      ::stallone::api::datasequence::IDataSequence IDataSequenceLoader::loadSequence(jint a0) const
      {
        return ::stallone::api::datasequence::IDataSequence(env->callObjectMethod(this$, mids$[mid_loadSequence_062b33a3], a0));
      }

      jlong IDataSequenceLoader::memorySizeOfLargestSequence() const
      {
        return env->callLongMethod(this$, mids$[mid_memorySizeOfLargestSequence_54c6a17a]);
      }

      jlong IDataSequenceLoader::memorySizeOfSingleSequence(jint a0) const
      {
        return env->callLongMethod(this$, mids$[mid_memorySizeOfSingleSequence_39c7bd20], a0);
      }

      jlong IDataSequenceLoader::memorySizeTotal() const
      {
        return env->callLongMethod(this$, mids$[mid_memorySizeTotal_54c6a17a]);
      }

      jint IDataSequenceLoader::numberOfSequences() const
      {
        return env->callIntMethod(this$, mids$[mid_numberOfSequences_54c6a179]);
      }

      void IDataSequenceLoader::scan() const
      {
        env->callVoidMethod(this$, mids$[mid_scan_54c6a166]);
      }

      jint IDataSequenceLoader::size() const
      {
        return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
      }

      jint IDataSequenceLoader::size(jint a0) const
      {
        return env->callIntMethod(this$, mids$[mid_size_39c7bd23], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace datasequence {
      static PyObject *t_IDataSequenceLoader_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDataSequenceLoader_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDataSequenceLoader_dimension(t_IDataSequenceLoader *self);
      static PyObject *t_IDataSequenceLoader_getSingleDataLoader(t_IDataSequenceLoader *self);
      static PyObject *t_IDataSequenceLoader_getSingleSequenceLoader(t_IDataSequenceLoader *self);
      static PyObject *t_IDataSequenceLoader_load(t_IDataSequenceLoader *self, PyObject *args);
      static PyObject *t_IDataSequenceLoader_loadSequence(t_IDataSequenceLoader *self, PyObject *arg);
      static PyObject *t_IDataSequenceLoader_memorySizeOfLargestSequence(t_IDataSequenceLoader *self);
      static PyObject *t_IDataSequenceLoader_memorySizeOfSingleSequence(t_IDataSequenceLoader *self, PyObject *arg);
      static PyObject *t_IDataSequenceLoader_memorySizeTotal(t_IDataSequenceLoader *self);
      static PyObject *t_IDataSequenceLoader_numberOfSequences(t_IDataSequenceLoader *self);
      static PyObject *t_IDataSequenceLoader_scan(t_IDataSequenceLoader *self);
      static PyObject *t_IDataSequenceLoader_size(t_IDataSequenceLoader *self, PyObject *args);
      static PyObject *t_IDataSequenceLoader_get__singleDataLoader(t_IDataSequenceLoader *self, void *data);
      static PyObject *t_IDataSequenceLoader_get__singleSequenceLoader(t_IDataSequenceLoader *self, void *data);
      static PyGetSetDef t_IDataSequenceLoader__fields_[] = {
        DECLARE_GET_FIELD(t_IDataSequenceLoader, singleDataLoader),
        DECLARE_GET_FIELD(t_IDataSequenceLoader, singleSequenceLoader),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IDataSequenceLoader__methods_[] = {
        DECLARE_METHOD(t_IDataSequenceLoader, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDataSequenceLoader, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDataSequenceLoader, dimension, METH_NOARGS),
        DECLARE_METHOD(t_IDataSequenceLoader, getSingleDataLoader, METH_NOARGS),
        DECLARE_METHOD(t_IDataSequenceLoader, getSingleSequenceLoader, METH_NOARGS),
        DECLARE_METHOD(t_IDataSequenceLoader, load, METH_VARARGS),
        DECLARE_METHOD(t_IDataSequenceLoader, loadSequence, METH_O),
        DECLARE_METHOD(t_IDataSequenceLoader, memorySizeOfLargestSequence, METH_NOARGS),
        DECLARE_METHOD(t_IDataSequenceLoader, memorySizeOfSingleSequence, METH_O),
        DECLARE_METHOD(t_IDataSequenceLoader, memorySizeTotal, METH_NOARGS),
        DECLARE_METHOD(t_IDataSequenceLoader, numberOfSequences, METH_NOARGS),
        DECLARE_METHOD(t_IDataSequenceLoader, scan, METH_NOARGS),
        DECLARE_METHOD(t_IDataSequenceLoader, size, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IDataSequenceLoader, t_IDataSequenceLoader, ::java::lang::Object, IDataSequenceLoader, abstract_init, 0, 0, t_IDataSequenceLoader__fields_, 0, 0);

      void t_IDataSequenceLoader::install(PyObject *module)
      {
        installType(&PY_TYPE(IDataSequenceLoader), module, "IDataSequenceLoader", 0);
      }

      void t_IDataSequenceLoader::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IDataSequenceLoader).tp_dict, "class_", make_descriptor(IDataSequenceLoader::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IDataSequenceLoader).tp_dict, "wrapfn_", make_descriptor(t_IDataSequenceLoader::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IDataSequenceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IDataSequenceLoader_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IDataSequenceLoader::initializeClass, 1)))
          return NULL;
        return t_IDataSequenceLoader::wrap_Object(IDataSequenceLoader(((t_IDataSequenceLoader *) arg)->object.this$));
      }
      static PyObject *t_IDataSequenceLoader_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IDataSequenceLoader::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IDataSequenceLoader_dimension(t_IDataSequenceLoader *self)
      {
        jint result;
        OBJ_CALL(result = self->object.dimension());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IDataSequenceLoader_getSingleDataLoader(t_IDataSequenceLoader *self)
      {
        ::java::lang::Iterable result((jobject) NULL);
        OBJ_CALL(result = self->object.getSingleDataLoader());
        return ::java::lang::t_Iterable::wrap_Object(result, &::stallone::api::doubles::PY_TYPE(IDoubleArray));
      }

      static PyObject *t_IDataSequenceLoader_getSingleSequenceLoader(t_IDataSequenceLoader *self)
      {
        ::java::lang::Iterable result((jobject) NULL);
        OBJ_CALL(result = self->object.getSingleSequenceLoader());
        return ::java::lang::t_Iterable::wrap_Object(result, &::stallone::api::datasequence::PY_TYPE(IDataSequence));
      }

      static PyObject *t_IDataSequenceLoader_load(t_IDataSequenceLoader *self, PyObject *args)
      {
        jint a0;
        jint a1;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.load(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "load", args);
        return NULL;
      }

      static PyObject *t_IDataSequenceLoader_loadSequence(t_IDataSequenceLoader *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::datasequence::IDataSequence result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.loadSequence(a0));
          return ::stallone::api::datasequence::t_IDataSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "loadSequence", arg);
        return NULL;
      }

      static PyObject *t_IDataSequenceLoader_memorySizeOfLargestSequence(t_IDataSequenceLoader *self)
      {
        jlong result;
        OBJ_CALL(result = self->object.memorySizeOfLargestSequence());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      static PyObject *t_IDataSequenceLoader_memorySizeOfSingleSequence(t_IDataSequenceLoader *self, PyObject *arg)
      {
        jint a0;
        jlong result;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.memorySizeOfSingleSequence(a0));
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        PyErr_SetArgsError((PyObject *) self, "memorySizeOfSingleSequence", arg);
        return NULL;
      }

      static PyObject *t_IDataSequenceLoader_memorySizeTotal(t_IDataSequenceLoader *self)
      {
        jlong result;
        OBJ_CALL(result = self->object.memorySizeTotal());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      static PyObject *t_IDataSequenceLoader_numberOfSequences(t_IDataSequenceLoader *self)
      {
        jint result;
        OBJ_CALL(result = self->object.numberOfSequences());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IDataSequenceLoader_scan(t_IDataSequenceLoader *self)
      {
        OBJ_CALL(self->object.scan());
        Py_RETURN_NONE;
      }

      static PyObject *t_IDataSequenceLoader_size(t_IDataSequenceLoader *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }
          break;
         case 1:
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.size(a0));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "size", args);
        return NULL;
      }

      static PyObject *t_IDataSequenceLoader_get__singleDataLoader(t_IDataSequenceLoader *self, void *data)
      {
        ::java::lang::Iterable value((jobject) NULL);
        OBJ_CALL(value = self->object.getSingleDataLoader());
        return ::java::lang::t_Iterable::wrap_Object(value);
      }

      static PyObject *t_IDataSequenceLoader_get__singleSequenceLoader(t_IDataSequenceLoader *self, void *data)
      {
        ::java::lang::Iterable value((jobject) NULL);
        OBJ_CALL(value = self->object.getSingleSequenceLoader());
        return ::java::lang::t_Iterable::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/mc/IMarkovChain.h"
#include "stallone/api/ints/IIntArray.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace mc {

      ::java::lang::Class *IMarkovChain::class$ = NULL;
      jmethodID *IMarkovChain::mids$ = NULL;
      bool IMarkovChain::live$ = false;

      jclass IMarkovChain::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/mc/IMarkovChain");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getTransitionMatrix_1d53e353] = env->getMethodID(cls, "getTransitionMatrix", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_printRandomTrajectory_39c7bd3c] = env->getMethodID(cls, "printRandomTrajectory", "(I)V");
          mids$[mid_randomTrajectory_62213cdb] = env->getMethodID(cls, "randomTrajectory", "(I)Lstallone/api/ints/IIntArray;");
          mids$[mid_randomTrajectoryToState_e2b10697] = env->getMethodID(cls, "randomTrajectoryToState", "([I)Lstallone/api/ints/IIntArray;");
          mids$[mid_setStartingDistribution_0253084a] = env->getMethodID(cls, "setStartingDistribution", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_setStartingState_39c7bd3c] = env->getMethodID(cls, "setStartingState", "(I)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::stallone::api::doubles::IDoubleArray IMarkovChain::getTransitionMatrix() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getTransitionMatrix_1d53e353]));
      }

      void IMarkovChain::printRandomTrajectory(jint a0) const
      {
        env->callVoidMethod(this$, mids$[mid_printRandomTrajectory_39c7bd3c], a0);
      }

      ::stallone::api::ints::IIntArray IMarkovChain::randomTrajectory(jint a0) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_randomTrajectory_62213cdb], a0));
      }

      ::stallone::api::ints::IIntArray IMarkovChain::randomTrajectoryToState(const JArray< jint > & a0) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_randomTrajectoryToState_e2b10697], a0.this$));
      }

      void IMarkovChain::setStartingDistribution(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setStartingDistribution_0253084a], a0.this$);
      }

      void IMarkovChain::setStartingState(jint a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setStartingState_39c7bd3c], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace mc {
      static PyObject *t_IMarkovChain_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IMarkovChain_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IMarkovChain_getTransitionMatrix(t_IMarkovChain *self);
      static PyObject *t_IMarkovChain_printRandomTrajectory(t_IMarkovChain *self, PyObject *arg);
      static PyObject *t_IMarkovChain_randomTrajectory(t_IMarkovChain *self, PyObject *arg);
      static PyObject *t_IMarkovChain_randomTrajectoryToState(t_IMarkovChain *self, PyObject *arg);
      static PyObject *t_IMarkovChain_setStartingDistribution(t_IMarkovChain *self, PyObject *arg);
      static PyObject *t_IMarkovChain_setStartingState(t_IMarkovChain *self, PyObject *arg);
      static int t_IMarkovChain_set__startingDistribution(t_IMarkovChain *self, PyObject *arg, void *data);
      static int t_IMarkovChain_set__startingState(t_IMarkovChain *self, PyObject *arg, void *data);
      static PyObject *t_IMarkovChain_get__transitionMatrix(t_IMarkovChain *self, void *data);
      static PyGetSetDef t_IMarkovChain__fields_[] = {
        DECLARE_SET_FIELD(t_IMarkovChain, startingDistribution),
        DECLARE_SET_FIELD(t_IMarkovChain, startingState),
        DECLARE_GET_FIELD(t_IMarkovChain, transitionMatrix),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IMarkovChain__methods_[] = {
        DECLARE_METHOD(t_IMarkovChain, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IMarkovChain, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IMarkovChain, getTransitionMatrix, METH_NOARGS),
        DECLARE_METHOD(t_IMarkovChain, printRandomTrajectory, METH_O),
        DECLARE_METHOD(t_IMarkovChain, randomTrajectory, METH_O),
        DECLARE_METHOD(t_IMarkovChain, randomTrajectoryToState, METH_O),
        DECLARE_METHOD(t_IMarkovChain, setStartingDistribution, METH_O),
        DECLARE_METHOD(t_IMarkovChain, setStartingState, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IMarkovChain, t_IMarkovChain, ::java::lang::Object, IMarkovChain, abstract_init, 0, 0, t_IMarkovChain__fields_, 0, 0);

      void t_IMarkovChain::install(PyObject *module)
      {
        installType(&PY_TYPE(IMarkovChain), module, "IMarkovChain", 0);
      }

      void t_IMarkovChain::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IMarkovChain).tp_dict, "class_", make_descriptor(IMarkovChain::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IMarkovChain).tp_dict, "wrapfn_", make_descriptor(t_IMarkovChain::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IMarkovChain).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IMarkovChain_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IMarkovChain::initializeClass, 1)))
          return NULL;
        return t_IMarkovChain::wrap_Object(IMarkovChain(((t_IMarkovChain *) arg)->object.this$));
      }
      static PyObject *t_IMarkovChain_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IMarkovChain::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IMarkovChain_getTransitionMatrix(t_IMarkovChain *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getTransitionMatrix());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_IMarkovChain_printRandomTrajectory(t_IMarkovChain *self, PyObject *arg)
      {
        jint a0;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(self->object.printRandomTrajectory(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "printRandomTrajectory", arg);
        return NULL;
      }

      static PyObject *t_IMarkovChain_randomTrajectory(t_IMarkovChain *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.randomTrajectory(a0));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "randomTrajectory", arg);
        return NULL;
      }

      static PyObject *t_IMarkovChain_randomTrajectoryToState(t_IMarkovChain *self, PyObject *arg)
      {
        JArray< jint > a0((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArg(arg, "[I", &a0))
        {
          OBJ_CALL(result = self->object.randomTrajectoryToState(a0));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "randomTrajectoryToState", arg);
        return NULL;
      }

      static PyObject *t_IMarkovChain_setStartingDistribution(t_IMarkovChain *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setStartingDistribution(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setStartingDistribution", arg);
        return NULL;
      }

      static PyObject *t_IMarkovChain_setStartingState(t_IMarkovChain *self, PyObject *arg)
      {
        jint a0;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(self->object.setStartingState(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setStartingState", arg);
        return NULL;
      }

      static int t_IMarkovChain_set__startingDistribution(t_IMarkovChain *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setStartingDistribution(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "startingDistribution", arg);
        return -1;
      }

      static int t_IMarkovChain_set__startingState(t_IMarkovChain *self, PyObject *arg, void *data)
      {
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object.setStartingState(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "startingState", arg);
        return -1;
      }

      static PyObject *t_IMarkovChain_get__transitionMatrix(t_IMarkovChain *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getTransitionMatrix());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *RuntimeException::class$ = NULL;
    jmethodID *RuntimeException::mids$ = NULL;
    bool RuntimeException::live$ = false;

    jclass RuntimeException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/RuntimeException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    RuntimeException::RuntimeException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    RuntimeException::RuntimeException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_RuntimeException__methods_[] = {
      DECLARE_METHOD(t_RuntimeException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_RuntimeException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(RuntimeException, t_RuntimeException, ::java::lang::Exception, RuntimeException, t_RuntimeException_init_, 0, 0, 0, 0, 0);

    void t_RuntimeException::install(PyObject *module)
    {
      installType(&PY_TYPE(RuntimeException), module, "RuntimeException", 0);
    }

    void t_RuntimeException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "class_", make_descriptor(RuntimeException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "wrapfn_", make_descriptor(t_RuntimeException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, RuntimeException::initializeClass, 1)))
        return NULL;
      return t_RuntimeException::wrap_Object(RuntimeException(((t_RuntimeException *) arg)->object.this$));
    }
    static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, RuntimeException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          RuntimeException object((jobject) NULL);

          INT_CALL(object = RuntimeException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::Throwable a0((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = RuntimeException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          RuntimeException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RuntimeException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/ints/IIntArray.h"
#include "stallone/api/ints/IIntIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace ints {

      ::java::lang::Class *IIntArray::class$ = NULL;
      jmethodID *IIntArray::mids$ = NULL;
      bool IIntArray::live$ = false;

      jclass IIntArray::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/ints/IIntArray");

          mids$ = new jmethodID[max_mid];
          mids$[mid_columns_54c6a179] = env->getMethodID(cls, "columns", "()I");
          mids$[mid_copy_4ac77731] = env->getMethodID(cls, "copy", "()Lstallone/api/ints/IIntArray;");
          mids$[mid_copyFrom_059aa494] = env->getMethodID(cls, "copyFrom", "(Lstallone/api/ints/IIntArray;)V");
          mids$[mid_copyInto_059aa494] = env->getMethodID(cls, "copyInto", "(Lstallone/api/ints/IIntArray;)V");
          mids$[mid_create_62213cdb] = env->getMethodID(cls, "create", "(I)Lstallone/api/ints/IIntArray;");
          mids$[mid_create_004e62f1] = env->getMethodID(cls, "create", "(II)Lstallone/api/ints/IIntArray;");
          mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");
          mids$[mid_get_d8d154b9] = env->getMethodID(cls, "get", "(II)I");
          mids$[mid_getArray_dab10e75] = env->getMethodID(cls, "getArray", "()[I");
          mids$[mid_getColumn_b4292e93] = env->getMethodID(cls, "getColumn", "(I)[I");
          mids$[mid_getRow_b4292e93] = env->getMethodID(cls, "getRow", "(I)[I");
          mids$[mid_getTable_b9d949a5] = env->getMethodID(cls, "getTable", "()[[I");
          mids$[mid_isSparse_54c6a16a] = env->getMethodID(cls, "isSparse", "()Z");
          mids$[mid_iterator_6c27215b] = env->getMethodID(cls, "iterator", "()Lstallone/api/ints/IIntIterator;");
          mids$[mid_nonzeroIterator_6c27215b] = env->getMethodID(cls, "nonzeroIterator", "()Lstallone/api/ints/IIntIterator;");
          mids$[mid_order_54c6a179] = env->getMethodID(cls, "order", "()I");
          mids$[mid_rows_54c6a179] = env->getMethodID(cls, "rows", "()I");
          mids$[mid_set_d8d154a6] = env->getMethodID(cls, "set", "(II)V");
          mids$[mid_set_d3236aa4] = env->getMethodID(cls, "set", "(III)V");
          mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
          mids$[mid_viewColumn_62213cdb] = env->getMethodID(cls, "viewColumn", "(I)Lstallone/api/ints/IIntArray;");
          mids$[mid_viewRow_62213cdb] = env->getMethodID(cls, "viewRow", "(I)Lstallone/api/ints/IIntArray;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jint IIntArray::columns() const
      {
        return env->callIntMethod(this$, mids$[mid_columns_54c6a179]);
      }

      IIntArray IIntArray::copy() const
      {
        return IIntArray(env->callObjectMethod(this$, mids$[mid_copy_4ac77731]));
      }

      void IIntArray::copyFrom(const IIntArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_copyFrom_059aa494], a0.this$);
      }

      void IIntArray::copyInto(const IIntArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_copyInto_059aa494], a0.this$);
      }

      IIntArray IIntArray::create(jint a0) const
      {
        return IIntArray(env->callObjectMethod(this$, mids$[mid_create_62213cdb], a0));
      }

      IIntArray IIntArray::create(jint a0, jint a1) const
      {
        return IIntArray(env->callObjectMethod(this$, mids$[mid_create_004e62f1], a0, a1));
      }

      jint IIntArray::get(jint a0) const
      {
        return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
      }

      jint IIntArray::get(jint a0, jint a1) const
      {
        return env->callIntMethod(this$, mids$[mid_get_d8d154b9], a0, a1);
      }

      JArray< jint > IIntArray::getArray() const
      {
        return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e75]));
      }

      JArray< jint > IIntArray::getColumn(jint a0) const
      {
        return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getColumn_b4292e93], a0));
      }

      JArray< jint > IIntArray::getRow(jint a0) const
      {
        return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getRow_b4292e93], a0));
      }

      JArray< JArray< jint > > IIntArray::getTable() const
      {
        return JArray< JArray< jint > >(env->callObjectMethod(this$, mids$[mid_getTable_b9d949a5]));
      }

      jboolean IIntArray::isSparse() const
      {
        return env->callBooleanMethod(this$, mids$[mid_isSparse_54c6a16a]);
      }

      ::stallone::api::ints::IIntIterator IIntArray::iterator() const
      {
        return ::stallone::api::ints::IIntIterator(env->callObjectMethod(this$, mids$[mid_iterator_6c27215b]));
      }

      ::stallone::api::ints::IIntIterator IIntArray::nonzeroIterator() const
      {
        return ::stallone::api::ints::IIntIterator(env->callObjectMethod(this$, mids$[mid_nonzeroIterator_6c27215b]));
      }

      jint IIntArray::order() const
      {
        return env->callIntMethod(this$, mids$[mid_order_54c6a179]);
      }

      jint IIntArray::rows() const
      {
        return env->callIntMethod(this$, mids$[mid_rows_54c6a179]);
      }

      void IIntArray::set(jint a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_set_d8d154a6], a0, a1);
      }

      void IIntArray::set(jint a0, jint a1, jint a2) const
      {
        env->callVoidMethod(this$, mids$[mid_set_d3236aa4], a0, a1, a2);
      }

      jint IIntArray::size() const
      {
        return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
      }

      IIntArray IIntArray::viewColumn(jint a0) const
      {
        return IIntArray(env->callObjectMethod(this$, mids$[mid_viewColumn_62213cdb], a0));
      }

      IIntArray IIntArray::viewRow(jint a0) const
      {
        return IIntArray(env->callObjectMethod(this$, mids$[mid_viewRow_62213cdb], a0));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace ints {
      static PyObject *t_IIntArray_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntArray_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntArray_columns(t_IIntArray *self);
      static PyObject *t_IIntArray_copy(t_IIntArray *self);
      static PyObject *t_IIntArray_copyFrom(t_IIntArray *self, PyObject *arg);
      static PyObject *t_IIntArray_copyInto(t_IIntArray *self, PyObject *arg);
      static PyObject *t_IIntArray_create(t_IIntArray *self, PyObject *args);
      static PyObject *t_IIntArray_get(t_IIntArray *self, PyObject *args);
      static PyObject *t_IIntArray_getArray(t_IIntArray *self);
      static PyObject *t_IIntArray_getColumn(t_IIntArray *self, PyObject *arg);
      static PyObject *t_IIntArray_getRow(t_IIntArray *self, PyObject *arg);
      static PyObject *t_IIntArray_getTable(t_IIntArray *self);
      static PyObject *t_IIntArray_isSparse(t_IIntArray *self);
      static PyObject *t_IIntArray_iterator(t_IIntArray *self, PyObject *args);
      static PyObject *t_IIntArray_nonzeroIterator(t_IIntArray *self);
      static PyObject *t_IIntArray_order(t_IIntArray *self);
      static PyObject *t_IIntArray_rows(t_IIntArray *self);
      static PyObject *t_IIntArray_set(t_IIntArray *self, PyObject *args);
      static PyObject *t_IIntArray_size(t_IIntArray *self);
      static PyObject *t_IIntArray_viewColumn(t_IIntArray *self, PyObject *arg);
      static PyObject *t_IIntArray_viewRow(t_IIntArray *self, PyObject *arg);
      static PyObject *t_IIntArray_get__array(t_IIntArray *self, void *data);
      static PyObject *t_IIntArray_get__sparse(t_IIntArray *self, void *data);
      static PyObject *t_IIntArray_get__table(t_IIntArray *self, void *data);
      static PyGetSetDef t_IIntArray__fields_[] = {
        DECLARE_GET_FIELD(t_IIntArray, array),
        DECLARE_GET_FIELD(t_IIntArray, sparse),
        DECLARE_GET_FIELD(t_IIntArray, table),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IIntArray__methods_[] = {
        DECLARE_METHOD(t_IIntArray, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntArray, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntArray, columns, METH_NOARGS),
        DECLARE_METHOD(t_IIntArray, copy, METH_NOARGS),
        DECLARE_METHOD(t_IIntArray, copyFrom, METH_O),
        DECLARE_METHOD(t_IIntArray, copyInto, METH_O),
        DECLARE_METHOD(t_IIntArray, create, METH_VARARGS),
        DECLARE_METHOD(t_IIntArray, get, METH_VARARGS),
        DECLARE_METHOD(t_IIntArray, getArray, METH_NOARGS),
        DECLARE_METHOD(t_IIntArray, getColumn, METH_O),
        DECLARE_METHOD(t_IIntArray, getRow, METH_O),
        DECLARE_METHOD(t_IIntArray, getTable, METH_NOARGS),
        DECLARE_METHOD(t_IIntArray, isSparse, METH_NOARGS),
        DECLARE_METHOD(t_IIntArray, iterator, METH_VARARGS),
        DECLARE_METHOD(t_IIntArray, nonzeroIterator, METH_NOARGS),
        DECLARE_METHOD(t_IIntArray, order, METH_NOARGS),
        DECLARE_METHOD(t_IIntArray, rows, METH_NOARGS),
        DECLARE_METHOD(t_IIntArray, set, METH_VARARGS),
        DECLARE_METHOD(t_IIntArray, size, METH_NOARGS),
        DECLARE_METHOD(t_IIntArray, viewColumn, METH_O),
        DECLARE_METHOD(t_IIntArray, viewRow, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IIntArray, t_IIntArray, ::java::lang::Iterable, IIntArray, abstract_init, ((PyObject *(*)(t_IIntArray *)) get_iterator< t_IIntArray >), 0, t_IIntArray__fields_, 0, 0);

      void t_IIntArray::install(PyObject *module)
      {
        installType(&PY_TYPE(IIntArray), module, "IIntArray", 0);
      }

      void t_IIntArray::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IIntArray).tp_dict, "class_", make_descriptor(IIntArray::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IIntArray).tp_dict, "wrapfn_", make_descriptor(t_IIntArray::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IIntArray).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IIntArray_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IIntArray::initializeClass, 1)))
          return NULL;
        return t_IIntArray::wrap_Object(IIntArray(((t_IIntArray *) arg)->object.this$));
      }
      static PyObject *t_IIntArray_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IIntArray::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IIntArray_columns(t_IIntArray *self)
      {
        jint result;
        OBJ_CALL(result = self->object.columns());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntArray_copy(t_IIntArray *self)
      {
        IIntArray result((jobject) NULL);
        OBJ_CALL(result = self->object.copy());
        return t_IIntArray::wrap_Object(result);
      }

      static PyObject *t_IIntArray_copyFrom(t_IIntArray *self, PyObject *arg)
      {
        IIntArray a0((jobject) NULL);

        if (!parseArg(arg, "k", IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.copyFrom(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
        return NULL;
      }

      static PyObject *t_IIntArray_copyInto(t_IIntArray *self, PyObject *arg)
      {
        IIntArray a0((jobject) NULL);

        if (!parseArg(arg, "k", IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.copyInto(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "copyInto", arg);
        return NULL;
      }

      static PyObject *t_IIntArray_create(t_IIntArray *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            IIntArray result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return t_IIntArray::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            jint a1;
            IIntArray result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return t_IIntArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "create", args);
        return NULL;
      }

      static PyObject *t_IIntArray_get(t_IIntArray *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyInt_FromLong((long) result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.get(a0, a1));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "get", args);
        return NULL;
      }

      static PyObject *t_IIntArray_getArray(t_IIntArray *self)
      {
        JArray< jint > result((jobject) NULL);
        OBJ_CALL(result = self->object.getArray());
        return result.wrap();
      }

      static PyObject *t_IIntArray_getColumn(t_IIntArray *self, PyObject *arg)
      {
        jint a0;
        JArray< jint > result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.getColumn(a0));
          return result.wrap();
        }

        PyErr_SetArgsError((PyObject *) self, "getColumn", arg);
        return NULL;
      }

      static PyObject *t_IIntArray_getRow(t_IIntArray *self, PyObject *arg)
      {
        jint a0;
        JArray< jint > result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.getRow(a0));
          return result.wrap();
        }

        PyErr_SetArgsError((PyObject *) self, "getRow", arg);
        return NULL;
      }

      static PyObject *t_IIntArray_getTable(t_IIntArray *self)
      {
        JArray< JArray< jint > > result((jobject) NULL);
        OBJ_CALL(result = self->object.getTable());
        return JArray<jobject>(result.this$).wrap(NULL);
      }

      static PyObject *t_IIntArray_isSparse(t_IIntArray *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.isSparse());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_IIntArray_iterator(t_IIntArray *self, PyObject *args)
      {
        ::stallone::api::ints::IIntIterator result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.iterator());
          return ::stallone::api::ints::t_IIntIterator::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(IIntArray), (PyObject *) self, "iterator", args, 2);
      }

      static PyObject *t_IIntArray_nonzeroIterator(t_IIntArray *self)
      {
        ::stallone::api::ints::IIntIterator result((jobject) NULL);
        OBJ_CALL(result = self->object.nonzeroIterator());
        return ::stallone::api::ints::t_IIntIterator::wrap_Object(result);
      }

      static PyObject *t_IIntArray_order(t_IIntArray *self)
      {
        jint result;
        OBJ_CALL(result = self->object.order());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntArray_rows(t_IIntArray *self)
      {
        jint result;
        OBJ_CALL(result = self->object.rows());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntArray_set(t_IIntArray *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }
          }
          break;
         case 3:
          {
            jint a0;
            jint a1;
            jint a2;

            if (!parseArgs(args, "III", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.set(a0, a1, a2));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "set", args);
        return NULL;
      }

      static PyObject *t_IIntArray_size(t_IIntArray *self)
      {
        jint result;
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntArray_viewColumn(t_IIntArray *self, PyObject *arg)
      {
        jint a0;
        IIntArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.viewColumn(a0));
          return t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "viewColumn", arg);
        return NULL;
      }

      static PyObject *t_IIntArray_viewRow(t_IIntArray *self, PyObject *arg)
      {
        jint a0;
        IIntArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.viewRow(a0));
          return t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "viewRow", arg);
        return NULL;
      }

      static PyObject *t_IIntArray_get__array(t_IIntArray *self, void *data)
      {
        JArray< jint > value((jobject) NULL);
        OBJ_CALL(value = self->object.getArray());
        return value.wrap();
      }

      static PyObject *t_IIntArray_get__sparse(t_IIntArray *self, void *data)
      {
        jboolean value;
        OBJ_CALL(value = self->object.isSparse());
        Py_RETURN_BOOL(value);
      }

      static PyObject *t_IIntArray_get__table(t_IIntArray *self, void *data)
      {
        JArray< JArray< jint > > value((jobject) NULL);
        OBJ_CALL(value = self->object.getTable());
        return JArray<jobject>(value.this$).wrap(NULL);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/ints/IntUtilities.h"
#include "stallone/api/ints/IIntArray.h"
#include "stallone/api/ints/IIntList.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace ints {

      ::java::lang::Class *IntUtilities::class$ = NULL;
      jmethodID *IntUtilities::mids$ = NULL;
      bool IntUtilities::live$ = false;

      jclass IntUtilities::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/ints/IntUtilities");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_addToNew_00a49289] = env->getMethodID(cls, "addToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_addToNew_3c84c841] = env->getMethodID(cls, "addToNew", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_addWeightedToNew_6cbdeeb1] = env->getMethodID(cls, "addWeightedToNew", "(ILstallone/api/ints/IIntArray;ILstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_cleanToNew_fcbe62e3] = env->getMethodID(cls, "cleanToNew", "(Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_contains_216ff4fa] = env->getMethodID(cls, "contains", "(Lstallone/api/ints/IIntArray;I)Z");
          mids$[mid_containsAll_88ee8492] = env->getMethodID(cls, "containsAll", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Z");
          mids$[mid_containsAny_88ee8492] = env->getMethodID(cls, "containsAny", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Z");
          mids$[mid_copyInto_7f2ce4ac] = env->getMethodID(cls, "copyInto", "(Lstallone/api/ints/IIntArray;IILstallone/api/ints/IIntArray;I)V");
          mids$[mid_copyInto_6060468e] = env->getMethodID(cls, "copyInto", "(Lstallone/api/ints/IIntArray;IIIILstallone/api/ints/IIntArray;II)V");
          mids$[mid_copyRowsInto_f0691f5e] = env->getMethodID(cls, "copyRowsInto", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;II)V");
          mids$[mid_count_216ff4e9] = env->getMethodID(cls, "count", "(Lstallone/api/ints/IIntArray;I)I");
          mids$[mid_countRows_88ee8481] = env->getMethodID(cls, "countRows", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)I");
          mids$[mid_distance_88ee848c] = env->getMethodID(cls, "distance", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)D");
          mids$[mid_divideElementsToNew_00a49289] = env->getMethodID(cls, "divideElementsToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_equal_88ee8492] = env->getMethodID(cls, "equal", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Z");
          mids$[mid_exchange_0f2cb3ac] = env->getMethodID(cls, "exchange", "(Lstallone/api/ints/IIntArray;II)V");
          mids$[mid_fill_216ff4f6] = env->getMethodID(cls, "fill", "(Lstallone/api/ints/IIntArray;I)V");
          mids$[mid_findAll_3ee017bd] = env->getMethodID(cls, "findAll", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntList;");
          mids$[mid_findAll_71898735] = env->getMethodID(cls, "findAll", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntList;");
          mids$[mid_findAllRows_00a49289] = env->getMethodID(cls, "findAllRows", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_findBackwards_216ff4e9] = env->getMethodID(cls, "findBackwards", "(Lstallone/api/ints/IIntArray;I)I");
          mids$[mid_findBackwards_88ee8481] = env->getMethodID(cls, "findBackwards", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)I");
          mids$[mid_findBackwards_0f2cb3b3] = env->getMethodID(cls, "findBackwards", "(Lstallone/api/ints/IIntArray;II)I");
          mids$[mid_findBackwards_4126fa83] = env->getMethodID(cls, "findBackwards", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;I)I");
          mids$[mid_findForward_216ff4e9] = env->getMethodID(cls, "findForward", "(Lstallone/api/ints/IIntArray;I)I");
          mids$[mid_findForward_0f2cb3b3] = env->getMethodID(cls, "findForward", "(Lstallone/api/ints/IIntArray;II)I");
          mids$[mid_findRowForward_88ee8481] = env->getMethodID(cls, "findRowForward", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)I");
          mids$[mid_findRowForward_4126fa83] = env->getMethodID(cls, "findRowForward", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;I)I");
          mids$[mid_findSorted_216ff4e9] = env->getMethodID(cls, "findSorted", "(Lstallone/api/ints/IIntArray;I)I");
          mids$[mid_increment_216ff4f6] = env->getMethodID(cls, "increment", "(Lstallone/api/ints/IIntArray;I)V");
          mids$[mid_increment_88ee849e] = env->getMethodID(cls, "increment", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)V");
          mids$[mid_insertRowToNew_69e38273] = env->getMethodID(cls, "insertRowToNew", "(Lstallone/api/ints/IIntArray;ILstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_insertSorted_814f05aa] = env->getMethodID(cls, "insertSorted", "(Lstallone/api/ints/IIntList;I)V");
          mids$[mid_insertSortedFixed_216ff4e9] = env->getMethodID(cls, "insertSortedFixed", "(Lstallone/api/ints/IIntArray;I)I");
          mids$[mid_insertToNew_236de56b] = env->getMethodID(cls, "insertToNew", "(Lstallone/api/ints/IIntArray;II)Lstallone/api/ints/IIntArray;");
          mids$[mid_intersectionToNew_71898735] = env->getMethodID(cls, "intersectionToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntList;");
          mids$[mid_largeValueIndexes_3c84c841] = env->getMethodID(cls, "largeValueIndexes", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_largeValues_3c84c841] = env->getMethodID(cls, "largeValues", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_largest_3c84c841] = env->getMethodID(cls, "largest", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_largestIndexes_3c84c841] = env->getMethodID(cls, "largestIndexes", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_locateSorted_216ff4e9] = env->getMethodID(cls, "locateSorted", "(Lstallone/api/ints/IIntArray;I)I");
          mids$[mid_max_059aa48b] = env->getMethodID(cls, "max", "(Lstallone/api/ints/IIntArray;)I");
          mids$[mid_maxInColumn_216ff4e4] = env->getMethodID(cls, "maxInColumn", "(Lstallone/api/ints/IIntArray;I)D");
          mids$[mid_maxInLine_216ff4e4] = env->getMethodID(cls, "maxInLine", "(Lstallone/api/ints/IIntArray;I)D");
          mids$[mid_maxIndex_059aa48b] = env->getMethodID(cls, "maxIndex", "(Lstallone/api/ints/IIntArray;)I");
          mids$[mid_mergeRowsToNew_00a49289] = env->getMethodID(cls, "mergeRowsToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_mergeToNew_3c84c841] = env->getMethodID(cls, "mergeToNew", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_mergeToNew_00a49289] = env->getMethodID(cls, "mergeToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_min_059aa48b] = env->getMethodID(cls, "min", "(Lstallone/api/ints/IIntArray;)I");
          mids$[mid_minIndex_059aa48b] = env->getMethodID(cls, "minIndex", "(Lstallone/api/ints/IIntArray;)I");
          mids$[mid_mirror_059aa494] = env->getMethodID(cls, "mirror", "(Lstallone/api/ints/IIntArray;)V");
          mids$[mid_multiplyElementsToNew_00a49289] = env->getMethodID(cls, "multiplyElementsToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_negate_059aa494] = env->getMethodID(cls, "negate", "(Lstallone/api/ints/IIntArray;)V");
          mids$[mid_print_059aa494] = env->getMethodID(cls, "print", "(Lstallone/api/ints/IIntArray;)V");
          mids$[mid_print_ce6111f0] = env->getMethodID(cls, "print", "(Lstallone/api/ints/IIntArray;Ljava/lang/String;Ljava/lang/String;)V");
          mids$[mid_print_323608c8] = env->getMethodID(cls, "print", "(Lstallone/api/ints/IIntArray;Ljava/lang/String;Ljava/lang/String;II)V");
          mids$[mid_removeIndex_00a49289] = env->getMethodID(cls, "removeIndex", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_removeIndexToNew_00a49289] = env->getMethodID(cls, "removeIndexToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_removeIndexToNew_3c84c841] = env->getMethodID(cls, "removeIndexToNew", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_removeRow_3c84c841] = env->getMethodID(cls, "removeRow", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_removeValueToNew_3c84c841] = env->getMethodID(cls, "removeValueToNew", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_removeValueToNew_00a49289] = env->getMethodID(cls, "removeValueToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_scale_537625be] = env->getMethodID(cls, "scale", "(ILstallone/api/ints/IIntArray;)V");
          mids$[mid_smallValueIndexes_3c84c841] = env->getMethodID(cls, "smallValueIndexes", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_smallValues_3c84c841] = env->getMethodID(cls, "smallValues", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_smallest_3c84c841] = env->getMethodID(cls, "smallest", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_smallestIndexes_3c84c841] = env->getMethodID(cls, "smallestIndexes", "(Lstallone/api/ints/IIntArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_sort_059aa494] = env->getMethodID(cls, "sort", "(Lstallone/api/ints/IIntArray;)V");
          mids$[mid_sortedIndexes_fcbe62e3] = env->getMethodID(cls, "sortedIndexes", "(Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_square_059aa494] = env->getMethodID(cls, "square", "(Lstallone/api/ints/IIntArray;)V");
          mids$[mid_subColsToNew_00a49289] = env->getMethodID(cls, "subColsToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_subRowsToNew_00a49289] = env->getMethodID(cls, "subRowsToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_subToNew_00a49289] = env->getMethodID(cls, "subToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_subToNew_236de56b] = env->getMethodID(cls, "subToNew", "(Lstallone/api/ints/IIntArray;II)Lstallone/api/ints/IIntArray;");
          mids$[mid_subToNew_fdab4d13] = env->getMethodID(cls, "subToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_sum_059aa486] = env->getMethodID(cls, "sum", "(Lstallone/api/ints/IIntArray;)D");
          mids$[mid_sumCol_216ff4e9] = env->getMethodID(cls, "sumCol", "(Lstallone/api/ints/IIntArray;I)I");
          mids$[mid_sumRow_216ff4e9] = env->getMethodID(cls, "sumRow", "(Lstallone/api/ints/IIntArray;I)I");
          mids$[mid_toString_a9a4a8f3] = env->getMethodID(cls, "toString", "(Lstallone/api/ints/IIntArray;)Ljava/lang/String;");
          mids$[mid_toString_0003ef97] = env->getMethodID(cls, "toString", "(Lstallone/api/ints/IIntArray;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
          mids$[mid_toString_44702867] = env->getMethodID(cls, "toString", "(Lstallone/api/ints/IIntArray;Ljava/lang/String;Ljava/lang/String;II)Ljava/lang/String;");
          mids$[mid_transpose_059aa494] = env->getMethodID(cls, "transpose", "(Lstallone/api/ints/IIntArray;)V");
          mids$[mid_unionToNew_00a49289] = env->getMethodID(cls, "unionToNew", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_within_236de56b] = env->getMethodID(cls, "within", "(Lstallone/api/ints/IIntArray;II)Lstallone/api/ints/IIntArray;");
          mids$[mid_withinIndexes_236de56b] = env->getMethodID(cls, "withinIndexes", "(Lstallone/api/ints/IIntArray;II)Lstallone/api/ints/IIntArray;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      IntUtilities::IntUtilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::stallone::api::ints::IIntArray IntUtilities::addToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_addToNew_00a49289], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::addToNew(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_addToNew_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::addWeightedToNew(jint a0, const ::stallone::api::ints::IIntArray & a1, jint a2, const ::stallone::api::ints::IIntArray & a3) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_addWeightedToNew_6cbdeeb1], a0, a1.this$, a2, a3.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::cleanToNew(const ::stallone::api::ints::IIntArray & a0) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_cleanToNew_fcbe62e3], a0.this$));
      }

      jboolean IntUtilities::contains(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_contains_216ff4fa], a0.this$, a1);
      }

      jboolean IntUtilities::containsAll(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_containsAll_88ee8492], a0.this$, a1.this$);
      }

      jboolean IntUtilities::containsAny(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_containsAny_88ee8492], a0.this$, a1.this$);
      }

      void IntUtilities::copyInto(const ::stallone::api::ints::IIntArray & a0, jint a1, jint a2, const ::stallone::api::ints::IIntArray & a3, jint a4) const
      {
        env->callVoidMethod(this$, mids$[mid_copyInto_7f2ce4ac], a0.this$, a1, a2, a3.this$, a4);
      }

      void IntUtilities::copyInto(const ::stallone::api::ints::IIntArray & a0, jint a1, jint a2, jint a3, jint a4, const ::stallone::api::ints::IIntArray & a5, jint a6, jint a7) const
      {
        env->callVoidMethod(this$, mids$[mid_copyInto_6060468e], a0.this$, a1, a2, a3, a4, a5.this$, a6, a7);
      }

      void IntUtilities::copyRowsInto(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1, jint a2, jint a3) const
      {
        env->callVoidMethod(this$, mids$[mid_copyRowsInto_f0691f5e], a0.this$, a1.this$, a2, a3);
      }

      jint IntUtilities::count(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callIntMethod(this$, mids$[mid_count_216ff4e9], a0.this$, a1);
      }

      jint IntUtilities::countRows(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return env->callIntMethod(this$, mids$[mid_countRows_88ee8481], a0.this$, a1.this$);
      }

      jdouble IntUtilities::distance(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_distance_88ee848c], a0.this$, a1.this$);
      }

      ::stallone::api::ints::IIntArray IntUtilities::divideElementsToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_divideElementsToNew_00a49289], a0.this$, a1.this$));
      }

      jboolean IntUtilities::equal(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_equal_88ee8492], a0.this$, a1.this$);
      }

      void IntUtilities::exchange(const ::stallone::api::ints::IIntArray & a0, jint a1, jint a2) const
      {
        env->callVoidMethod(this$, mids$[mid_exchange_0f2cb3ac], a0.this$, a1, a2);
      }

      void IntUtilities::fill(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_fill_216ff4f6], a0.this$, a1);
      }

      ::stallone::api::ints::IIntList IntUtilities::findAll(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntList(env->callObjectMethod(this$, mids$[mid_findAll_3ee017bd], a0.this$, a1));
      }

      ::stallone::api::ints::IIntList IntUtilities::findAll(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntList(env->callObjectMethod(this$, mids$[mid_findAll_71898735], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::findAllRows(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_findAllRows_00a49289], a0.this$, a1.this$));
      }

      jint IntUtilities::findBackwards(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findBackwards_216ff4e9], a0.this$, a1);
      }

      jint IntUtilities::findBackwards(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findBackwards_88ee8481], a0.this$, a1.this$);
      }

      jint IntUtilities::findBackwards(const ::stallone::api::ints::IIntArray & a0, jint a1, jint a2) const
      {
        return env->callIntMethod(this$, mids$[mid_findBackwards_0f2cb3b3], a0.this$, a1, a2);
      }

      jint IntUtilities::findBackwards(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1, jint a2) const
      {
        return env->callIntMethod(this$, mids$[mid_findBackwards_4126fa83], a0.this$, a1.this$, a2);
      }

      jint IntUtilities::findForward(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findForward_216ff4e9], a0.this$, a1);
      }

      jint IntUtilities::findForward(const ::stallone::api::ints::IIntArray & a0, jint a1, jint a2) const
      {
        return env->callIntMethod(this$, mids$[mid_findForward_0f2cb3b3], a0.this$, a1, a2);
      }

      jint IntUtilities::findRowForward(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findRowForward_88ee8481], a0.this$, a1.this$);
      }

      jint IntUtilities::findRowForward(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1, jint a2) const
      {
        return env->callIntMethod(this$, mids$[mid_findRowForward_4126fa83], a0.this$, a1.this$, a2);
      }

      jint IntUtilities::findSorted(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findSorted_216ff4e9], a0.this$, a1);
      }

      void IntUtilities::increment(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_increment_216ff4f6], a0.this$, a1);
      }

      void IntUtilities::increment(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_increment_88ee849e], a0.this$, a1.this$);
      }

      ::stallone::api::ints::IIntArray IntUtilities::insertRowToNew(const ::stallone::api::ints::IIntArray & a0, jint a1, const ::stallone::api::ints::IIntArray & a2) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_insertRowToNew_69e38273], a0.this$, a1, a2.this$));
      }

      void IntUtilities::insertSorted(const ::stallone::api::ints::IIntList & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_insertSorted_814f05aa], a0.this$, a1);
      }

      jint IntUtilities::insertSortedFixed(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callIntMethod(this$, mids$[mid_insertSortedFixed_216ff4e9], a0.this$, a1);
      }

      ::stallone::api::ints::IIntArray IntUtilities::insertToNew(const ::stallone::api::ints::IIntArray & a0, jint a1, jint a2) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_insertToNew_236de56b], a0.this$, a1, a2));
      }

      ::stallone::api::ints::IIntList IntUtilities::intersectionToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntList(env->callObjectMethod(this$, mids$[mid_intersectionToNew_71898735], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::largeValueIndexes(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_largeValueIndexes_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::largeValues(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_largeValues_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::largest(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_largest_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::largestIndexes(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_largestIndexes_3c84c841], a0.this$, a1));
      }

      jint IntUtilities::locateSorted(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callIntMethod(this$, mids$[mid_locateSorted_216ff4e9], a0.this$, a1);
      }

      jint IntUtilities::max$(const ::stallone::api::ints::IIntArray & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_max_059aa48b], a0.this$);
      }

      jdouble IntUtilities::maxInColumn(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_maxInColumn_216ff4e4], a0.this$, a1);
      }

      jdouble IntUtilities::maxInLine(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_maxInLine_216ff4e4], a0.this$, a1);
      }

      jint IntUtilities::maxIndex(const ::stallone::api::ints::IIntArray & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_maxIndex_059aa48b], a0.this$);
      }

      ::stallone::api::ints::IIntArray IntUtilities::mergeRowsToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_mergeRowsToNew_00a49289], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::mergeToNew(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_mergeToNew_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::mergeToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_mergeToNew_00a49289], a0.this$, a1.this$));
      }

      jint IntUtilities::min$(const ::stallone::api::ints::IIntArray & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_min_059aa48b], a0.this$);
      }

      jint IntUtilities::minIndex(const ::stallone::api::ints::IIntArray & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_minIndex_059aa48b], a0.this$);
      }

      void IntUtilities::mirror(const ::stallone::api::ints::IIntArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_mirror_059aa494], a0.this$);
      }

      ::stallone::api::ints::IIntArray IntUtilities::multiplyElementsToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_multiplyElementsToNew_00a49289], a0.this$, a1.this$));
      }

      void IntUtilities::negate(const ::stallone::api::ints::IIntArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_negate_059aa494], a0.this$);
      }

      void IntUtilities::print(const ::stallone::api::ints::IIntArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_print_059aa494], a0.this$);
      }

      void IntUtilities::print(const ::stallone::api::ints::IIntArray & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
      {
        env->callVoidMethod(this$, mids$[mid_print_ce6111f0], a0.this$, a1.this$, a2.this$);
      }

      void IntUtilities::print(const ::stallone::api::ints::IIntArray & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3, jint a4) const
      {
        env->callVoidMethod(this$, mids$[mid_print_323608c8], a0.this$, a1.this$, a2.this$, a3, a4);
      }

      ::stallone::api::ints::IIntArray IntUtilities::removeIndex(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_removeIndex_00a49289], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::removeIndexToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_removeIndexToNew_00a49289], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::removeIndexToNew(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_removeIndexToNew_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::removeRow(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_removeRow_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::removeValueToNew(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_removeValueToNew_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::removeValueToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_removeValueToNew_00a49289], a0.this$, a1.this$));
      }

      void IntUtilities::scale(jint a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_scale_537625be], a0, a1.this$);
      }

      ::stallone::api::ints::IIntArray IntUtilities::smallValueIndexes(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_smallValueIndexes_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::smallValues(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_smallValues_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::smallest(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_smallest_3c84c841], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray IntUtilities::smallestIndexes(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_smallestIndexes_3c84c841], a0.this$, a1));
      }

      void IntUtilities::sort(const ::stallone::api::ints::IIntArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_sort_059aa494], a0.this$);
      }

      ::stallone::api::ints::IIntArray IntUtilities::sortedIndexes(const ::stallone::api::ints::IIntArray & a0) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_sortedIndexes_fcbe62e3], a0.this$));
      }

      void IntUtilities::square(const ::stallone::api::ints::IIntArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_square_059aa494], a0.this$);
      }

      ::stallone::api::ints::IIntArray IntUtilities::subColsToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_subColsToNew_00a49289], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::subRowsToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_subRowsToNew_00a49289], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::subToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_subToNew_00a49289], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::subToNew(const ::stallone::api::ints::IIntArray & a0, jint a1, jint a2) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_subToNew_236de56b], a0.this$, a1, a2));
      }

      ::stallone::api::ints::IIntArray IntUtilities::subToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1, const ::stallone::api::ints::IIntArray & a2) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_subToNew_fdab4d13], a0.this$, a1.this$, a2.this$));
      }

      jdouble IntUtilities::sum(const ::stallone::api::ints::IIntArray & a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_sum_059aa486], a0.this$);
      }

      jint IntUtilities::sumCol(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callIntMethod(this$, mids$[mid_sumCol_216ff4e9], a0.this$, a1);
      }

      jint IntUtilities::sumRow(const ::stallone::api::ints::IIntArray & a0, jint a1) const
      {
        return env->callIntMethod(this$, mids$[mid_sumRow_216ff4e9], a0.this$, a1);
      }

      ::java::lang::String IntUtilities::toString(const ::stallone::api::ints::IIntArray & a0) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_a9a4a8f3], a0.this$));
      }

      ::java::lang::String IntUtilities::toString(const ::stallone::api::ints::IIntArray & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_0003ef97], a0.this$, a1.this$, a2.this$));
      }

      ::java::lang::String IntUtilities::toString(const ::stallone::api::ints::IIntArray & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3, jint a4) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_44702867], a0.this$, a1.this$, a2.this$, a3, a4));
      }

      void IntUtilities::transpose(const ::stallone::api::ints::IIntArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_transpose_059aa494], a0.this$);
      }

      ::stallone::api::ints::IIntArray IntUtilities::unionToNew(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_unionToNew_00a49289], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray IntUtilities::within(const ::stallone::api::ints::IIntArray & a0, jint a1, jint a2) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_within_236de56b], a0.this$, a1, a2));
      }

      ::stallone::api::ints::IIntArray IntUtilities::withinIndexes(const ::stallone::api::ints::IIntArray & a0, jint a1, jint a2) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_withinIndexes_236de56b], a0.this$, a1, a2));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace ints {
      static PyObject *t_IntUtilities_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IntUtilities_instance_(PyTypeObject *type, PyObject *arg);
      static int t_IntUtilities_init_(t_IntUtilities *self, PyObject *args, PyObject *kwds);
      static PyObject *t_IntUtilities_addToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_addWeightedToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_cleanToNew(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_contains(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_containsAll(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_containsAny(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_copyInto(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_copyRowsInto(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_count(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_countRows(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_distance(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_divideElementsToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_equal(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_exchange(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_fill(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_findAll(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_findAllRows(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_findBackwards(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_findForward(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_findRowForward(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_findSorted(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_increment(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_insertRowToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_insertSorted(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_insertSortedFixed(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_insertToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_intersectionToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_largeValueIndexes(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_largeValues(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_largest(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_largestIndexes(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_locateSorted(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_max(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_maxInColumn(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_maxInLine(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_maxIndex(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_mergeRowsToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_mergeToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_min(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_minIndex(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_mirror(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_multiplyElementsToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_negate(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_print(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_removeIndex(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_removeIndexToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_removeRow(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_removeValueToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_scale(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_smallValueIndexes(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_smallValues(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_smallest(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_smallestIndexes(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_sort(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_sortedIndexes(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_square(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_subColsToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_subRowsToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_subToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_sum(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_sumCol(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_sumRow(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_toString(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_transpose(t_IntUtilities *self, PyObject *arg);
      static PyObject *t_IntUtilities_unionToNew(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_within(t_IntUtilities *self, PyObject *args);
      static PyObject *t_IntUtilities_withinIndexes(t_IntUtilities *self, PyObject *args);

      static PyMethodDef t_IntUtilities__methods_[] = {
        DECLARE_METHOD(t_IntUtilities, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IntUtilities, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IntUtilities, addToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, addWeightedToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, cleanToNew, METH_O),
        DECLARE_METHOD(t_IntUtilities, contains, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, containsAll, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, containsAny, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, copyInto, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, copyRowsInto, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, count, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, countRows, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, distance, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, divideElementsToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, equal, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, exchange, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, fill, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, findAll, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, findAllRows, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, findBackwards, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, findForward, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, findRowForward, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, findSorted, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, increment, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, insertRowToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, insertSorted, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, insertSortedFixed, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, insertToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, intersectionToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, largeValueIndexes, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, largeValues, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, largest, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, largestIndexes, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, locateSorted, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, max, METH_O),
        DECLARE_METHOD(t_IntUtilities, maxInColumn, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, maxInLine, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, maxIndex, METH_O),
        DECLARE_METHOD(t_IntUtilities, mergeRowsToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, mergeToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, min, METH_O),
        DECLARE_METHOD(t_IntUtilities, minIndex, METH_O),
        DECLARE_METHOD(t_IntUtilities, mirror, METH_O),
        DECLARE_METHOD(t_IntUtilities, multiplyElementsToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, negate, METH_O),
        DECLARE_METHOD(t_IntUtilities, print, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, removeIndex, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, removeIndexToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, removeRow, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, removeValueToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, scale, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, smallValueIndexes, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, smallValues, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, smallest, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, smallestIndexes, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, sort, METH_O),
        DECLARE_METHOD(t_IntUtilities, sortedIndexes, METH_O),
        DECLARE_METHOD(t_IntUtilities, square, METH_O),
        DECLARE_METHOD(t_IntUtilities, subColsToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, subRowsToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, subToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, sum, METH_O),
        DECLARE_METHOD(t_IntUtilities, sumCol, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, sumRow, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, toString, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, transpose, METH_O),
        DECLARE_METHOD(t_IntUtilities, unionToNew, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, within, METH_VARARGS),
        DECLARE_METHOD(t_IntUtilities, withinIndexes, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IntUtilities, t_IntUtilities, ::java::lang::Object, IntUtilities, t_IntUtilities_init_, 0, 0, 0, 0, 0);

      void t_IntUtilities::install(PyObject *module)
      {
        installType(&PY_TYPE(IntUtilities), module, "IntUtilities", 0);
      }

      void t_IntUtilities::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IntUtilities).tp_dict, "class_", make_descriptor(IntUtilities::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IntUtilities).tp_dict, "wrapfn_", make_descriptor(t_IntUtilities::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IntUtilities).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IntUtilities_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IntUtilities::initializeClass, 1)))
          return NULL;
        return t_IntUtilities::wrap_Object(IntUtilities(((t_IntUtilities *) arg)->object.this$));
      }
      static PyObject *t_IntUtilities_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IntUtilities::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_IntUtilities_init_(t_IntUtilities *self, PyObject *args, PyObject *kwds)
      {
        IntUtilities object((jobject) NULL);

        INT_CALL(object = IntUtilities());
        self->object = object;

        return 0;
      }

      static PyObject *t_IntUtilities_addToNew(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.addToNew(a0, a1));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.addToNew(a0, a1));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "addToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_addWeightedToNew(t_IntUtilities *self, PyObject *args)
      {
        jint a0;
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        jint a2;
        ::stallone::api::ints::IIntArray a3((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "IkIk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2, &a3))
        {
          OBJ_CALL(result = self->object.addWeightedToNew(a0, a1, a2, a3));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "addWeightedToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_cleanToNew(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.cleanToNew(a0));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "cleanToNew", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_contains(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jboolean result;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.contains(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "contains", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_containsAll(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.containsAll(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "containsAll", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_containsAny(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.containsAny(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "containsAny", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_copyInto(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 5:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            jint a2;
            ::stallone::api::ints::IIntArray a3((jobject) NULL);
            jint a4;

            if (!parseArgs(args, "kIIkI", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.copyInto(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }
          }
          break;
         case 8:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint a4;
            ::stallone::api::ints::IIntArray a5((jobject) NULL);
            jint a6;
            jint a7;

            if (!parseArgs(args, "kIIIIkII", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
            {
              OBJ_CALL(self->object.copyInto(a0, a1, a2, a3, a4, a5, a6, a7));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "copyInto", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_copyRowsInto(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        jint a2;
        jint a3;

        if (!parseArgs(args, "kkII", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2, &a3))
        {
          OBJ_CALL(self->object.copyRowsInto(a0, a1, a2, a3));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "copyRowsInto", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_count(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jint result;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.count(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "count", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_countRows(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        jint result;

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.countRows(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "countRows", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_distance(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        jdouble result;

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.distance(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "distance", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_divideElementsToNew(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.divideElementsToNew(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "divideElementsToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_equal(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.equal(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "equal", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_exchange(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jint a2;

        if (!parseArgs(args, "kII", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(self->object.exchange(a0, a1, a2));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "exchange", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_fill(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(self->object.fill(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "fill", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_findAll(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            ::stallone::api::ints::IIntList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findAll(a0, a1));
              return ::stallone::api::ints::t_IIntList::wrap_Object(result);
            }
          }
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            ::stallone::api::ints::IIntList result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findAll(a0, a1));
              return ::stallone::api::ints::t_IIntList::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "findAll", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_findAllRows(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.findAllRows(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "findAllRows", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_findBackwards(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findBackwards(a0, a1));
              return PyInt_FromLong((long) result);
            }
          }
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findBackwards(a0, a1));
              return PyInt_FromLong((long) result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "kII", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.findBackwards(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }
          }
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            jint a2;
            jint result;

            if (!parseArgs(args, "kkI", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.findBackwards(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "findBackwards", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_findForward(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findForward(a0, a1));
              return PyInt_FromLong((long) result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "kII", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.findForward(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "findForward", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_findRowForward(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findRowForward(a0, a1));
              return PyInt_FromLong((long) result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            jint a2;
            jint result;

            if (!parseArgs(args, "kkI", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.findRowForward(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "findRowForward", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_findSorted(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jint result;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.findSorted(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "findSorted", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_increment(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.increment(a0, a1));
              Py_RETURN_NONE;
            }
          }
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.increment(a0, a1));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "increment", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_insertRowToNew(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray a2((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kIk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.insertRowToNew(a0, a1, a2));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "insertRowToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_insertSorted(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntList a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntList::initializeClass, &a0, &a1))
        {
          OBJ_CALL(self->object.insertSorted(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "insertSorted", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_insertSortedFixed(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jint result;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.insertSortedFixed(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "insertSortedFixed", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_insertToNew(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jint a2;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kII", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.insertToNew(a0, a1, a2));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "insertToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_intersectionToNew(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::ints::IIntList result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.intersectionToNew(a0, a1));
          return ::stallone::api::ints::t_IIntList::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "intersectionToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_largeValueIndexes(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.largeValueIndexes(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "largeValueIndexes", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_largeValues(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.largeValues(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "largeValues", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_largest(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.largest(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "largest", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_largestIndexes(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.largestIndexes(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "largestIndexes", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_locateSorted(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jint result;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.locateSorted(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "locateSorted", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_max(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.max$(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "max", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_maxInColumn(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jdouble result;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.maxInColumn(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "maxInColumn", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_maxInLine(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jdouble result;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.maxInLine(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "maxInLine", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_maxIndex(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.maxIndex(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "maxIndex", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_mergeRowsToNew(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.mergeRowsToNew(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "mergeRowsToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_mergeToNew(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.mergeToNew(a0, a1));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.mergeToNew(a0, a1));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "mergeToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_min(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.min$(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "min", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_minIndex(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.minIndex(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "minIndex", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_mirror(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.mirror(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "mirror", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_multiplyElementsToNew(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.multiplyElementsToNew(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "multiplyElementsToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_negate(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.negate(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "negate", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_print(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
            {
              OBJ_CALL(self->object.print(a0));
              Py_RETURN_NONE;
            }
          }
          break;
         case 3:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);

            if (!parseArgs(args, "kss", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.print(a0, a1, a2));
              Py_RETURN_NONE;
            }
          }
          break;
         case 5:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jint a3;
            jint a4;

            if (!parseArgs(args, "kssII", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.print(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "print", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_removeIndex(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.removeIndex(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "removeIndex", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_removeIndexToNew(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.removeIndexToNew(a0, a1));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.removeIndexToNew(a0, a1));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "removeIndexToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_removeRow(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.removeRow(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "removeRow", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_removeValueToNew(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.removeValueToNew(a0, a1));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.removeValueToNew(a0, a1));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "removeValueToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_scale(t_IntUtilities *self, PyObject *args)
      {
        jint a0;
        ::stallone::api::ints::IIntArray a1((jobject) NULL);

        if (!parseArgs(args, "Ik", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(self->object.scale(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "scale", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_smallValueIndexes(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.smallValueIndexes(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "smallValueIndexes", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_smallValues(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.smallValues(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "smallValues", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_smallest(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.smallest(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "smallest", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_smallestIndexes(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.smallestIndexes(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "smallestIndexes", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_sort(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.sort(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "sort", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_sortedIndexes(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.sortedIndexes(a0));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "sortedIndexes", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_square(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.square(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "square", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_subColsToNew(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.subColsToNew(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "subColsToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_subRowsToNew(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.subRowsToNew(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "subRowsToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_subToNew(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subToNew(a0, a1));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint a1;
            jint a2;
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kII", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.subToNew(a0, a1, a2));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            ::stallone::api::ints::IIntArray a2((jobject) NULL);
            ::stallone::api::ints::IIntArray result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.subToNew(a0, a1, a2));
              return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "subToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_sum(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jdouble result;

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.sum(a0));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "sum", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_sumCol(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jint result;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.sumCol(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "sumCol", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_sumRow(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jint result;

        if (!parseArgs(args, "kI", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.sumRow(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "sumRow", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_toString(t_IntUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "kss", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.toString(a0, a1, a2));
              return j2p(result);
            }
          }
          break;
         case 5:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jint a3;
            jint a4;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "kssII", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.toString(a0, a1, a2, a3, a4));
              return j2p(result);
            }
          }
        }

        return callSuper(&PY_TYPE(IntUtilities), (PyObject *) self, "toString", args, 2);
      }

      static PyObject *t_IntUtilities_transpose(t_IntUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.transpose(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "transpose", arg);
        return NULL;
      }

      static PyObject *t_IntUtilities_unionToNew(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.unionToNew(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "unionToNew", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_within(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jint a2;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kII", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.within(a0, a1, a2));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "within", args);
        return NULL;
      }

      static PyObject *t_IntUtilities_withinIndexes(t_IntUtilities *self, PyObject *args)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jint a1;
        jint a2;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kII", ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.withinIndexes(a0, a1, a2));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "withinIndexes", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/PrintWriter.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *PrintWriter::class$ = NULL;
    jmethodID *PrintWriter::mids$ = NULL;
    bool PrintWriter::live$ = false;

    jclass PrintWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/PrintWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_5bcd5850] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;)V");
        mids$[mid_init$_53203e9d] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;Z)V");
        mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
        mids$[mid_append_6cdbddb5] = env->getMethodID(cls, "append", "(C)Ljava/io/PrintWriter;");
        mids$[mid_append_4ea4b69d] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;");
        mids$[mid_append_19a20159] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintWriter;");
        mids$[mid_checkError_54c6a16a] = env->getMethodID(cls, "checkError", "()Z");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_format_d515d1d7] = env->getMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_print_5d1c7645] = env->getMethodID(cls, "print", "(D)V");
        mids$[mid_print_87fd545a] = env->getMethodID(cls, "print", "(C)V");
        mids$[mid_print_700e23d6] = env->getMethodID(cls, "print", "([C)V");
        mids$[mid_print_bb0c767f] = env->getMethodID(cls, "print", "(Z)V");
        mids$[mid_print_39c7bd3c] = env->getMethodID(cls, "print", "(I)V");
        mids$[mid_print_5fdc3f48] = env->getMethodID(cls, "print", "(Ljava/lang/String;)V");
        mids$[mid_print_290588ee] = env->getMethodID(cls, "print", "(Ljava/lang/Object;)V");
        mids$[mid_print_06298cab] = env->getMethodID(cls, "print", "(F)V");
        mids$[mid_print_0ee6df2f] = env->getMethodID(cls, "print", "(J)V");
        mids$[mid_printf_d515d1d7] = env->getMethodID(cls, "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_println_54c6a166] = env->getMethodID(cls, "println", "()V");
        mids$[mid_println_39c7bd3c] = env->getMethodID(cls, "println", "(I)V");
        mids$[mid_println_5fdc3f48] = env->getMethodID(cls, "println", "(Ljava/lang/String;)V");
        mids$[mid_println_0ee6df2f] = env->getMethodID(cls, "println", "(J)V");
        mids$[mid_println_bb0c767f] = env->getMethodID(cls, "println", "(Z)V");
        mids$[mid_println_06298cab] = env->getMethodID(cls, "println", "(F)V");
        mids$[mid_println_5d1c7645] = env->getMethodID(cls, "println", "(D)V");
        mids$[mid_println_700e23d6] = env->getMethodID(cls, "println", "([C)V");
        mids$[mid_println_290588ee] = env->getMethodID(cls, "println", "(Ljava/lang/Object;)V");
        mids$[mid_println_87fd545a] = env->getMethodID(cls, "println", "(C)V");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
        mids$[mid_setError_54c6a166] = env->getMethodID(cls, "setError", "()V");
        mids$[mid_clearError_54c6a166] = env->getMethodID(cls, "clearError", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    PrintWriter::PrintWriter(const ::java::lang::String & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5bcd5850, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_53203e9d, a0.this$, a1)) {}

    PrintWriter::PrintWriter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

    PrintWriter PrintWriter::append(jchar a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_6cdbddb5], a0));
    }

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_4ea4b69d], a0.this$));
    }

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_19a20159], a0.this$, a1, a2));
    }

    jboolean PrintWriter::checkError() const
    {
      return env->callBooleanMethod(this$, mids$[mid_checkError_54c6a16a]);
    }

    void PrintWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void PrintWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    PrintWriter PrintWriter::format(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_d515d1d7], a0.this$, a1.this$));
    }

    void PrintWriter::print(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_5d1c7645], a0);
    }

    void PrintWriter::print(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_87fd545a], a0);
    }

    void PrintWriter::print(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_700e23d6], a0.this$);
    }

    void PrintWriter::print(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_bb0c767f], a0);
    }

    void PrintWriter::print(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_39c7bd3c], a0);
    }

    void PrintWriter::print(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_5fdc3f48], a0.this$);
    }

    void PrintWriter::print(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_290588ee], a0.this$);
    }

    void PrintWriter::print(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_06298cab], a0);
    }

    void PrintWriter::print(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_0ee6df2f], a0);
    }

    PrintWriter PrintWriter::printf(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_d515d1d7], a0.this$, a1.this$));
    }

    void PrintWriter::println() const
    {
      env->callVoidMethod(this$, mids$[mid_println_54c6a166]);
    }

    void PrintWriter::println(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_39c7bd3c], a0);
    }

    void PrintWriter::println(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_5fdc3f48], a0.this$);
    }

    void PrintWriter::println(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_0ee6df2f], a0);
    }

    void PrintWriter::println(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_bb0c767f], a0);
    }

    void PrintWriter::println(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_06298cab], a0);
    }

    void PrintWriter::println(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_5d1c7645], a0);
    }

    void PrintWriter::println(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_700e23d6], a0.this$);
    }

    void PrintWriter::println(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_290588ee], a0.this$);
    }

    void PrintWriter::println(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_87fd545a], a0);
    }

    void PrintWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void PrintWriter::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
    }

    void PrintWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void PrintWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }

    void PrintWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self);
    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args);

    static PyMethodDef t_PrintWriter__methods_[] = {
      DECLARE_METHOD(t_PrintWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, checkError, METH_NOARGS),
      DECLARE_METHOD(t_PrintWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, format, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, print, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, printf, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, println, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(PrintWriter, t_PrintWriter, ::java::io::Writer, PrintWriter, t_PrintWriter_init_, 0, 0, 0, 0, 0);

    void t_PrintWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(PrintWriter), module, "PrintWriter", 0);
    }

    void t_PrintWriter::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "class_", make_descriptor(PrintWriter::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "wrapfn_", make_descriptor(t_PrintWriter::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, PrintWriter::initializeClass, 1)))
        return NULL;
      return t_PrintWriter::wrap_Object(PrintWriter(((t_PrintWriter *) arg)->object.this$));
    }
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, PrintWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Writer::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::io::Writer a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::Writer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.checkError());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args)
    {
      ::java::lang::String a0((jobject) NULL);
      JArray< ::java::lang::Object > a1((jobject) NULL);
      PrintWriter result((jobject) NULL);

      if (!parseArgs(args, "s[o", &a0, &a1))
      {
        OBJ_CALL(result = self->object.format(a0, a1));
        return t_PrintWriter::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "format", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "print", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args)
    {
      ::java::lang::String a0((jobject) NULL);
      JArray< ::java::lang::Object > a1((jobject) NULL);
      PrintWriter result((jobject) NULL);

      if (!parseArgs(args, "s[o", &a0, &a1))
      {
        OBJ_CALL(result = self->object.printf(a0, a1));
        return t_PrintWriter::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "printf", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.println());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "println", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "write", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/function/IFunction.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace function {

      ::java::lang::Class *IFunction::class$ = NULL;
      jmethodID *IFunction::mids$ = NULL;
      bool IFunction::live$ = false;

      jclass IFunction::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/function/IFunction");

          mids$ = new jmethodID[max_mid];
          mids$[mid_f_f3b62ccb] = env->getMethodID(cls, "f", "([D)D");
          mids$[mid_f_02530858] = env->getMethodID(cls, "f", "(Lstallone/api/doubles/IDoubleArray;)D");
          mids$[mid_getNumberOfVariables_54c6a179] = env->getMethodID(cls, "getNumberOfVariables", "()I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jdouble IFunction::f(const JArray< jdouble > & a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_f_f3b62ccb], a0.this$);
      }

      jdouble IFunction::f(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_f_02530858], a0.this$);
      }

      jint IFunction::getNumberOfVariables() const
      {
        return env->callIntMethod(this$, mids$[mid_getNumberOfVariables_54c6a179]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace function {
      static PyObject *t_IFunction_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IFunction_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IFunction_f(t_IFunction *self, PyObject *args);
      static PyObject *t_IFunction_getNumberOfVariables(t_IFunction *self);
      static PyObject *t_IFunction_get__numberOfVariables(t_IFunction *self, void *data);
      static PyGetSetDef t_IFunction__fields_[] = {
        DECLARE_GET_FIELD(t_IFunction, numberOfVariables),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IFunction__methods_[] = {
        DECLARE_METHOD(t_IFunction, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IFunction, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IFunction, f, METH_VARARGS),
        DECLARE_METHOD(t_IFunction, getNumberOfVariables, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IFunction, t_IFunction, ::java::lang::Object, IFunction, abstract_init, 0, 0, t_IFunction__fields_, 0, 0);

      void t_IFunction::install(PyObject *module)
      {
        installType(&PY_TYPE(IFunction), module, "IFunction", 0);
      }

      void t_IFunction::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IFunction).tp_dict, "class_", make_descriptor(IFunction::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IFunction).tp_dict, "wrapfn_", make_descriptor(t_IFunction::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IFunction_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IFunction::initializeClass, 1)))
          return NULL;
        return t_IFunction::wrap_Object(IFunction(((t_IFunction *) arg)->object.this$));
      }
      static PyObject *t_IFunction_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IFunction::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IFunction_f(t_IFunction *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            JArray< jdouble > a0((jobject) NULL);
            jdouble result;

            if (!parseArgs(args, "[D", &a0))
            {
              OBJ_CALL(result = self->object.f(a0));
              return PyFloat_FromDouble((double) result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jdouble result;

            if (!parseArgs(args, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.f(a0));
              return PyFloat_FromDouble((double) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "f", args);
        return NULL;
      }

      static PyObject *t_IFunction_getNumberOfVariables(t_IFunction *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getNumberOfVariables());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IFunction_get__numberOfVariables(t_IFunction *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getNumberOfVariables());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/algebra/ICholeskyDecomposition.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace algebra {

      ::java::lang::Class *ICholeskyDecomposition::class$ = NULL;
      jmethodID *ICholeskyDecomposition::mids$ = NULL;
      bool ICholeskyDecomposition::live$ = false;

      jclass ICholeskyDecomposition::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/algebra/ICholeskyDecomposition");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getInputMatrix_1d53e353] = env->getMethodID(cls, "getInputMatrix", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getRMatrix_1d53e353] = env->getMethodID(cls, "getRMatrix", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_hasDecomposition_54c6a16a] = env->getMethodID(cls, "hasDecomposition", "()Z");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::stallone::api::doubles::IDoubleArray ICholeskyDecomposition::getInputMatrix() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getInputMatrix_1d53e353]));
      }

      ::stallone::api::doubles::IDoubleArray ICholeskyDecomposition::getRMatrix() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getRMatrix_1d53e353]));
      }

      jboolean ICholeskyDecomposition::hasDecomposition() const
      {
        return env->callBooleanMethod(this$, mids$[mid_hasDecomposition_54c6a16a]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace algebra {
      static PyObject *t_ICholeskyDecomposition_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ICholeskyDecomposition_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ICholeskyDecomposition_getInputMatrix(t_ICholeskyDecomposition *self);
      static PyObject *t_ICholeskyDecomposition_getRMatrix(t_ICholeskyDecomposition *self);
      static PyObject *t_ICholeskyDecomposition_hasDecomposition(t_ICholeskyDecomposition *self);
      static PyObject *t_ICholeskyDecomposition_get__inputMatrix(t_ICholeskyDecomposition *self, void *data);
      static PyObject *t_ICholeskyDecomposition_get__rMatrix(t_ICholeskyDecomposition *self, void *data);
      static PyGetSetDef t_ICholeskyDecomposition__fields_[] = {
        DECLARE_GET_FIELD(t_ICholeskyDecomposition, inputMatrix),
        DECLARE_GET_FIELD(t_ICholeskyDecomposition, rMatrix),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_ICholeskyDecomposition__methods_[] = {
        DECLARE_METHOD(t_ICholeskyDecomposition, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ICholeskyDecomposition, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ICholeskyDecomposition, getInputMatrix, METH_NOARGS),
        DECLARE_METHOD(t_ICholeskyDecomposition, getRMatrix, METH_NOARGS),
        DECLARE_METHOD(t_ICholeskyDecomposition, hasDecomposition, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ICholeskyDecomposition, t_ICholeskyDecomposition, ::java::lang::Object, ICholeskyDecomposition, abstract_init, 0, 0, t_ICholeskyDecomposition__fields_, 0, 0);

      void t_ICholeskyDecomposition::install(PyObject *module)
      {
        installType(&PY_TYPE(ICholeskyDecomposition), module, "ICholeskyDecomposition", 0);
      }

      void t_ICholeskyDecomposition::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ICholeskyDecomposition).tp_dict, "class_", make_descriptor(ICholeskyDecomposition::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ICholeskyDecomposition).tp_dict, "wrapfn_", make_descriptor(t_ICholeskyDecomposition::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ICholeskyDecomposition).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ICholeskyDecomposition_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ICholeskyDecomposition::initializeClass, 1)))
          return NULL;
        return t_ICholeskyDecomposition::wrap_Object(ICholeskyDecomposition(((t_ICholeskyDecomposition *) arg)->object.this$));
      }
      static PyObject *t_ICholeskyDecomposition_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ICholeskyDecomposition::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_ICholeskyDecomposition_getInputMatrix(t_ICholeskyDecomposition *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getInputMatrix());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_ICholeskyDecomposition_getRMatrix(t_ICholeskyDecomposition *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getRMatrix());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_ICholeskyDecomposition_hasDecomposition(t_ICholeskyDecomposition *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.hasDecomposition());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_ICholeskyDecomposition_get__inputMatrix(t_ICholeskyDecomposition *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getInputMatrix());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }

      static PyObject *t_ICholeskyDecomposition_get__rMatrix(t_ICholeskyDecomposition *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getRMatrix());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/algebra/ILinearSystem.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace algebra {

      ::java::lang::Class *ILinearSystem::class$ = NULL;
      jmethodID *ILinearSystem::mids$ = NULL;
      bool ILinearSystem::live$ = false;

      jclass ILinearSystem::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/algebra/ILinearSystem");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getSolutionVector_1d53e353] = env->getMethodID(cls, "getSolutionVector", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_perform_54c6a166] = env->getMethodID(cls, "perform", "()V");
          mids$[mid_setCoefficientVector_0253084a] = env->getMethodID(cls, "setCoefficientVector", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_setMatrix_0253084a] = env->getMethodID(cls, "setMatrix", "(Lstallone/api/doubles/IDoubleArray;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::stallone::api::doubles::IDoubleArray ILinearSystem::getSolutionVector() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getSolutionVector_1d53e353]));
      }

      void ILinearSystem::perform() const
      {
        env->callVoidMethod(this$, mids$[mid_perform_54c6a166]);
      }

      void ILinearSystem::setCoefficientVector(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setCoefficientVector_0253084a], a0.this$);
      }

      void ILinearSystem::setMatrix(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setMatrix_0253084a], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace algebra {
      static PyObject *t_ILinearSystem_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ILinearSystem_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ILinearSystem_getSolutionVector(t_ILinearSystem *self);
      static PyObject *t_ILinearSystem_perform(t_ILinearSystem *self);
      static PyObject *t_ILinearSystem_setCoefficientVector(t_ILinearSystem *self, PyObject *arg);
      static PyObject *t_ILinearSystem_setMatrix(t_ILinearSystem *self, PyObject *arg);
      static int t_ILinearSystem_set__coefficientVector(t_ILinearSystem *self, PyObject *arg, void *data);
      static int t_ILinearSystem_set__matrix(t_ILinearSystem *self, PyObject *arg, void *data);
      static PyObject *t_ILinearSystem_get__solutionVector(t_ILinearSystem *self, void *data);
      static PyGetSetDef t_ILinearSystem__fields_[] = {
        DECLARE_SET_FIELD(t_ILinearSystem, coefficientVector),
        DECLARE_SET_FIELD(t_ILinearSystem, matrix),
        DECLARE_GET_FIELD(t_ILinearSystem, solutionVector),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_ILinearSystem__methods_[] = {
        DECLARE_METHOD(t_ILinearSystem, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ILinearSystem, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ILinearSystem, getSolutionVector, METH_NOARGS),
        DECLARE_METHOD(t_ILinearSystem, perform, METH_NOARGS),
        DECLARE_METHOD(t_ILinearSystem, setCoefficientVector, METH_O),
        DECLARE_METHOD(t_ILinearSystem, setMatrix, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ILinearSystem, t_ILinearSystem, ::java::lang::Object, ILinearSystem, abstract_init, 0, 0, t_ILinearSystem__fields_, 0, 0);

      void t_ILinearSystem::install(PyObject *module)
      {
        installType(&PY_TYPE(ILinearSystem), module, "ILinearSystem", 0);
      }

      void t_ILinearSystem::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ILinearSystem).tp_dict, "class_", make_descriptor(ILinearSystem::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ILinearSystem).tp_dict, "wrapfn_", make_descriptor(t_ILinearSystem::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ILinearSystem).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ILinearSystem_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ILinearSystem::initializeClass, 1)))
          return NULL;
        return t_ILinearSystem::wrap_Object(ILinearSystem(((t_ILinearSystem *) arg)->object.this$));
      }
      static PyObject *t_ILinearSystem_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ILinearSystem::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_ILinearSystem_getSolutionVector(t_ILinearSystem *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getSolutionVector());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_ILinearSystem_perform(t_ILinearSystem *self)
      {
        OBJ_CALL(self->object.perform());
        Py_RETURN_NONE;
      }

      static PyObject *t_ILinearSystem_setCoefficientVector(t_ILinearSystem *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setCoefficientVector(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setCoefficientVector", arg);
        return NULL;
      }

      static PyObject *t_ILinearSystem_setMatrix(t_ILinearSystem *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setMatrix(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setMatrix", arg);
        return NULL;
      }

      static int t_ILinearSystem_set__coefficientVector(t_ILinearSystem *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setCoefficientVector(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "coefficientVector", arg);
        return -1;
      }

      static int t_ILinearSystem_set__matrix(t_ILinearSystem *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setMatrix(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "matrix", arg);
        return -1;
      }

      static PyObject *t_ILinearSystem_get__solutionVector(t_ILinearSystem *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getSolutionVector());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/mc/MarkovModel.h"
#include "stallone/api/mc/MarkovModelUtilities.h"
#include "stallone/api/mc/MarkovModelFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace mc {

      ::java::lang::Class *MarkovModel::class$ = NULL;
      jmethodID *MarkovModel::mids$ = NULL;
      bool MarkovModel::live$ = false;
      ::stallone::api::mc::MarkovModelFactory *MarkovModel::create = NULL;
      ::stallone::api::mc::MarkovModelUtilities *MarkovModel::util = NULL;

      jclass MarkovModel::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/mc/MarkovModel");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          cls = (jclass) class$->this$;

          create = new ::stallone::api::mc::MarkovModelFactory(env->getStaticObjectField(cls, "create", "Lstallone/api/mc/MarkovModelFactory;"));
          util = new ::stallone::api::mc::MarkovModelUtilities(env->getStaticObjectField(cls, "util", "Lstallone/api/mc/MarkovModelUtilities;"));
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MarkovModel::MarkovModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace mc {
      static PyObject *t_MarkovModel_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MarkovModel_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MarkovModel_init_(t_MarkovModel *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_MarkovModel__methods_[] = {
        DECLARE_METHOD(t_MarkovModel, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MarkovModel, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(MarkovModel, t_MarkovModel, ::java::lang::Object, MarkovModel, t_MarkovModel_init_, 0, 0, 0, 0, 0);

      void t_MarkovModel::install(PyObject *module)
      {
        installType(&PY_TYPE(MarkovModel), module, "MarkovModel", 0);
      }

      void t_MarkovModel::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(MarkovModel).tp_dict, "class_", make_descriptor(MarkovModel::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(MarkovModel).tp_dict, "wrapfn_", make_descriptor(t_MarkovModel::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(MarkovModel).tp_dict, "boxfn_", make_descriptor(boxObject));
        env->getClass(MarkovModel::initializeClass);
        PyDict_SetItemString(PY_TYPE(MarkovModel).tp_dict, "create", make_descriptor(::stallone::api::mc::t_MarkovModelFactory::wrap_Object(*MarkovModel::create)));
        PyDict_SetItemString(PY_TYPE(MarkovModel).tp_dict, "util", make_descriptor(::stallone::api::mc::t_MarkovModelUtilities::wrap_Object(*MarkovModel::util)));
      }

      static PyObject *t_MarkovModel_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MarkovModel::initializeClass, 1)))
          return NULL;
        return t_MarkovModel::wrap_Object(MarkovModel(((t_MarkovModel *) arg)->object.this$));
      }
      static PyObject *t_MarkovModel_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MarkovModel::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MarkovModel_init_(t_MarkovModel *self, PyObject *args, PyObject *kwds)
      {
        MarkovModel object((jobject) NULL);

        INT_CALL(object = MarkovModel());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/complex/IComplexElement.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace complex {

      ::java::lang::Class *IComplexElement::class$ = NULL;
      jmethodID *IComplexElement::mids$ = NULL;
      bool IComplexElement::live$ = false;

      jclass IComplexElement::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/complex/IComplexElement");

          mids$ = new jmethodID[max_mid];
          mids$[mid_im_54c6a174] = env->getMethodID(cls, "im", "()D");
          mids$[mid_re_54c6a174] = env->getMethodID(cls, "re", "()D");
          mids$[mid_setIm_5d1c7645] = env->getMethodID(cls, "setIm", "(D)V");
          mids$[mid_setRe_5d1c7645] = env->getMethodID(cls, "setRe", "(D)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jdouble IComplexElement::im() const
      {
        return env->callDoubleMethod(this$, mids$[mid_im_54c6a174]);
      }

      jdouble IComplexElement::re() const
      {
        return env->callDoubleMethod(this$, mids$[mid_re_54c6a174]);
      }

      void IComplexElement::setIm(jdouble a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setIm_5d1c7645], a0);
      }

      void IComplexElement::setRe(jdouble a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setRe_5d1c7645], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace complex {
      static PyObject *t_IComplexElement_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IComplexElement_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IComplexElement_im(t_IComplexElement *self);
      static PyObject *t_IComplexElement_re(t_IComplexElement *self);
      static PyObject *t_IComplexElement_setIm(t_IComplexElement *self, PyObject *arg);
      static PyObject *t_IComplexElement_setRe(t_IComplexElement *self, PyObject *arg);

      static PyMethodDef t_IComplexElement__methods_[] = {
        DECLARE_METHOD(t_IComplexElement, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IComplexElement, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IComplexElement, im, METH_NOARGS),
        DECLARE_METHOD(t_IComplexElement, re, METH_NOARGS),
        DECLARE_METHOD(t_IComplexElement, setIm, METH_O),
        DECLARE_METHOD(t_IComplexElement, setRe, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IComplexElement, t_IComplexElement, ::stallone::api::doubles::IDoubleElement, IComplexElement, abstract_init, 0, 0, 0, 0, 0);

      void t_IComplexElement::install(PyObject *module)
      {
        installType(&PY_TYPE(IComplexElement), module, "IComplexElement", 0);
      }

      void t_IComplexElement::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IComplexElement).tp_dict, "class_", make_descriptor(IComplexElement::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IComplexElement).tp_dict, "wrapfn_", make_descriptor(t_IComplexElement::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IComplexElement).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IComplexElement_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IComplexElement::initializeClass, 1)))
          return NULL;
        return t_IComplexElement::wrap_Object(IComplexElement(((t_IComplexElement *) arg)->object.this$));
      }
      static PyObject *t_IComplexElement_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IComplexElement::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IComplexElement_im(t_IComplexElement *self)
      {
        jdouble result;
        OBJ_CALL(result = self->object.im());
        return PyFloat_FromDouble((double) result);
      }

      static PyObject *t_IComplexElement_re(t_IComplexElement *self)
      {
        jdouble result;
        OBJ_CALL(result = self->object.re());
        return PyFloat_FromDouble((double) result);
      }

      static PyObject *t_IComplexElement_setIm(t_IComplexElement *self, PyObject *arg)
      {
        jdouble a0;

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(self->object.setIm(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setIm", arg);
        return NULL;
      }

      static PyObject *t_IComplexElement_setRe(t_IComplexElement *self, PyObject *arg)
      {
        jdouble a0;

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(self->object.setRe(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setRe", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/datasequence/IDataReader.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace datasequence {

      ::java::lang::Class *IDataReader::class$ = NULL;
      jmethodID *IDataReader::mids$ = NULL;
      bool IDataReader::live$ = false;

      jclass IDataReader::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/datasequence/IDataReader");

          mids$ = new jmethodID[max_mid];
          mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
          mids$[mid_dimension_54c6a179] = env->getMethodID(cls, "dimension", "()I");
          mids$[mid_get_e3ead0f5] = env->getMethodID(cls, "get", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
          mids$[mid_load_26787975] = env->getMethodID(cls, "load", "()Lstallone/api/datasequence/IDataSequence;");
          mids$[mid_memorySize_54c6a17a] = env->getMethodID(cls, "memorySize", "()J");
          mids$[mid_open_54c6a166] = env->getMethodID(cls, "open", "()V");
          mids$[mid_scan_54c6a166] = env->getMethodID(cls, "scan", "()V");
          mids$[mid_setSource_5fdc3f48] = env->getMethodID(cls, "setSource", "(Ljava/lang/String;)V");
          mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void IDataReader::close() const
      {
        env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
      }

      jint IDataReader::dimension() const
      {
        return env->callIntMethod(this$, mids$[mid_dimension_54c6a179]);
      }

      ::stallone::api::doubles::IDoubleArray IDataReader::get(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_get_e3ead0f5], a0));
      }

      ::java::util::Iterator IDataReader::iterator() const
      {
        return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
      }

      ::stallone::api::datasequence::IDataSequence IDataReader::load() const
      {
        return ::stallone::api::datasequence::IDataSequence(env->callObjectMethod(this$, mids$[mid_load_26787975]));
      }

      jlong IDataReader::memorySize() const
      {
        return env->callLongMethod(this$, mids$[mid_memorySize_54c6a17a]);
      }

      void IDataReader::open() const
      {
        env->callVoidMethod(this$, mids$[mid_open_54c6a166]);
      }

      void IDataReader::scan() const
      {
        env->callVoidMethod(this$, mids$[mid_scan_54c6a166]);
      }

      void IDataReader::setSource(const ::java::lang::String & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setSource_5fdc3f48], a0.this$);
      }

      jint IDataReader::size() const
      {
        return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace datasequence {
      static PyObject *t_IDataReader_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDataReader_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDataReader_close(t_IDataReader *self);
      static PyObject *t_IDataReader_dimension(t_IDataReader *self, PyObject *args);
      static PyObject *t_IDataReader_get(t_IDataReader *self, PyObject *args);
      static PyObject *t_IDataReader_iterator(t_IDataReader *self, PyObject *args);
      static PyObject *t_IDataReader_load(t_IDataReader *self);
      static PyObject *t_IDataReader_memorySize(t_IDataReader *self);
      static PyObject *t_IDataReader_open(t_IDataReader *self);
      static PyObject *t_IDataReader_scan(t_IDataReader *self);
      static PyObject *t_IDataReader_setSource(t_IDataReader *self, PyObject *arg);
      static PyObject *t_IDataReader_size(t_IDataReader *self, PyObject *args);
      static int t_IDataReader_set__source(t_IDataReader *self, PyObject *arg, void *data);
      static PyGetSetDef t_IDataReader__fields_[] = {
        DECLARE_SET_FIELD(t_IDataReader, source),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IDataReader__methods_[] = {
        DECLARE_METHOD(t_IDataReader, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDataReader, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDataReader, close, METH_NOARGS),
        DECLARE_METHOD(t_IDataReader, dimension, METH_VARARGS),
        DECLARE_METHOD(t_IDataReader, get, METH_VARARGS),
        DECLARE_METHOD(t_IDataReader, iterator, METH_VARARGS),
        DECLARE_METHOD(t_IDataReader, load, METH_NOARGS),
        DECLARE_METHOD(t_IDataReader, memorySize, METH_NOARGS),
        DECLARE_METHOD(t_IDataReader, open, METH_NOARGS),
        DECLARE_METHOD(t_IDataReader, scan, METH_NOARGS),
        DECLARE_METHOD(t_IDataReader, setSource, METH_O),
        DECLARE_METHOD(t_IDataReader, size, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IDataReader, t_IDataReader, ::stallone::api::datasequence::IDataSequence, IDataReader, abstract_init, ((PyObject *(*)(t_IDataReader *)) get_iterator< t_IDataReader >), 0, t_IDataReader__fields_, 0, 0);

      void t_IDataReader::install(PyObject *module)
      {
        installType(&PY_TYPE(IDataReader), module, "IDataReader", 0);
      }

      void t_IDataReader::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IDataReader).tp_dict, "class_", make_descriptor(IDataReader::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IDataReader).tp_dict, "wrapfn_", make_descriptor(t_IDataReader::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IDataReader).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IDataReader_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IDataReader::initializeClass, 1)))
          return NULL;
        return t_IDataReader::wrap_Object(IDataReader(((t_IDataReader *) arg)->object.this$));
      }
      static PyObject *t_IDataReader_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IDataReader::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IDataReader_close(t_IDataReader *self)
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      static PyObject *t_IDataReader_dimension(t_IDataReader *self, PyObject *args)
      {
        jint result;

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.dimension());
          return PyInt_FromLong((long) result);
        }

        return callSuper(&PY_TYPE(IDataReader), (PyObject *) self, "dimension", args, 2);
      }

      static PyObject *t_IDataReader_get(t_IDataReader *self, PyObject *args)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "I", &a0))
        {
          OBJ_CALL(result = self->object.get(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(IDataReader), (PyObject *) self, "get", args, 2);
      }

      static PyObject *t_IDataReader_iterator(t_IDataReader *self, PyObject *args)
      {
        ::java::util::Iterator result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::stallone::api::doubles::PY_TYPE(IDoubleArray));
        }

        return callSuper(&PY_TYPE(IDataReader), (PyObject *) self, "iterator", args, 2);
      }

      static PyObject *t_IDataReader_load(t_IDataReader *self)
      {
        ::stallone::api::datasequence::IDataSequence result((jobject) NULL);
        OBJ_CALL(result = self->object.load());
        return ::stallone::api::datasequence::t_IDataSequence::wrap_Object(result);
      }

      static PyObject *t_IDataReader_memorySize(t_IDataReader *self)
      {
        jlong result;
        OBJ_CALL(result = self->object.memorySize());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      static PyObject *t_IDataReader_open(t_IDataReader *self)
      {
        OBJ_CALL(self->object.open());
        Py_RETURN_NONE;
      }

      static PyObject *t_IDataReader_scan(t_IDataReader *self)
      {
        OBJ_CALL(self->object.scan());
        Py_RETURN_NONE;
      }

      static PyObject *t_IDataReader_setSource(t_IDataReader *self, PyObject *arg)
      {
        ::java::lang::String a0((jobject) NULL);

        if (!parseArg(arg, "s", &a0))
        {
          OBJ_CALL(self->object.setSource(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setSource", arg);
        return NULL;
      }

      static PyObject *t_IDataReader_size(t_IDataReader *self, PyObject *args)
      {
        jint result;

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        return callSuper(&PY_TYPE(IDataReader), (PyObject *) self, "size", args, 2);
      }

      static int t_IDataReader_set__source(t_IDataReader *self, PyObject *arg, void *data)
      {
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object.setSource(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "source", arg);
        return -1;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/function/IFunctionC1.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace function {

      ::java::lang::Class *IFunctionC1::class$ = NULL;
      jmethodID *IFunctionC1::mids$ = NULL;
      bool IFunctionC1::live$ = false;

      jclass IFunctionC1::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/function/IFunctionC1");

          mids$ = new jmethodID[max_mid];
          mids$[mid_grad_381b58a8] = env->getMethodID(cls, "grad", "([D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_grad_32638cb7] = env->getMethodID(cls, "grad", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::stallone::api::doubles::IDoubleArray IFunctionC1::grad(const JArray< jdouble > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_grad_381b58a8], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray IFunctionC1::grad(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_grad_32638cb7], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace function {
      static PyObject *t_IFunctionC1_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IFunctionC1_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IFunctionC1_grad(t_IFunctionC1 *self, PyObject *args);

      static PyMethodDef t_IFunctionC1__methods_[] = {
        DECLARE_METHOD(t_IFunctionC1, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IFunctionC1, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IFunctionC1, grad, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IFunctionC1, t_IFunctionC1, ::stallone::api::function::IFunction, IFunctionC1, abstract_init, 0, 0, 0, 0, 0);

      void t_IFunctionC1::install(PyObject *module)
      {
        installType(&PY_TYPE(IFunctionC1), module, "IFunctionC1", 0);
      }

      void t_IFunctionC1::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IFunctionC1).tp_dict, "class_", make_descriptor(IFunctionC1::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IFunctionC1).tp_dict, "wrapfn_", make_descriptor(t_IFunctionC1::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IFunctionC1).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IFunctionC1_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IFunctionC1::initializeClass, 1)))
          return NULL;
        return t_IFunctionC1::wrap_Object(IFunctionC1(((t_IFunctionC1 *) arg)->object.this$));
      }
      static PyObject *t_IFunctionC1_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IFunctionC1::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IFunctionC1_grad(t_IFunctionC1 *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            JArray< jdouble > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[D", &a0))
            {
              OBJ_CALL(result = self->object.grad(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.grad(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "grad", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/cluster/ClusterUtilities.h"
#include "stallone/api/ints/IIntArray.h"
#include "stallone/api/doubles/IMetric.h"
#include "stallone/api/datasequence/IDataSequence.h"
#include "java/lang/Iterable.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/discretization/IDiscretization.h"
#include "stallone/api/cluster/IClustering.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace cluster {

      ::java::lang::Class *ClusterUtilities::class$ = NULL;
      jmethodID *ClusterUtilities::mids$ = NULL;
      bool ClusterUtilities::live$ = false;

      jclass ClusterUtilities::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/cluster/ClusterUtilities");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_clusterIndexDaviesBouldin_10283cb8] = env->getMethodID(cls, "clusterIndexDaviesBouldin", "(Ljava/lang/Iterable;Lstallone/api/datasequence/IDataSequence;Lstallone/api/doubles/IMetric;Lstallone/api/ints/IIntArray;)D");
          mids$[mid_clusterIndexSizeImbalance_059aa486] = env->getMethodID(cls, "clusterIndexSizeImbalance", "(Lstallone/api/ints/IIntArray;)D");
          mids$[mid_clusterNoncompactness_10283cb8] = env->getMethodID(cls, "clusterNoncompactness", "(Ljava/lang/Iterable;Lstallone/api/datasequence/IDataSequence;Lstallone/api/doubles/IMetric;Lstallone/api/ints/IIntArray;)D");
          mids$[mid_clusterSizes_668b97b7] = env->getMethodID(cls, "clusterSizes", "(Ljava/lang/Iterable;Lstallone/api/datasequence/IDataSequence;Lstallone/api/doubles/IMetric;Lstallone/api/ints/IIntArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_densityBased_dcea8e74] = env->getMethodID(cls, "densityBased", "(Lstallone/api/datasequence/IDataSequence;I)Lstallone/api/cluster/IClustering;");
          mids$[mid_densityBased_66646433] = env->getMethodID(cls, "densityBased", "(Lstallone/api/datasequence/IDataSequence;DI)Lstallone/api/cluster/IClustering;");
          mids$[mid_densityBased_810dc3c0] = env->getMethodID(cls, "densityBased", "(Lstallone/api/datasequence/IDataSequence;Lstallone/api/doubles/IMetric;DI)Lstallone/api/cluster/IClustering;");
          mids$[mid_discretize_b1063b91] = env->getMethodID(cls, "discretize", "(Lstallone/api/datasequence/IDataSequence;Lstallone/api/discretization/IDiscretization;)Lstallone/api/ints/IIntArray;");
          mids$[mid_kcenter_544bdf51] = env->getMethodID(cls, "kcenter", "(Lstallone/api/datasequence/IDataSequence;Lstallone/api/doubles/IMetric;I)Lstallone/api/cluster/IClustering;");
          mids$[mid_kcenter_d426b214] = env->getMethodID(cls, "kcenter", "(Ljava/lang/Iterable;ILstallone/api/doubles/IMetric;I)Lstallone/api/cluster/IClustering;");
          mids$[mid_kmeans_dcea8e74] = env->getMethodID(cls, "kmeans", "(Lstallone/api/datasequence/IDataSequence;I)Lstallone/api/cluster/IClustering;");
          mids$[mid_kmeans_c5cf10c2] = env->getMethodID(cls, "kmeans", "(Lstallone/api/datasequence/IDataSequence;II)Lstallone/api/cluster/IClustering;");
          mids$[mid_kmeans_591b59c5] = env->getMethodID(cls, "kmeans", "(Ljava/lang/Iterable;II)Lstallone/api/cluster/IClustering;");
          mids$[mid_kmeans_a5d60e49] = env->getMethodID(cls, "kmeans", "(Ljava/lang/Iterable;III)Lstallone/api/cluster/IClustering;");
          mids$[mid_kmeans_504866f1] = env->getMethodID(cls, "kmeans", "(Lstallone/api/datasequence/IDataSequence;Lstallone/api/doubles/IMetric;II)Lstallone/api/cluster/IClustering;");
          mids$[mid_kmeans_f2ad93a2] = env->getMethodID(cls, "kmeans", "(Ljava/lang/Iterable;ILstallone/api/doubles/IMetric;II)Lstallone/api/cluster/IClustering;");
          mids$[mid_membershipToState_b982e684] = env->getMethodID(cls, "membershipToState", "(Lstallone/api/cluster/IClustering;I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_regularSpatial_a59e2bf6] = env->getMethodID(cls, "regularSpatial", "(Lstallone/api/datasequence/IDataSequence;Lstallone/api/doubles/IMetric;D)Lstallone/api/cluster/IClustering;");
          mids$[mid_regularSpatial_1f660d8f] = env->getMethodID(cls, "regularSpatial", "(Ljava/lang/Iterable;ILstallone/api/doubles/IMetric;D)Lstallone/api/cluster/IClustering;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ClusterUtilities::ClusterUtilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      jdouble ClusterUtilities::clusterIndexDaviesBouldin(const ::java::lang::Iterable & a0, const ::stallone::api::datasequence::IDataSequence & a1, const ::stallone::api::doubles::IMetric & a2, const ::stallone::api::ints::IIntArray & a3) const
      {
        return env->callDoubleMethod(this$, mids$[mid_clusterIndexDaviesBouldin_10283cb8], a0.this$, a1.this$, a2.this$, a3.this$);
      }

      jdouble ClusterUtilities::clusterIndexSizeImbalance(const ::stallone::api::ints::IIntArray & a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_clusterIndexSizeImbalance_059aa486], a0.this$);
      }

      jdouble ClusterUtilities::clusterNoncompactness(const ::java::lang::Iterable & a0, const ::stallone::api::datasequence::IDataSequence & a1, const ::stallone::api::doubles::IMetric & a2, const ::stallone::api::ints::IIntArray & a3) const
      {
        return env->callDoubleMethod(this$, mids$[mid_clusterNoncompactness_10283cb8], a0.this$, a1.this$, a2.this$, a3.this$);
      }

      ::stallone::api::doubles::IDoubleArray ClusterUtilities::clusterSizes(const ::java::lang::Iterable & a0, const ::stallone::api::datasequence::IDataSequence & a1, const ::stallone::api::doubles::IMetric & a2, const ::stallone::api::ints::IIntArray & a3) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_clusterSizes_668b97b7], a0.this$, a1.this$, a2.this$, a3.this$));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::densityBased(const ::stallone::api::datasequence::IDataSequence & a0, jint a1) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_densityBased_dcea8e74], a0.this$, a1));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::densityBased(const ::stallone::api::datasequence::IDataSequence & a0, jdouble a1, jint a2) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_densityBased_66646433], a0.this$, a1, a2));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::densityBased(const ::stallone::api::datasequence::IDataSequence & a0, const ::stallone::api::doubles::IMetric & a1, jdouble a2, jint a3) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_densityBased_810dc3c0], a0.this$, a1.this$, a2, a3));
      }

      ::stallone::api::ints::IIntArray ClusterUtilities::discretize(const ::stallone::api::datasequence::IDataSequence & a0, const ::stallone::api::discretization::IDiscretization & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_discretize_b1063b91], a0.this$, a1.this$));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::kcenter(const ::stallone::api::datasequence::IDataSequence & a0, const ::stallone::api::doubles::IMetric & a1, jint a2) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_kcenter_544bdf51], a0.this$, a1.this$, a2));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::kcenter(const ::java::lang::Iterable & a0, jint a1, const ::stallone::api::doubles::IMetric & a2, jint a3) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_kcenter_d426b214], a0.this$, a1, a2.this$, a3));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::kmeans(const ::stallone::api::datasequence::IDataSequence & a0, jint a1) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_kmeans_dcea8e74], a0.this$, a1));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::kmeans(const ::stallone::api::datasequence::IDataSequence & a0, jint a1, jint a2) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_kmeans_c5cf10c2], a0.this$, a1, a2));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::kmeans(const ::java::lang::Iterable & a0, jint a1, jint a2) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_kmeans_591b59c5], a0.this$, a1, a2));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::kmeans(const ::java::lang::Iterable & a0, jint a1, jint a2, jint a3) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_kmeans_a5d60e49], a0.this$, a1, a2, a3));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::kmeans(const ::stallone::api::datasequence::IDataSequence & a0, const ::stallone::api::doubles::IMetric & a1, jint a2, jint a3) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_kmeans_504866f1], a0.this$, a1.this$, a2, a3));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::kmeans(const ::java::lang::Iterable & a0, jint a1, const ::stallone::api::doubles::IMetric & a2, jint a3, jint a4) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_kmeans_f2ad93a2], a0.this$, a1, a2.this$, a3, a4));
      }

      ::stallone::api::doubles::IDoubleArray ClusterUtilities::membershipToState(const ::stallone::api::cluster::IClustering & a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_membershipToState_b982e684], a0.this$, a1));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::regularSpatial(const ::stallone::api::datasequence::IDataSequence & a0, const ::stallone::api::doubles::IMetric & a1, jdouble a2) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_regularSpatial_a59e2bf6], a0.this$, a1.this$, a2));
      }

      ::stallone::api::cluster::IClustering ClusterUtilities::regularSpatial(const ::java::lang::Iterable & a0, jint a1, const ::stallone::api::doubles::IMetric & a2, jdouble a3) const
      {
        return ::stallone::api::cluster::IClustering(env->callObjectMethod(this$, mids$[mid_regularSpatial_1f660d8f], a0.this$, a1, a2.this$, a3));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace cluster {
      static PyObject *t_ClusterUtilities_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ClusterUtilities_instance_(PyTypeObject *type, PyObject *arg);
      static int t_ClusterUtilities_init_(t_ClusterUtilities *self, PyObject *args, PyObject *kwds);
      static PyObject *t_ClusterUtilities_clusterIndexDaviesBouldin(t_ClusterUtilities *self, PyObject *args);
      static PyObject *t_ClusterUtilities_clusterIndexSizeImbalance(t_ClusterUtilities *self, PyObject *arg);
      static PyObject *t_ClusterUtilities_clusterNoncompactness(t_ClusterUtilities *self, PyObject *args);
      static PyObject *t_ClusterUtilities_clusterSizes(t_ClusterUtilities *self, PyObject *args);
      static PyObject *t_ClusterUtilities_densityBased(t_ClusterUtilities *self, PyObject *args);
      static PyObject *t_ClusterUtilities_discretize(t_ClusterUtilities *self, PyObject *args);
      static PyObject *t_ClusterUtilities_kcenter(t_ClusterUtilities *self, PyObject *args);
      static PyObject *t_ClusterUtilities_kmeans(t_ClusterUtilities *self, PyObject *args);
      static PyObject *t_ClusterUtilities_membershipToState(t_ClusterUtilities *self, PyObject *args);
      static PyObject *t_ClusterUtilities_regularSpatial(t_ClusterUtilities *self, PyObject *args);

      static PyMethodDef t_ClusterUtilities__methods_[] = {
        DECLARE_METHOD(t_ClusterUtilities, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ClusterUtilities, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ClusterUtilities, clusterIndexDaviesBouldin, METH_VARARGS),
        DECLARE_METHOD(t_ClusterUtilities, clusterIndexSizeImbalance, METH_O),
        DECLARE_METHOD(t_ClusterUtilities, clusterNoncompactness, METH_VARARGS),
        DECLARE_METHOD(t_ClusterUtilities, clusterSizes, METH_VARARGS),
        DECLARE_METHOD(t_ClusterUtilities, densityBased, METH_VARARGS),
        DECLARE_METHOD(t_ClusterUtilities, discretize, METH_VARARGS),
        DECLARE_METHOD(t_ClusterUtilities, kcenter, METH_VARARGS),
        DECLARE_METHOD(t_ClusterUtilities, kmeans, METH_VARARGS),
        DECLARE_METHOD(t_ClusterUtilities, membershipToState, METH_VARARGS),
        DECLARE_METHOD(t_ClusterUtilities, regularSpatial, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ClusterUtilities, t_ClusterUtilities, ::java::lang::Object, ClusterUtilities, t_ClusterUtilities_init_, 0, 0, 0, 0, 0);

      void t_ClusterUtilities::install(PyObject *module)
      {
        installType(&PY_TYPE(ClusterUtilities), module, "ClusterUtilities", 0);
      }

      void t_ClusterUtilities::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ClusterUtilities).tp_dict, "class_", make_descriptor(ClusterUtilities::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ClusterUtilities).tp_dict, "wrapfn_", make_descriptor(t_ClusterUtilities::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ClusterUtilities).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ClusterUtilities_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ClusterUtilities::initializeClass, 1)))
          return NULL;
        return t_ClusterUtilities::wrap_Object(ClusterUtilities(((t_ClusterUtilities *) arg)->object.this$));
      }
      static PyObject *t_ClusterUtilities_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ClusterUtilities::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_ClusterUtilities_init_(t_ClusterUtilities *self, PyObject *args, PyObject *kwds)
      {
        ClusterUtilities object((jobject) NULL);

        INT_CALL(object = ClusterUtilities());
        self->object = object;

        return 0;
      }

      static PyObject *t_ClusterUtilities_clusterIndexDaviesBouldin(t_ClusterUtilities *self, PyObject *args)
      {
        ::java::lang::Iterable a0((jobject) NULL);
        PyTypeObject **p0;
        ::stallone::api::datasequence::IDataSequence a1((jobject) NULL);
        ::stallone::api::doubles::IMetric a2((jobject) NULL);
        PyTypeObject **p2;
        ::stallone::api::ints::IIntArray a3((jobject) NULL);
        jdouble result;

        if (!parseArgs(args, "KkKk", ::java::lang::Iterable::initializeClass, ::stallone::api::datasequence::IDataSequence::initializeClass, ::stallone::api::doubles::IMetric::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &a2, &p2, ::stallone::api::doubles::t_IMetric::parameters_, &a3))
        {
          OBJ_CALL(result = self->object.clusterIndexDaviesBouldin(a0, a1, a2, a3));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "clusterIndexDaviesBouldin", args);
        return NULL;
      }

      static PyObject *t_ClusterUtilities_clusterIndexSizeImbalance(t_ClusterUtilities *self, PyObject *arg)
      {
        ::stallone::api::ints::IIntArray a0((jobject) NULL);
        jdouble result;

        if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.clusterIndexSizeImbalance(a0));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "clusterIndexSizeImbalance", arg);
        return NULL;
      }

      static PyObject *t_ClusterUtilities_clusterNoncompactness(t_ClusterUtilities *self, PyObject *args)
      {
        ::java::lang::Iterable a0((jobject) NULL);
        PyTypeObject **p0;
        ::stallone::api::datasequence::IDataSequence a1((jobject) NULL);
        ::stallone::api::doubles::IMetric a2((jobject) NULL);
        PyTypeObject **p2;
        ::stallone::api::ints::IIntArray a3((jobject) NULL);
        jdouble result;

        if (!parseArgs(args, "KkKk", ::java::lang::Iterable::initializeClass, ::stallone::api::datasequence::IDataSequence::initializeClass, ::stallone::api::doubles::IMetric::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &a2, &p2, ::stallone::api::doubles::t_IMetric::parameters_, &a3))
        {
          OBJ_CALL(result = self->object.clusterNoncompactness(a0, a1, a2, a3));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "clusterNoncompactness", args);
        return NULL;
      }

      static PyObject *t_ClusterUtilities_clusterSizes(t_ClusterUtilities *self, PyObject *args)
      {
        ::java::lang::Iterable a0((jobject) NULL);
        PyTypeObject **p0;
        ::stallone::api::datasequence::IDataSequence a1((jobject) NULL);
        ::stallone::api::doubles::IMetric a2((jobject) NULL);
        PyTypeObject **p2;
        ::stallone::api::ints::IIntArray a3((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "KkKk", ::java::lang::Iterable::initializeClass, ::stallone::api::datasequence::IDataSequence::initializeClass, ::stallone::api::doubles::IMetric::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &a2, &p2, ::stallone::api::doubles::t_IMetric::parameters_, &a3))
        {
          OBJ_CALL(result = self->object.clusterSizes(a0, a1, a2, a3));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "clusterSizes", args);
        return NULL;
      }

      static PyObject *t_ClusterUtilities_densityBased(t_ClusterUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::datasequence::IDataSequence a0((jobject) NULL);
            jint a1;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "kI", ::stallone::api::datasequence::IDataSequence::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.densityBased(a0, a1));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::datasequence::IDataSequence a0((jobject) NULL);
            jdouble a1;
            jint a2;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "kDI", ::stallone::api::datasequence::IDataSequence::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.densityBased(a0, a1, a2));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
          break;
         case 4:
          {
            ::stallone::api::datasequence::IDataSequence a0((jobject) NULL);
            ::stallone::api::doubles::IMetric a1((jobject) NULL);
            PyTypeObject **p1;
            jdouble a2;
            jint a3;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "kKDI", ::stallone::api::datasequence::IDataSequence::initializeClass, ::stallone::api::doubles::IMetric::initializeClass, &a0, &a1, &p1, ::stallone::api::doubles::t_IMetric::parameters_, &a2, &a3))
            {
              OBJ_CALL(result = self->object.densityBased(a0, a1, a2, a3));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "densityBased", args);
        return NULL;
      }

      static PyObject *t_ClusterUtilities_discretize(t_ClusterUtilities *self, PyObject *args)
      {
        ::stallone::api::datasequence::IDataSequence a0((jobject) NULL);
        ::stallone::api::discretization::IDiscretization a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::datasequence::IDataSequence::initializeClass, ::stallone::api::discretization::IDiscretization::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.discretize(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "discretize", args);
        return NULL;
      }

      static PyObject *t_ClusterUtilities_kcenter(t_ClusterUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 3:
          {
            ::stallone::api::datasequence::IDataSequence a0((jobject) NULL);
            ::stallone::api::doubles::IMetric a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "kKI", ::stallone::api::datasequence::IDataSequence::initializeClass, ::stallone::api::doubles::IMetric::initializeClass, &a0, &a1, &p1, ::stallone::api::doubles::t_IMetric::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.kcenter(a0, a1, a2));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
          break;
         case 4:
          {
            ::java::lang::Iterable a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            ::stallone::api::doubles::IMetric a2((jobject) NULL);
            PyTypeObject **p2;
            jint a3;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "KIKI", ::java::lang::Iterable::initializeClass, ::stallone::api::doubles::IMetric::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &a2, &p2, ::stallone::api::doubles::t_IMetric::parameters_, &a3))
            {
              OBJ_CALL(result = self->object.kcenter(a0, a1, a2, a3));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "kcenter", args);
        return NULL;
      }

      static PyObject *t_ClusterUtilities_kmeans(t_ClusterUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::datasequence::IDataSequence a0((jobject) NULL);
            jint a1;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "kI", ::stallone::api::datasequence::IDataSequence::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.kmeans(a0, a1));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::datasequence::IDataSequence a0((jobject) NULL);
            jint a1;
            jint a2;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "kII", ::stallone::api::datasequence::IDataSequence::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.kmeans(a0, a1, a2));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
          {
            ::java::lang::Iterable a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "KII", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = self->object.kmeans(a0, a1, a2));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
          break;
         case 4:
          {
            ::java::lang::Iterable a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            jint a3;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "KIII", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.kmeans(a0, a1, a2, a3));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
          {
            ::stallone::api::datasequence::IDataSequence a0((jobject) NULL);
            ::stallone::api::doubles::IMetric a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "kKII", ::stallone::api::datasequence::IDataSequence::initializeClass, ::stallone::api::doubles::IMetric::initializeClass, &a0, &a1, &p1, ::stallone::api::doubles::t_IMetric::parameters_, &a2, &a3))
            {
              OBJ_CALL(result = self->object.kmeans(a0, a1, a2, a3));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
          break;
         case 5:
          {
            ::java::lang::Iterable a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            ::stallone::api::doubles::IMetric a2((jobject) NULL);
            PyTypeObject **p2;
            jint a3;
            jint a4;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "KIKII", ::java::lang::Iterable::initializeClass, ::stallone::api::doubles::IMetric::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &a2, &p2, ::stallone::api::doubles::t_IMetric::parameters_, &a3, &a4))
            {
              OBJ_CALL(result = self->object.kmeans(a0, a1, a2, a3, a4));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "kmeans", args);
        return NULL;
      }

      static PyObject *t_ClusterUtilities_membershipToState(t_ClusterUtilities *self, PyObject *args)
      {
        ::stallone::api::cluster::IClustering a0((jobject) NULL);
        jint a1;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::cluster::IClustering::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.membershipToState(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "membershipToState", args);
        return NULL;
      }

      static PyObject *t_ClusterUtilities_regularSpatial(t_ClusterUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 3:
          {
            ::stallone::api::datasequence::IDataSequence a0((jobject) NULL);
            ::stallone::api::doubles::IMetric a1((jobject) NULL);
            PyTypeObject **p1;
            jdouble a2;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "kKD", ::stallone::api::datasequence::IDataSequence::initializeClass, ::stallone::api::doubles::IMetric::initializeClass, &a0, &a1, &p1, ::stallone::api::doubles::t_IMetric::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.regularSpatial(a0, a1, a2));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
          break;
         case 4:
          {
            ::java::lang::Iterable a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            ::stallone::api::doubles::IMetric a2((jobject) NULL);
            PyTypeObject **p2;
            jdouble a3;
            ::stallone::api::cluster::IClustering result((jobject) NULL);

            if (!parseArgs(args, "KIKD", ::java::lang::Iterable::initializeClass, ::stallone::api::doubles::IMetric::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &a2, &p2, ::stallone::api::doubles::t_IMetric::parameters_, &a3))
            {
              OBJ_CALL(result = self->object.regularSpatial(a0, a1, a2, a3));
              return ::stallone::api::cluster::t_IClustering::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "regularSpatial", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/intsequence/IIntReader.h"
#include "stallone/api/ints/IIntArray.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace intsequence {

      ::java::lang::Class *IIntReader::class$ = NULL;
      jmethodID *IIntReader::mids$ = NULL;
      bool IIntReader::live$ = false;

      jclass IIntReader::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/intsequence/IIntReader");

          mids$ = new jmethodID[max_mid];
          mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
          mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");
          mids$[mid_load_4ac77731] = env->getMethodID(cls, "load", "()Lstallone/api/ints/IIntArray;");
          mids$[mid_memorySize_54c6a17a] = env->getMethodID(cls, "memorySize", "()J");
          mids$[mid_open_54c6a166] = env->getMethodID(cls, "open", "()V");
          mids$[mid_scan_54c6a166] = env->getMethodID(cls, "scan", "()V");
          mids$[mid_setSource_5fdc3f48] = env->getMethodID(cls, "setSource", "(Ljava/lang/String;)V");
          mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void IIntReader::close() const
      {
        env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
      }

      jint IIntReader::get(jint a0) const
      {
        return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
      }

      ::stallone::api::ints::IIntArray IIntReader::load() const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_load_4ac77731]));
      }

      jlong IIntReader::memorySize() const
      {
        return env->callLongMethod(this$, mids$[mid_memorySize_54c6a17a]);
      }

      void IIntReader::open() const
      {
        env->callVoidMethod(this$, mids$[mid_open_54c6a166]);
      }

      void IIntReader::scan() const
      {
        env->callVoidMethod(this$, mids$[mid_scan_54c6a166]);
      }

      void IIntReader::setSource(const ::java::lang::String & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setSource_5fdc3f48], a0.this$);
      }

      jint IIntReader::size() const
      {
        return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace intsequence {
      static PyObject *t_IIntReader_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntReader_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntReader_close(t_IIntReader *self);
      static PyObject *t_IIntReader_get(t_IIntReader *self, PyObject *arg);
      static PyObject *t_IIntReader_load(t_IIntReader *self);
      static PyObject *t_IIntReader_memorySize(t_IIntReader *self);
      static PyObject *t_IIntReader_open(t_IIntReader *self);
      static PyObject *t_IIntReader_scan(t_IIntReader *self);
      static PyObject *t_IIntReader_setSource(t_IIntReader *self, PyObject *arg);
      static PyObject *t_IIntReader_size(t_IIntReader *self);
      static int t_IIntReader_set__source(t_IIntReader *self, PyObject *arg, void *data);
      static PyGetSetDef t_IIntReader__fields_[] = {
        DECLARE_SET_FIELD(t_IIntReader, source),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IIntReader__methods_[] = {
        DECLARE_METHOD(t_IIntReader, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntReader, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntReader, close, METH_NOARGS),
        DECLARE_METHOD(t_IIntReader, get, METH_O),
        DECLARE_METHOD(t_IIntReader, load, METH_NOARGS),
        DECLARE_METHOD(t_IIntReader, memorySize, METH_NOARGS),
        DECLARE_METHOD(t_IIntReader, open, METH_NOARGS),
        DECLARE_METHOD(t_IIntReader, scan, METH_NOARGS),
        DECLARE_METHOD(t_IIntReader, setSource, METH_O),
        DECLARE_METHOD(t_IIntReader, size, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IIntReader, t_IIntReader, ::java::lang::Object, IIntReader, abstract_init, 0, 0, t_IIntReader__fields_, 0, 0);

      void t_IIntReader::install(PyObject *module)
      {
        installType(&PY_TYPE(IIntReader), module, "IIntReader", 0);
      }

      void t_IIntReader::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IIntReader).tp_dict, "class_", make_descriptor(IIntReader::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IIntReader).tp_dict, "wrapfn_", make_descriptor(t_IIntReader::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IIntReader).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IIntReader_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IIntReader::initializeClass, 1)))
          return NULL;
        return t_IIntReader::wrap_Object(IIntReader(((t_IIntReader *) arg)->object.this$));
      }
      static PyObject *t_IIntReader_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IIntReader::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IIntReader_close(t_IIntReader *self)
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      static PyObject *t_IIntReader_get(t_IIntReader *self, PyObject *arg)
      {
        jint a0;
        jint result;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.get(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "get", arg);
        return NULL;
      }

      static PyObject *t_IIntReader_load(t_IIntReader *self)
      {
        ::stallone::api::ints::IIntArray result((jobject) NULL);
        OBJ_CALL(result = self->object.load());
        return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
      }

      static PyObject *t_IIntReader_memorySize(t_IIntReader *self)
      {
        jlong result;
        OBJ_CALL(result = self->object.memorySize());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      static PyObject *t_IIntReader_open(t_IIntReader *self)
      {
        OBJ_CALL(self->object.open());
        Py_RETURN_NONE;
      }

      static PyObject *t_IIntReader_scan(t_IIntReader *self)
      {
        OBJ_CALL(self->object.scan());
        Py_RETURN_NONE;
      }

      static PyObject *t_IIntReader_setSource(t_IIntReader *self, PyObject *arg)
      {
        ::java::lang::String a0((jobject) NULL);

        if (!parseArg(arg, "s", &a0))
        {
          OBJ_CALL(self->object.setSource(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setSource", arg);
        return NULL;
      }

      static PyObject *t_IIntReader_size(t_IIntReader *self)
      {
        jint result;
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      static int t_IIntReader_set__source(t_IIntReader *self, PyObject *arg, void *data)
      {
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object.setSource(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "source", arg);
        return -1;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/strings/StringFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace strings {

      ::java::lang::Class *StringFactory::class$ = NULL;
      jmethodID *StringFactory::mids$ = NULL;
      bool StringFactory::live$ = false;

      jclass StringFactory::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/strings/StringFactory");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      StringFactory::StringFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace strings {
      static PyObject *t_StringFactory_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_StringFactory_instance_(PyTypeObject *type, PyObject *arg);
      static int t_StringFactory_init_(t_StringFactory *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_StringFactory__methods_[] = {
        DECLARE_METHOD(t_StringFactory, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_StringFactory, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(StringFactory, t_StringFactory, ::java::lang::Object, StringFactory, t_StringFactory_init_, 0, 0, 0, 0, 0);

      void t_StringFactory::install(PyObject *module)
      {
        installType(&PY_TYPE(StringFactory), module, "StringFactory", 0);
      }

      void t_StringFactory::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(StringFactory).tp_dict, "class_", make_descriptor(StringFactory::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(StringFactory).tp_dict, "wrapfn_", make_descriptor(t_StringFactory::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(StringFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_StringFactory_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, StringFactory::initializeClass, 1)))
          return NULL;
        return t_StringFactory::wrap_Object(StringFactory(((t_StringFactory *) arg)->object.this$));
      }
      static PyObject *t_StringFactory_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, StringFactory::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_StringFactory_init_(t_StringFactory *self, PyObject *args, PyObject *kwds)
      {
        StringFactory object((jobject) NULL);

        INT_CALL(object = StringFactory());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/function/FunctionUtilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace function {

      ::java::lang::Class *FunctionUtilities::class$ = NULL;
      jmethodID *FunctionUtilities::mids$ = NULL;
      bool FunctionUtilities::live$ = false;

      jclass FunctionUtilities::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/function/FunctionUtilities");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      FunctionUtilities::FunctionUtilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace function {
      static PyObject *t_FunctionUtilities_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_FunctionUtilities_instance_(PyTypeObject *type, PyObject *arg);
      static int t_FunctionUtilities_init_(t_FunctionUtilities *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_FunctionUtilities__methods_[] = {
        DECLARE_METHOD(t_FunctionUtilities, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_FunctionUtilities, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(FunctionUtilities, t_FunctionUtilities, ::java::lang::Object, FunctionUtilities, t_FunctionUtilities_init_, 0, 0, 0, 0, 0);

      void t_FunctionUtilities::install(PyObject *module)
      {
        installType(&PY_TYPE(FunctionUtilities), module, "FunctionUtilities", 0);
      }

      void t_FunctionUtilities::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(FunctionUtilities).tp_dict, "class_", make_descriptor(FunctionUtilities::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(FunctionUtilities).tp_dict, "wrapfn_", make_descriptor(t_FunctionUtilities::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(FunctionUtilities).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_FunctionUtilities_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, FunctionUtilities::initializeClass, 1)))
          return NULL;
        return t_FunctionUtilities::wrap_Object(FunctionUtilities(((t_FunctionUtilities *) arg)->object.this$));
      }
      static PyObject *t_FunctionUtilities_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, FunctionUtilities::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_FunctionUtilities_init_(t_FunctionUtilities *self, PyObject *args, PyObject *kwds)
      {
        FunctionUtilities object((jobject) NULL);

        INT_CALL(object = FunctionUtilities());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/algebra/AlgebraFactory.h"
#include "stallone/api/algebra/IEigenvalueSolver.h"
#include "stallone/api/algebra/IQRDecomposition.h"
#include "java/lang/String.h"
#include "stallone/api/algebra/ILUDecomposition.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/algebra/ICholeskyDecomposition.h"
#include "stallone/api/algebra/ILinearSystem.h"
#include "stallone/api/algebra/ILinearMatrixSystem.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace algebra {

      ::java::lang::Class *AlgebraFactory::class$ = NULL;
      jmethodID *AlgebraFactory::mids$ = NULL;
      bool AlgebraFactory::live$ = false;

      jclass AlgebraFactory::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/algebra/AlgebraFactory");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_LUSolver_55a0a8d9] = env->getMethodID(cls, "LUSolver", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/algebra/ILUDecomposition;");
          mids$[mid_QRSolver_6c4a0779] = env->getMethodID(cls, "QRSolver", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/algebra/IQRDecomposition;");
          mids$[mid_createCholeskyDecomposition_aa69a7c2] = env->getMethodID(cls, "createCholeskyDecomposition", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/algebra/ICholeskyDecomposition;");
          mids$[mid_eigenSolver_2d5b7c70] = env->getMethodID(cls, "eigenSolver", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/algebra/IEigenvalueSolver;");
          mids$[mid_eigenSolver_9ed36252] = env->getMethodID(cls, "eigenSolver", "(Lstallone/api/doubles/IDoubleArray;I)Lstallone/api/algebra/IEigenvalueSolver;");
          mids$[mid_eigenSolver_36aacef2] = env->getMethodID(cls, "eigenSolver", "(Lstallone/api/doubles/IDoubleArray;Ljava/lang/String;)Lstallone/api/algebra/IEigenvalueSolver;");
          mids$[mid_eigenSolver_ae618a52] = env->getMethodID(cls, "eigenSolver", "(Lstallone/api/doubles/IDoubleArray;ZZ)Lstallone/api/algebra/IEigenvalueSolver;");
          mids$[mid_linearMatrixSolver_74c22355] = env->getMethodID(cls, "linearMatrixSolver", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/algebra/ILinearMatrixSystem;");
          mids$[mid_linearSolver_5463b672] = env->getMethodID(cls, "linearSolver", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/algebra/ILinearSystem;");
          mids$[mid_linearSolver_90696514] = env->getMethodID(cls, "linearSolver", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;Ljava/lang/String;)Lstallone/api/algebra/ILinearSystem;");
          mids$[mid_concatenate_e60b36d8] = env->getStaticMethodID(cls, "concatenate", "(Ljava/util/List;Ljava/lang/String;)Ljava/lang/String;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      AlgebraFactory::AlgebraFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::stallone::api::algebra::ILUDecomposition AlgebraFactory::LUSolver(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::algebra::ILUDecomposition(env->callObjectMethod(this$, mids$[mid_LUSolver_55a0a8d9], a0.this$));
      }

      ::stallone::api::algebra::IQRDecomposition AlgebraFactory::QRSolver(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::algebra::IQRDecomposition(env->callObjectMethod(this$, mids$[mid_QRSolver_6c4a0779], a0.this$));
      }

      ::stallone::api::algebra::ICholeskyDecomposition AlgebraFactory::createCholeskyDecomposition(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::algebra::ICholeskyDecomposition(env->callObjectMethod(this$, mids$[mid_createCholeskyDecomposition_aa69a7c2], a0.this$));
      }

      ::stallone::api::algebra::IEigenvalueSolver AlgebraFactory::eigenSolver(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::algebra::IEigenvalueSolver(env->callObjectMethod(this$, mids$[mid_eigenSolver_2d5b7c70], a0.this$));
      }

      ::stallone::api::algebra::IEigenvalueSolver AlgebraFactory::eigenSolver(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return ::stallone::api::algebra::IEigenvalueSolver(env->callObjectMethod(this$, mids$[mid_eigenSolver_9ed36252], a0.this$, a1));
      }

      ::stallone::api::algebra::IEigenvalueSolver AlgebraFactory::eigenSolver(const ::stallone::api::doubles::IDoubleArray & a0, const ::java::lang::String & a1) const
      {
        return ::stallone::api::algebra::IEigenvalueSolver(env->callObjectMethod(this$, mids$[mid_eigenSolver_36aacef2], a0.this$, a1.this$));
      }

      ::stallone::api::algebra::IEigenvalueSolver AlgebraFactory::eigenSolver(const ::stallone::api::doubles::IDoubleArray & a0, jboolean a1, jboolean a2) const
      {
        return ::stallone::api::algebra::IEigenvalueSolver(env->callObjectMethod(this$, mids$[mid_eigenSolver_ae618a52], a0.this$, a1, a2));
      }

      ::stallone::api::algebra::ILinearMatrixSystem AlgebraFactory::linearMatrixSolver(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::algebra::ILinearMatrixSystem(env->callObjectMethod(this$, mids$[mid_linearMatrixSolver_74c22355], a0.this$, a1.this$));
      }

      ::stallone::api::algebra::ILinearSystem AlgebraFactory::linearSolver(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::algebra::ILinearSystem(env->callObjectMethod(this$, mids$[mid_linearSolver_5463b672], a0.this$, a1.this$));
      }

      ::stallone::api::algebra::ILinearSystem AlgebraFactory::linearSolver(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1, const ::java::lang::String & a2) const
      {
        return ::stallone::api::algebra::ILinearSystem(env->callObjectMethod(this$, mids$[mid_linearSolver_90696514], a0.this$, a1.this$, a2.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "stallone/api/algebra/AlgebraFactory$LinearSystemEnum.h"
#include "stallone/api/algebra/AlgebraFactory$EigenvalueDecompositionEnum.h"

namespace stallone {
  namespace api {
    namespace algebra {
      static PyObject *t_AlgebraFactory_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_AlgebraFactory_instance_(PyTypeObject *type, PyObject *arg);
      static int t_AlgebraFactory_init_(t_AlgebraFactory *self, PyObject *args, PyObject *kwds);
      static PyObject *t_AlgebraFactory_LUSolver(t_AlgebraFactory *self, PyObject *arg);
      static PyObject *t_AlgebraFactory_QRSolver(t_AlgebraFactory *self, PyObject *arg);
      static PyObject *t_AlgebraFactory_createCholeskyDecomposition(t_AlgebraFactory *self, PyObject *arg);
      static PyObject *t_AlgebraFactory_eigenSolver(t_AlgebraFactory *self, PyObject *args);
      static PyObject *t_AlgebraFactory_linearMatrixSolver(t_AlgebraFactory *self, PyObject *args);
      static PyObject *t_AlgebraFactory_linearSolver(t_AlgebraFactory *self, PyObject *args);

      static PyMethodDef t_AlgebraFactory__methods_[] = {
        DECLARE_METHOD(t_AlgebraFactory, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_AlgebraFactory, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_AlgebraFactory, LUSolver, METH_O),
        DECLARE_METHOD(t_AlgebraFactory, QRSolver, METH_O),
        DECLARE_METHOD(t_AlgebraFactory, createCholeskyDecomposition, METH_O),
        DECLARE_METHOD(t_AlgebraFactory, eigenSolver, METH_VARARGS),
        DECLARE_METHOD(t_AlgebraFactory, linearMatrixSolver, METH_VARARGS),
        DECLARE_METHOD(t_AlgebraFactory, linearSolver, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(AlgebraFactory, t_AlgebraFactory, ::java::lang::Object, AlgebraFactory, t_AlgebraFactory_init_, 0, 0, 0, 0, 0);

      void t_AlgebraFactory::install(PyObject *module)
      {
        installType(&PY_TYPE(AlgebraFactory), module, "AlgebraFactory", 0);
        PyDict_SetItemString(PY_TYPE(AlgebraFactory).tp_dict, "LinearSystemEnum", make_descriptor(&PY_TYPE(AlgebraFactory$LinearSystemEnum)));
        PyDict_SetItemString(PY_TYPE(AlgebraFactory).tp_dict, "EigenvalueDecompositionEnum", make_descriptor(&PY_TYPE(AlgebraFactory$EigenvalueDecompositionEnum)));
      }

      void t_AlgebraFactory::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(AlgebraFactory).tp_dict, "class_", make_descriptor(AlgebraFactory::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(AlgebraFactory).tp_dict, "wrapfn_", make_descriptor(t_AlgebraFactory::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(AlgebraFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_AlgebraFactory_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, AlgebraFactory::initializeClass, 1)))
          return NULL;
        return t_AlgebraFactory::wrap_Object(AlgebraFactory(((t_AlgebraFactory *) arg)->object.this$));
      }
      static PyObject *t_AlgebraFactory_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, AlgebraFactory::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_AlgebraFactory_init_(t_AlgebraFactory *self, PyObject *args, PyObject *kwds)
      {
        AlgebraFactory object((jobject) NULL);

        INT_CALL(object = AlgebraFactory());
        self->object = object;

        return 0;
      }

      static PyObject *t_AlgebraFactory_LUSolver(t_AlgebraFactory *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::algebra::ILUDecomposition result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.LUSolver(a0));
          return ::stallone::api::algebra::t_ILUDecomposition::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "LUSolver", arg);
        return NULL;
      }

      static PyObject *t_AlgebraFactory_QRSolver(t_AlgebraFactory *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::algebra::IQRDecomposition result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.QRSolver(a0));
          return ::stallone::api::algebra::t_IQRDecomposition::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "QRSolver", arg);
        return NULL;
      }

      static PyObject *t_AlgebraFactory_createCholeskyDecomposition(t_AlgebraFactory *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::algebra::ICholeskyDecomposition result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.createCholeskyDecomposition(a0));
          return ::stallone::api::algebra::t_ICholeskyDecomposition::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "createCholeskyDecomposition", arg);
        return NULL;
      }

      static PyObject *t_AlgebraFactory_eigenSolver(t_AlgebraFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::algebra::IEigenvalueSolver result((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.eigenSolver(a0));
              return ::stallone::api::algebra::t_IEigenvalueSolver::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jint a1;
            ::stallone::api::algebra::IEigenvalueSolver result((jobject) NULL);

            if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.eigenSolver(a0, a1));
              return ::stallone::api::algebra::t_IEigenvalueSolver::wrap_Object(result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::stallone::api::algebra::IEigenvalueSolver result((jobject) NULL);

            if (!parseArgs(args, "ks", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.eigenSolver(a0, a1));
              return ::stallone::api::algebra::t_IEigenvalueSolver::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jboolean a1;
            jboolean a2;
            ::stallone::api::algebra::IEigenvalueSolver result((jobject) NULL);

            if (!parseArgs(args, "kZZ", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.eigenSolver(a0, a1, a2));
              return ::stallone::api::algebra::t_IEigenvalueSolver::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "eigenSolver", args);
        return NULL;
      }

      static PyObject *t_AlgebraFactory_linearMatrixSolver(t_AlgebraFactory *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        ::stallone::api::algebra::ILinearMatrixSystem result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.linearMatrixSolver(a0, a1));
          return ::stallone::api::algebra::t_ILinearMatrixSystem::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "linearMatrixSolver", args);
        return NULL;
      }

      static PyObject *t_AlgebraFactory_linearSolver(t_AlgebraFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            ::stallone::api::algebra::ILinearSystem result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.linearSolver(a0, a1));
              return ::stallone::api::algebra::t_ILinearSystem::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::stallone::api::algebra::ILinearSystem result((jobject) NULL);

            if (!parseArgs(args, "kks", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.linearSolver(a0, a1, a2));
              return ::stallone::api::algebra::t_ILinearSystem::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "linearSolver", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/mc/sampling/IReversibleSamplingStep.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace mc {
    namespace sampling {

      ::java::lang::Class *IReversibleSamplingStep::class$ = NULL;
      jmethodID *IReversibleSamplingStep::mids$ = NULL;
      bool IReversibleSamplingStep::live$ = false;

      jclass IReversibleSamplingStep::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/mc/sampling/IReversibleSamplingStep");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init_0f08b60a] = env->getMethodID(cls, "init", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_step_54c6a16a] = env->getMethodID(cls, "step", "()Z");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void IReversibleSamplingStep::init(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1, const ::stallone::api::doubles::IDoubleArray & a2) const
      {
        env->callVoidMethod(this$, mids$[mid_init_0f08b60a], a0.this$, a1.this$, a2.this$);
      }

      jboolean IReversibleSamplingStep::step() const
      {
        return env->callBooleanMethod(this$, mids$[mid_step_54c6a16a]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace mc {
    namespace sampling {
      static PyObject *t_IReversibleSamplingStep_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IReversibleSamplingStep_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IReversibleSamplingStep_init(t_IReversibleSamplingStep *self, PyObject *args);
      static PyObject *t_IReversibleSamplingStep_step(t_IReversibleSamplingStep *self);

      static PyMethodDef t_IReversibleSamplingStep__methods_[] = {
        DECLARE_METHOD(t_IReversibleSamplingStep, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IReversibleSamplingStep, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IReversibleSamplingStep, init, METH_VARARGS),
        DECLARE_METHOD(t_IReversibleSamplingStep, step, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IReversibleSamplingStep, t_IReversibleSamplingStep, ::java::lang::Object, IReversibleSamplingStep, abstract_init, 0, 0, 0, 0, 0);

      void t_IReversibleSamplingStep::install(PyObject *module)
      {
        installType(&PY_TYPE(IReversibleSamplingStep), module, "IReversibleSamplingStep", 0);
      }

      void t_IReversibleSamplingStep::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IReversibleSamplingStep).tp_dict, "class_", make_descriptor(IReversibleSamplingStep::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IReversibleSamplingStep).tp_dict, "wrapfn_", make_descriptor(t_IReversibleSamplingStep::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IReversibleSamplingStep).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IReversibleSamplingStep_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IReversibleSamplingStep::initializeClass, 1)))
          return NULL;
        return t_IReversibleSamplingStep::wrap_Object(IReversibleSamplingStep(((t_IReversibleSamplingStep *) arg)->object.this$));
      }
      static PyObject *t_IReversibleSamplingStep_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IReversibleSamplingStep::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IReversibleSamplingStep_init(t_IReversibleSamplingStep *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a2((jobject) NULL);

        if (!parseArgs(args, "kkk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(self->object.init(a0, a1, a2));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "init", args);
        return NULL;
      }

      static PyObject *t_IReversibleSamplingStep_step(t_IReversibleSamplingStep *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.step());
        Py_RETURN_BOOL(result);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/ints/IIndexMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace ints {

      ::java::lang::Class *IIndexMap::class$ = NULL;
      jmethodID *IIndexMap::mids$ = NULL;
      bool IIndexMap::live$ = false;

      jclass IIndexMap::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/ints/IIndexMap");

          mids$ = new jmethodID[max_mid];
          mids$[mid_map_39c7bd23] = env->getMethodID(cls, "map", "(I)I");
          mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jint IIndexMap::map(jint a0) const
      {
        return env->callIntMethod(this$, mids$[mid_map_39c7bd23], a0);
      }

      jint IIndexMap::size() const
      {
        return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace ints {
      static PyObject *t_IIndexMap_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIndexMap_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIndexMap_map(t_IIndexMap *self, PyObject *arg);
      static PyObject *t_IIndexMap_size(t_IIndexMap *self);

      static PyMethodDef t_IIndexMap__methods_[] = {
        DECLARE_METHOD(t_IIndexMap, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIndexMap, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIndexMap, map, METH_O),
        DECLARE_METHOD(t_IIndexMap, size, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IIndexMap, t_IIndexMap, ::java::lang::Object, IIndexMap, abstract_init, 0, 0, 0, 0, 0);

      void t_IIndexMap::install(PyObject *module)
      {
        installType(&PY_TYPE(IIndexMap), module, "IIndexMap", 0);
      }

      void t_IIndexMap::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IIndexMap).tp_dict, "class_", make_descriptor(IIndexMap::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IIndexMap).tp_dict, "wrapfn_", make_descriptor(t_IIndexMap::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IIndexMap).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IIndexMap_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IIndexMap::initializeClass, 1)))
          return NULL;
        return t_IIndexMap::wrap_Object(IIndexMap(((t_IIndexMap *) arg)->object.this$));
      }
      static PyObject *t_IIndexMap_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IIndexMap::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IIndexMap_map(t_IIndexMap *self, PyObject *arg)
      {
        jint a0;
        jint result;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.map(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "map", arg);
        return NULL;
      }

      static PyObject *t_IIndexMap_size(t_IIndexMap *self)
      {
        jint result;
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/graph/GraphUtilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace graph {

      ::java::lang::Class *GraphUtilities::class$ = NULL;
      jmethodID *GraphUtilities::mids$ = NULL;
      bool GraphUtilities::live$ = false;

      jclass GraphUtilities::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/graph/GraphUtilities");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      GraphUtilities::GraphUtilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace graph {
      static PyObject *t_GraphUtilities_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_GraphUtilities_instance_(PyTypeObject *type, PyObject *arg);
      static int t_GraphUtilities_init_(t_GraphUtilities *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_GraphUtilities__methods_[] = {
        DECLARE_METHOD(t_GraphUtilities, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_GraphUtilities, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(GraphUtilities, t_GraphUtilities, ::java::lang::Object, GraphUtilities, t_GraphUtilities_init_, 0, 0, 0, 0, 0);

      void t_GraphUtilities::install(PyObject *module)
      {
        installType(&PY_TYPE(GraphUtilities), module, "GraphUtilities", 0);
      }

      void t_GraphUtilities::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(GraphUtilities).tp_dict, "class_", make_descriptor(GraphUtilities::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(GraphUtilities).tp_dict, "wrapfn_", make_descriptor(t_GraphUtilities::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(GraphUtilities).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_GraphUtilities_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, GraphUtilities::initializeClass, 1)))
          return NULL;
        return t_GraphUtilities::wrap_Object(GraphUtilities(((t_GraphUtilities *) arg)->object.this$));
      }
      static PyObject *t_GraphUtilities_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, GraphUtilities::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_GraphUtilities_init_(t_GraphUtilities *self, PyObject *args, PyObject *kwds)
      {
        GraphUtilities object((jobject) NULL);

        INT_CALL(object = GraphUtilities());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/function/IGrid.h"
#include "stallone/api/ints/IIntArray.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/datasequence/IDataSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace function {

      ::java::lang::Class *IGrid::class$ = NULL;
      jmethodID *IGrid::mids$ = NULL;
      bool IGrid::live$ = false;

      jclass IGrid::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/function/IGrid");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getIndex_1efc2017] = env->getMethodID(cls, "getIndex", "([I)I");
          mids$[mid_getIndex_059aa48b] = env->getMethodID(cls, "getIndex", "(Lstallone/api/ints/IIntArray;)I");
          mids$[mid_getNeighborIndexes_62213cdb] = env->getMethodID(cls, "getNeighborIndexes", "(I)Lstallone/api/ints/IIntArray;");
          mids$[mid_getNeighborMultiIndexes_e2b10697] = env->getMethodID(cls, "getNeighborMultiIndexes", "([I)Lstallone/api/ints/IIntArray;");
          mids$[mid_getNeighbors_062b33a3] = env->getMethodID(cls, "getNeighbors", "(I)Lstallone/api/datasequence/IDataSequence;");
          mids$[mid_getNumberOfGridPoints_54c6a179] = env->getMethodID(cls, "getNumberOfGridPoints", "()I");
          mids$[mid_getNumberOfGridPoints_39c7bd23] = env->getMethodID(cls, "getNumberOfGridPoints", "(I)I");
          mids$[mid_getPoint_d0740085] = env->getMethodID(cls, "getPoint", "(Lstallone/api/ints/IIntArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getPoint_a5c2d8f9] = env->getMethodID(cls, "getPoint", "([I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_nearestMultiIndex_c221c4b5] = env->getMethodID(cls, "nearestMultiIndex", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/ints/IIntArray;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jint IGrid::getIndex(const JArray< jint > & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getIndex_1efc2017], a0.this$);
      }

      jint IGrid::getIndex(const ::stallone::api::ints::IIntArray & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getIndex_059aa48b], a0.this$);
      }

      ::stallone::api::ints::IIntArray IGrid::getNeighborIndexes(jint a0) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_getNeighborIndexes_62213cdb], a0));
      }

      ::stallone::api::ints::IIntArray IGrid::getNeighborMultiIndexes(const JArray< jint > & a0) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_getNeighborMultiIndexes_e2b10697], a0.this$));
      }

      ::stallone::api::datasequence::IDataSequence IGrid::getNeighbors(jint a0) const
      {
        return ::stallone::api::datasequence::IDataSequence(env->callObjectMethod(this$, mids$[mid_getNeighbors_062b33a3], a0));
      }

      jint IGrid::getNumberOfGridPoints() const
      {
        return env->callIntMethod(this$, mids$[mid_getNumberOfGridPoints_54c6a179]);
      }

      jint IGrid::getNumberOfGridPoints(jint a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getNumberOfGridPoints_39c7bd23], a0);
      }

      ::stallone::api::doubles::IDoubleArray IGrid::getPoint(const ::stallone::api::ints::IIntArray & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getPoint_d0740085], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray IGrid::getPoint(const JArray< jint > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getPoint_a5c2d8f9], a0.this$));
      }

      ::stallone::api::ints::IIntArray IGrid::nearestMultiIndex(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_nearestMultiIndex_c221c4b5], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace function {
      static PyObject *t_IGrid_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IGrid_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IGrid_getIndex(t_IGrid *self, PyObject *args);
      static PyObject *t_IGrid_getNeighborIndexes(t_IGrid *self, PyObject *arg);
      static PyObject *t_IGrid_getNeighborMultiIndexes(t_IGrid *self, PyObject *arg);
      static PyObject *t_IGrid_getNeighbors(t_IGrid *self, PyObject *arg);
      static PyObject *t_IGrid_getNumberOfGridPoints(t_IGrid *self, PyObject *args);
      static PyObject *t_IGrid_getPoint(t_IGrid *self, PyObject *args);
      static PyObject *t_IGrid_nearestMultiIndex(t_IGrid *self, PyObject *arg);
      static PyObject *t_IGrid_get__numberOfGridPoints(t_IGrid *self, void *data);
      static PyGetSetDef t_IGrid__fields_[] = {
        DECLARE_GET_FIELD(t_IGrid, numberOfGridPoints),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IGrid__methods_[] = {
        DECLARE_METHOD(t_IGrid, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IGrid, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IGrid, getIndex, METH_VARARGS),
        DECLARE_METHOD(t_IGrid, getNeighborIndexes, METH_O),
        DECLARE_METHOD(t_IGrid, getNeighborMultiIndexes, METH_O),
        DECLARE_METHOD(t_IGrid, getNeighbors, METH_O),
        DECLARE_METHOD(t_IGrid, getNumberOfGridPoints, METH_VARARGS),
        DECLARE_METHOD(t_IGrid, getPoint, METH_VARARGS),
        DECLARE_METHOD(t_IGrid, nearestMultiIndex, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IGrid, t_IGrid, ::stallone::api::discretization::IDiscretization, IGrid, abstract_init, 0, 0, t_IGrid__fields_, 0, 0);

      void t_IGrid::install(PyObject *module)
      {
        installType(&PY_TYPE(IGrid), module, "IGrid", 0);
      }

      void t_IGrid::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IGrid).tp_dict, "class_", make_descriptor(IGrid::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IGrid).tp_dict, "wrapfn_", make_descriptor(t_IGrid::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IGrid).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IGrid_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IGrid::initializeClass, 1)))
          return NULL;
        return t_IGrid::wrap_Object(IGrid(((t_IGrid *) arg)->object.this$));
      }
      static PyObject *t_IGrid_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IGrid::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IGrid_getIndex(t_IGrid *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            JArray< jint > a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "[I", &a0))
            {
              OBJ_CALL(result = self->object.getIndex(a0));
              return PyInt_FromLong((long) result);
            }
          }
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getIndex(a0));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "getIndex", args);
        return NULL;
      }

      static PyObject *t_IGrid_getNeighborIndexes(t_IGrid *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.getNeighborIndexes(a0));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getNeighborIndexes", arg);
        return NULL;
      }

      static PyObject *t_IGrid_getNeighborMultiIndexes(t_IGrid *self, PyObject *arg)
      {
        JArray< jint > a0((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArg(arg, "[I", &a0))
        {
          OBJ_CALL(result = self->object.getNeighborMultiIndexes(a0));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getNeighborMultiIndexes", arg);
        return NULL;
      }

      static PyObject *t_IGrid_getNeighbors(t_IGrid *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::datasequence::IDataSequence result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.getNeighbors(a0));
          return ::stallone::api::datasequence::t_IDataSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getNeighbors", arg);
        return NULL;
      }

      static PyObject *t_IGrid_getNumberOfGridPoints(t_IGrid *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            jint result;
            OBJ_CALL(result = self->object.getNumberOfGridPoints());
            return PyInt_FromLong((long) result);
          }
          break;
         case 1:
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getNumberOfGridPoints(a0));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "getNumberOfGridPoints", args);
        return NULL;
      }

      static PyObject *t_IGrid_getPoint(t_IGrid *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getPoint(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            JArray< jint > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[I", &a0))
            {
              OBJ_CALL(result = self->object.getPoint(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "getPoint", args);
        return NULL;
      }

      static PyObject *t_IGrid_nearestMultiIndex(t_IGrid *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.nearestMultiIndex(a0));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "nearestMultiIndex", arg);
        return NULL;
      }

      static PyObject *t_IGrid_get__numberOfGridPoints(t_IGrid *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getNumberOfGridPoints());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/doubles/DoubleUtilities.h"
#include "stallone/api/ints/IIntArray.h"
#include "java/lang/String.h"
#include "stallone/api/doubles/IDoubleList.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/ints/IIntList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace doubles {

      ::java::lang::Class *DoubleUtilities::class$ = NULL;
      jmethodID *DoubleUtilities::mids$ = NULL;
      bool DoubleUtilities::live$ = false;

      jclass DoubleUtilities::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/doubles/DoubleUtilities");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_cleanToNew_32638cb7] = env->getMethodID(cls, "cleanToNew", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_contains_f5db6acd] = env->getMethodID(cls, "contains", "(Lstallone/api/doubles/IDoubleArray;D)Z");
          mids$[mid_containsAll_608d4886] = env->getMethodID(cls, "containsAll", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Z");
          mids$[mid_containsAny_608d4886] = env->getMethodID(cls, "containsAny", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Z");
          mids$[mid_copyInto_023a5a4a] = env->getMethodID(cls, "copyInto", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;II)V");
          mids$[mid_copyInto_1536de50] = env->getMethodID(cls, "copyInto", "(Lstallone/api/doubles/IDoubleArray;IILstallone/api/doubles/IDoubleArray;I)V");
          mids$[mid_copyInto_cf02ba42] = env->getMethodID(cls, "copyInto", "(Lstallone/api/doubles/IDoubleArray;IIIILstallone/api/doubles/IDoubleArray;II)V");
          mids$[mid_count_f5db6ade] = env->getMethodID(cls, "count", "(Lstallone/api/doubles/IDoubleArray;D)I");
          mids$[mid_countRows_608d4895] = env->getMethodID(cls, "countRows", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)I");
          mids$[mid_equal_608d4886] = env->getMethodID(cls, "equal", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Z");
          mids$[mid_equal_cf067855] = env->getMethodID(cls, "equal", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;D)Z");
          mids$[mid_exchange_30de0b4e] = env->getMethodID(cls, "exchange", "(Lstallone/api/doubles/IDoubleArray;II)V");
          mids$[mid_fill_f5db6ac1] = env->getMethodID(cls, "fill", "(Lstallone/api/doubles/IDoubleArray;D)V");
          mids$[mid_findAll_f66faea9] = env->getMethodID(cls, "findAll", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/ints/IIntList;");
          mids$[mid_findAll_1a5a8a08] = env->getMethodID(cls, "findAll", "(Lstallone/api/doubles/IDoubleArray;D)Lstallone/api/ints/IIntList;");
          mids$[mid_findAllRows_a01ac655] = env->getMethodID(cls, "findAllRows", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_findBackwards_f5db6ade] = env->getMethodID(cls, "findBackwards", "(Lstallone/api/doubles/IDoubleArray;D)I");
          mids$[mid_findBackwards_608d4895] = env->getMethodID(cls, "findBackwards", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)I");
          mids$[mid_findBackwards_50da3f57] = env->getMethodID(cls, "findBackwards", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;I)I");
          mids$[mid_findBackwards_0ceafc4a] = env->getMethodID(cls, "findBackwards", "(Lstallone/api/doubles/IDoubleArray;DI)I");
          mids$[mid_findClosest_f5db6ade] = env->getMethodID(cls, "findClosest", "(Lstallone/api/doubles/IDoubleArray;D)I");
          mids$[mid_findForward_f5db6ade] = env->getMethodID(cls, "findForward", "(Lstallone/api/doubles/IDoubleArray;D)I");
          mids$[mid_findForward_0ceafc4a] = env->getMethodID(cls, "findForward", "(Lstallone/api/doubles/IDoubleArray;DI)I");
          mids$[mid_findRowForward_608d4895] = env->getMethodID(cls, "findRowForward", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)I");
          mids$[mid_findRowForward_50da3f57] = env->getMethodID(cls, "findRowForward", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;I)I");
          mids$[mid_findSorted_f5db6ade] = env->getMethodID(cls, "findSorted", "(Lstallone/api/doubles/IDoubleArray;D)I");
          mids$[mid_insertRowToNew_5abbcb2d] = env->getMethodID(cls, "insertRowToNew", "(Lstallone/api/doubles/IDoubleArray;ILstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_insertSorted_3fc00bf5] = env->getMethodID(cls, "insertSorted", "(Lstallone/api/doubles/IDoubleList;D)V");
          mids$[mid_insertSortedFixed_f5db6ade] = env->getMethodID(cls, "insertSortedFixed", "(Lstallone/api/doubles/IDoubleArray;D)I");
          mids$[mid_insertToNew_11e74ae6] = env->getMethodID(cls, "insertToNew", "(Lstallone/api/doubles/IDoubleArray;ID)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_intersectionToNew_76419023] = env->getMethodID(cls, "intersectionToNew", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_isSorted_02530846] = env->getMethodID(cls, "isSorted", "(Lstallone/api/doubles/IDoubleArray;)Z");
          mids$[mid_largeValueIndexes_286a392e] = env->getMethodID(cls, "largeValueIndexes", "(Lstallone/api/doubles/IDoubleArray;D)Lstallone/api/ints/IIntArray;");
          mids$[mid_largeValues_dfd01cbc] = env->getMethodID(cls, "largeValues", "(Lstallone/api/doubles/IDoubleArray;D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_largest_e79ba665] = env->getMethodID(cls, "largest", "(Lstallone/api/doubles/IDoubleArray;I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_largestIndexes_980dd7f7] = env->getMethodID(cls, "largestIndexes", "(Lstallone/api/doubles/IDoubleArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_locateSorted_f5db6ade] = env->getMethodID(cls, "locateSorted", "(Lstallone/api/doubles/IDoubleArray;D)I");
          mids$[mid_max_02530858] = env->getMethodID(cls, "max", "(Lstallone/api/doubles/IDoubleArray;)D");
          mids$[mid_maxInColumn_20d144ba] = env->getMethodID(cls, "maxInColumn", "(Lstallone/api/doubles/IDoubleArray;I)D");
          mids$[mid_maxInLine_20d144ba] = env->getMethodID(cls, "maxInLine", "(Lstallone/api/doubles/IDoubleArray;I)D");
          mids$[mid_maxIndex_02530855] = env->getMethodID(cls, "maxIndex", "(Lstallone/api/doubles/IDoubleArray;)I");
          mids$[mid_merge_76419023] = env->getMethodID(cls, "merge", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_mergeColumns_76419023] = env->getMethodID(cls, "mergeColumns", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_mergeToNew_76419023] = env->getMethodID(cls, "mergeToNew", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_mergeToNew_dfd01cbc] = env->getMethodID(cls, "mergeToNew", "(Lstallone/api/doubles/IDoubleArray;D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_min_02530858] = env->getMethodID(cls, "min", "(Lstallone/api/doubles/IDoubleArray;)D");
          mids$[mid_minIndex_02530855] = env->getMethodID(cls, "minIndex", "(Lstallone/api/doubles/IDoubleArray;)I");
          mids$[mid_mirror_0253084a] = env->getMethodID(cls, "mirror", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_print_0253084a] = env->getMethodID(cls, "print", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_print_e14c9e64] = env->getMethodID(cls, "print", "(Lstallone/api/doubles/IDoubleArray;Ljava/lang/String;)V");
          mids$[mid_print_38fff926] = env->getMethodID(cls, "print", "(Lstallone/api/doubles/IDoubleArray;Ljava/lang/String;Ljava/lang/String;)V");
          mids$[mid_print_2501036c] = env->getMethodID(cls, "print", "(Lstallone/api/doubles/IDoubleArray;Ljava/lang/String;II)V");
          mids$[mid_print_8338042a] = env->getMethodID(cls, "print", "(Lstallone/api/doubles/IDoubleArray;Ljava/lang/String;Ljava/lang/String;II)V");
          mids$[mid_removeIndex_8197bfb5] = env->getMethodID(cls, "removeIndex", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/ints/IIntArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_removeIndexToNew_8197bfb5] = env->getMethodID(cls, "removeIndexToNew", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/ints/IIntArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_removeIndexToNew_e79ba665] = env->getMethodID(cls, "removeIndexToNew", "(Lstallone/api/doubles/IDoubleArray;I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_removeRow_e79ba665] = env->getMethodID(cls, "removeRow", "(Lstallone/api/doubles/IDoubleArray;I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_removeValueToNew_e79ba665] = env->getMethodID(cls, "removeValueToNew", "(Lstallone/api/doubles/IDoubleArray;I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_removeValueToNew_76419023] = env->getMethodID(cls, "removeValueToNew", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_smallValueIndexes_286a392e] = env->getMethodID(cls, "smallValueIndexes", "(Lstallone/api/doubles/IDoubleArray;D)Lstallone/api/ints/IIntArray;");
          mids$[mid_smallValues_dfd01cbc] = env->getMethodID(cls, "smallValues", "(Lstallone/api/doubles/IDoubleArray;D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_smallest_e79ba665] = env->getMethodID(cls, "smallest", "(Lstallone/api/doubles/IDoubleArray;I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_smallestIndexes_980dd7f7] = env->getMethodID(cls, "smallestIndexes", "(Lstallone/api/doubles/IDoubleArray;I)Lstallone/api/ints/IIntArray;");
          mids$[mid_sort_0253084a] = env->getMethodID(cls, "sort", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_sortedIndexes_c221c4b5] = env->getMethodID(cls, "sortedIndexes", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_subColumns_8197bfb5] = env->getMethodID(cls, "subColumns", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/ints/IIntArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_subRows_8197bfb5] = env->getMethodID(cls, "subRows", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/ints/IIntArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_subTable_c5afb567] = env->getMethodID(cls, "subTable", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_subToNew_8197bfb5] = env->getMethodID(cls, "subToNew", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/ints/IIntArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_subToNew_0a1bc13f] = env->getMethodID(cls, "subToNew", "(Lstallone/api/doubles/IDoubleArray;II)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_sum_02530858] = env->getMethodID(cls, "sum", "(Lstallone/api/doubles/IDoubleArray;)D");
          mids$[mid_sumCol_20d144ba] = env->getMethodID(cls, "sumCol", "(Lstallone/api/doubles/IDoubleArray;I)D");
          mids$[mid_sumRow_20d144ba] = env->getMethodID(cls, "sumRow", "(Lstallone/api/doubles/IDoubleArray;I)D");
          mids$[mid_toString_9ad9dfed] = env->getMethodID(cls, "toString", "(Lstallone/api/doubles/IDoubleArray;)Ljava/lang/String;");
          mids$[mid_toString_d56ff963] = env->getMethodID(cls, "toString", "(Lstallone/api/doubles/IDoubleArray;Ljava/lang/String;)Ljava/lang/String;");
          mids$[mid_toString_d3dcb281] = env->getMethodID(cls, "toString", "(Lstallone/api/doubles/IDoubleArray;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
          mids$[mid_toString_ce8f9a33] = env->getMethodID(cls, "toString", "(Lstallone/api/doubles/IDoubleArray;Ljava/lang/String;II)Ljava/lang/String;");
          mids$[mid_toString_800057f5] = env->getMethodID(cls, "toString", "(Lstallone/api/doubles/IDoubleArray;Ljava/lang/String;Ljava/lang/String;II)Ljava/lang/String;");
          mids$[mid_transpose_0253084a] = env->getMethodID(cls, "transpose", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_unionToNew_76419023] = env->getMethodID(cls, "unionToNew", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_within_ce1f9f15] = env->getMethodID(cls, "within", "(Lstallone/api/doubles/IDoubleArray;DD)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_withinIndexes_a57cac13] = env->getMethodID(cls, "withinIndexes", "(Lstallone/api/doubles/IDoubleArray;DD)Lstallone/api/ints/IIntArray;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      DoubleUtilities::DoubleUtilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::cleanToNew(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_cleanToNew_32638cb7], a0.this$));
      }

      jboolean DoubleUtilities::contains(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_contains_f5db6acd], a0.this$, a1);
      }

      jboolean DoubleUtilities::containsAll(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_containsAll_608d4886], a0.this$, a1.this$);
      }

      jboolean DoubleUtilities::containsAny(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_containsAny_608d4886], a0.this$, a1.this$);
      }

      void DoubleUtilities::copyInto(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1, jint a2, jint a3) const
      {
        env->callVoidMethod(this$, mids$[mid_copyInto_023a5a4a], a0.this$, a1.this$, a2, a3);
      }

      void DoubleUtilities::copyInto(const ::stallone::api::doubles::IDoubleArray & a0, jint a1, jint a2, const ::stallone::api::doubles::IDoubleArray & a3, jint a4) const
      {
        env->callVoidMethod(this$, mids$[mid_copyInto_1536de50], a0.this$, a1, a2, a3.this$, a4);
      }

      void DoubleUtilities::copyInto(const ::stallone::api::doubles::IDoubleArray & a0, jint a1, jint a2, jint a3, jint a4, const ::stallone::api::doubles::IDoubleArray & a5, jint a6, jint a7) const
      {
        env->callVoidMethod(this$, mids$[mid_copyInto_cf02ba42], a0.this$, a1, a2, a3, a4, a5.this$, a6, a7);
      }

      jint DoubleUtilities::count(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return env->callIntMethod(this$, mids$[mid_count_f5db6ade], a0.this$, a1);
      }

      jint DoubleUtilities::countRows(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return env->callIntMethod(this$, mids$[mid_countRows_608d4895], a0.this$, a1.this$);
      }

      jboolean DoubleUtilities::equal(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_equal_608d4886], a0.this$, a1.this$);
      }

      jboolean DoubleUtilities::equal(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1, jdouble a2) const
      {
        return env->callBooleanMethod(this$, mids$[mid_equal_cf067855], a0.this$, a1.this$, a2);
      }

      void DoubleUtilities::exchange(const ::stallone::api::doubles::IDoubleArray & a0, jint a1, jint a2) const
      {
        env->callVoidMethod(this$, mids$[mid_exchange_30de0b4e], a0.this$, a1, a2);
      }

      void DoubleUtilities::fill(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        env->callVoidMethod(this$, mids$[mid_fill_f5db6ac1], a0.this$, a1);
      }

      ::stallone::api::ints::IIntList DoubleUtilities::findAll(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::ints::IIntList(env->callObjectMethod(this$, mids$[mid_findAll_f66faea9], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntList DoubleUtilities::findAll(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return ::stallone::api::ints::IIntList(env->callObjectMethod(this$, mids$[mid_findAll_1a5a8a08], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray DoubleUtilities::findAllRows(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_findAllRows_a01ac655], a0.this$, a1.this$));
      }

      jint DoubleUtilities::findBackwards(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findBackwards_f5db6ade], a0.this$, a1);
      }

      jint DoubleUtilities::findBackwards(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findBackwards_608d4895], a0.this$, a1.this$);
      }

      jint DoubleUtilities::findBackwards(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1, jint a2) const
      {
        return env->callIntMethod(this$, mids$[mid_findBackwards_50da3f57], a0.this$, a1.this$, a2);
      }

      jint DoubleUtilities::findBackwards(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1, jint a2) const
      {
        return env->callIntMethod(this$, mids$[mid_findBackwards_0ceafc4a], a0.this$, a1, a2);
      }

      jint DoubleUtilities::findClosest(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findClosest_f5db6ade], a0.this$, a1);
      }

      jint DoubleUtilities::findForward(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findForward_f5db6ade], a0.this$, a1);
      }

      jint DoubleUtilities::findForward(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1, jint a2) const
      {
        return env->callIntMethod(this$, mids$[mid_findForward_0ceafc4a], a0.this$, a1, a2);
      }

      jint DoubleUtilities::findRowForward(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findRowForward_608d4895], a0.this$, a1.this$);
      }

      jint DoubleUtilities::findRowForward(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1, jint a2) const
      {
        return env->callIntMethod(this$, mids$[mid_findRowForward_50da3f57], a0.this$, a1.this$, a2);
      }

      jint DoubleUtilities::findSorted(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return env->callIntMethod(this$, mids$[mid_findSorted_f5db6ade], a0.this$, a1);
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::insertRowToNew(const ::stallone::api::doubles::IDoubleArray & a0, jint a1, const ::stallone::api::doubles::IDoubleArray & a2) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_insertRowToNew_5abbcb2d], a0.this$, a1, a2.this$));
      }

      void DoubleUtilities::insertSorted(const ::stallone::api::doubles::IDoubleList & a0, jdouble a1) const
      {
        env->callVoidMethod(this$, mids$[mid_insertSorted_3fc00bf5], a0.this$, a1);
      }

      jint DoubleUtilities::insertSortedFixed(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return env->callIntMethod(this$, mids$[mid_insertSortedFixed_f5db6ade], a0.this$, a1);
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::insertToNew(const ::stallone::api::doubles::IDoubleArray & a0, jint a1, jdouble a2) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_insertToNew_11e74ae6], a0.this$, a1, a2));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::intersectionToNew(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_intersectionToNew_76419023], a0.this$, a1.this$));
      }

      jboolean DoubleUtilities::isSorted(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callBooleanMethod(this$, mids$[mid_isSorted_02530846], a0.this$);
      }

      ::stallone::api::ints::IIntArray DoubleUtilities::largeValueIndexes(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_largeValueIndexes_286a392e], a0.this$, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::largeValues(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_largeValues_dfd01cbc], a0.this$, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::largest(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_largest_e79ba665], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray DoubleUtilities::largestIndexes(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_largestIndexes_980dd7f7], a0.this$, a1));
      }

      jint DoubleUtilities::locateSorted(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return env->callIntMethod(this$, mids$[mid_locateSorted_f5db6ade], a0.this$, a1);
      }

      jdouble DoubleUtilities::max$(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_max_02530858], a0.this$);
      }

      jdouble DoubleUtilities::maxInColumn(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_maxInColumn_20d144ba], a0.this$, a1);
      }

      jdouble DoubleUtilities::maxInLine(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_maxInLine_20d144ba], a0.this$, a1);
      }

      jint DoubleUtilities::maxIndex(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_maxIndex_02530855], a0.this$);
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::merge(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_merge_76419023], a0.this$, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::mergeColumns(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_mergeColumns_76419023], a0.this$, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::mergeToNew(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_mergeToNew_76419023], a0.this$, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::mergeToNew(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_mergeToNew_dfd01cbc], a0.this$, a1));
      }

      jdouble DoubleUtilities::min$(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_min_02530858], a0.this$);
      }

      jint DoubleUtilities::minIndex(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_minIndex_02530855], a0.this$);
      }

      void DoubleUtilities::mirror(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_mirror_0253084a], a0.this$);
      }

      void DoubleUtilities::print(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_print_0253084a], a0.this$);
      }

      void DoubleUtilities::print(const ::stallone::api::doubles::IDoubleArray & a0, const ::java::lang::String & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_print_e14c9e64], a0.this$, a1.this$);
      }

      void DoubleUtilities::print(const ::stallone::api::doubles::IDoubleArray & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
      {
        env->callVoidMethod(this$, mids$[mid_print_38fff926], a0.this$, a1.this$, a2.this$);
      }

      void DoubleUtilities::print(const ::stallone::api::doubles::IDoubleArray & a0, const ::java::lang::String & a1, jint a2, jint a3) const
      {
        env->callVoidMethod(this$, mids$[mid_print_2501036c], a0.this$, a1.this$, a2, a3);
      }

      void DoubleUtilities::print(const ::stallone::api::doubles::IDoubleArray & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3, jint a4) const
      {
        env->callVoidMethod(this$, mids$[mid_print_8338042a], a0.this$, a1.this$, a2.this$, a3, a4);
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::removeIndex(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_removeIndex_8197bfb5], a0.this$, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::removeIndexToNew(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_removeIndexToNew_8197bfb5], a0.this$, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::removeIndexToNew(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_removeIndexToNew_e79ba665], a0.this$, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::removeRow(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_removeRow_e79ba665], a0.this$, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::removeValueToNew(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_removeValueToNew_e79ba665], a0.this$, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::removeValueToNew(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_removeValueToNew_76419023], a0.this$, a1.this$));
      }

      ::stallone::api::ints::IIntArray DoubleUtilities::smallValueIndexes(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_smallValueIndexes_286a392e], a0.this$, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::smallValues(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_smallValues_dfd01cbc], a0.this$, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::smallest(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_smallest_e79ba665], a0.this$, a1));
      }

      ::stallone::api::ints::IIntArray DoubleUtilities::smallestIndexes(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_smallestIndexes_980dd7f7], a0.this$, a1));
      }

      void DoubleUtilities::sort(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_sort_0253084a], a0.this$);
      }

      ::stallone::api::ints::IIntArray DoubleUtilities::sortedIndexes(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_sortedIndexes_c221c4b5], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::subColumns(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_subColumns_8197bfb5], a0.this$, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::subRows(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_subRows_8197bfb5], a0.this$, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::subTable(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::ints::IIntArray & a1, const ::stallone::api::ints::IIntArray & a2) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_subTable_c5afb567], a0.this$, a1.this$, a2.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::subToNew(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_subToNew_8197bfb5], a0.this$, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::subToNew(const ::stallone::api::doubles::IDoubleArray & a0, jint a1, jint a2) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_subToNew_0a1bc13f], a0.this$, a1, a2));
      }

      jdouble DoubleUtilities::sum(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_sum_02530858], a0.this$);
      }

      jdouble DoubleUtilities::sumCol(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_sumCol_20d144ba], a0.this$, a1);
      }

      jdouble DoubleUtilities::sumRow(const ::stallone::api::doubles::IDoubleArray & a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_sumRow_20d144ba], a0.this$, a1);
      }

      ::java::lang::String DoubleUtilities::toString(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9ad9dfed], a0.this$));
      }

      ::java::lang::String DoubleUtilities::toString(const ::stallone::api::doubles::IDoubleArray & a0, const ::java::lang::String & a1) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d56ff963], a0.this$, a1.this$));
      }

      ::java::lang::String DoubleUtilities::toString(const ::stallone::api::doubles::IDoubleArray & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d3dcb281], a0.this$, a1.this$, a2.this$));
      }

      ::java::lang::String DoubleUtilities::toString(const ::stallone::api::doubles::IDoubleArray & a0, const ::java::lang::String & a1, jint a2, jint a3) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_ce8f9a33], a0.this$, a1.this$, a2, a3));
      }

      ::java::lang::String DoubleUtilities::toString(const ::stallone::api::doubles::IDoubleArray & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3, jint a4) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_800057f5], a0.this$, a1.this$, a2.this$, a3, a4));
      }

      void DoubleUtilities::transpose(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_transpose_0253084a], a0.this$);
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::unionToNew(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_unionToNew_76419023], a0.this$, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleUtilities::within(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1, jdouble a2) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_within_ce1f9f15], a0.this$, a1, a2));
      }

      ::stallone::api::ints::IIntArray DoubleUtilities::withinIndexes(const ::stallone::api::doubles::IDoubleArray & a0, jdouble a1, jdouble a2) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_withinIndexes_a57cac13], a0.this$, a1, a2));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace doubles {
      static PyObject *t_DoubleUtilities_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DoubleUtilities_instance_(PyTypeObject *type, PyObject *arg);
      static int t_DoubleUtilities_init_(t_DoubleUtilities *self, PyObject *args, PyObject *kwds);
      static PyObject *t_DoubleUtilities_cleanToNew(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_contains(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_containsAll(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_containsAny(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_copyInto(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_count(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_countRows(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_equal(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_exchange(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_fill(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_findAll(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_findAllRows(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_findBackwards(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_findClosest(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_findForward(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_findRowForward(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_findSorted(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_insertRowToNew(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_insertSorted(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_insertSortedFixed(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_insertToNew(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_intersectionToNew(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_isSorted(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_largeValueIndexes(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_largeValues(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_largest(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_largestIndexes(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_locateSorted(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_max(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_maxInColumn(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_maxInLine(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_maxIndex(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_merge(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_mergeColumns(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_mergeToNew(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_min(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_minIndex(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_mirror(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_print(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_removeIndex(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_removeIndexToNew(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_removeRow(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_removeValueToNew(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_smallValueIndexes(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_smallValues(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_smallest(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_smallestIndexes(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_sort(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_sortedIndexes(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_subColumns(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_subRows(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_subTable(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_subToNew(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_sum(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_sumCol(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_sumRow(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_toString(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_transpose(t_DoubleUtilities *self, PyObject *arg);
      static PyObject *t_DoubleUtilities_unionToNew(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_within(t_DoubleUtilities *self, PyObject *args);
      static PyObject *t_DoubleUtilities_withinIndexes(t_DoubleUtilities *self, PyObject *args);

      static PyMethodDef t_DoubleUtilities__methods_[] = {
        DECLARE_METHOD(t_DoubleUtilities, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DoubleUtilities, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DoubleUtilities, cleanToNew, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, contains, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, containsAll, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, containsAny, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, copyInto, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, count, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, countRows, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, equal, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, exchange, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, fill, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, findAll, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, findAllRows, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, findBackwards, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, findClosest, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, findForward, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, findRowForward, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, findSorted, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, insertRowToNew, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, insertSorted, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, insertSortedFixed, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, insertToNew, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, intersectionToNew, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, isSorted, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, largeValueIndexes, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, largeValues, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, largest, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, largestIndexes, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, locateSorted, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, max, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, maxInColumn, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, maxInLine, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, maxIndex, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, merge, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, mergeColumns, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, mergeToNew, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, min, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, minIndex, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, mirror, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, print, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, removeIndex, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, removeIndexToNew, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, removeRow, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, removeValueToNew, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, smallValueIndexes, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, smallValues, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, smallest, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, smallestIndexes, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, sort, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, sortedIndexes, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, subColumns, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, subRows, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, subTable, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, subToNew, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, sum, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, sumCol, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, sumRow, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, toString, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, transpose, METH_O),
        DECLARE_METHOD(t_DoubleUtilities, unionToNew, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, within, METH_VARARGS),
        DECLARE_METHOD(t_DoubleUtilities, withinIndexes, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(DoubleUtilities, t_DoubleUtilities, ::java::lang::Object, DoubleUtilities, t_DoubleUtilities_init_, 0, 0, 0, 0, 0);

      void t_DoubleUtilities::install(PyObject *module)
      {
        installType(&PY_TYPE(DoubleUtilities), module, "DoubleUtilities", 0);
      }

      void t_DoubleUtilities::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(DoubleUtilities).tp_dict, "class_", make_descriptor(DoubleUtilities::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(DoubleUtilities).tp_dict, "wrapfn_", make_descriptor(t_DoubleUtilities::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(DoubleUtilities).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_DoubleUtilities_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, DoubleUtilities::initializeClass, 1)))
          return NULL;
        return t_DoubleUtilities::wrap_Object(DoubleUtilities(((t_DoubleUtilities *) arg)->object.this$));
      }
      static PyObject *t_DoubleUtilities_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, DoubleUtilities::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_DoubleUtilities_init_(t_DoubleUtilities *self, PyObject *args, PyObject *kwds)
      {
        DoubleUtilities object((jobject) NULL);

        INT_CALL(object = DoubleUtilities());
        self->object = object;

        return 0;
      }

      static PyObject *t_DoubleUtilities_cleanToNew(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.cleanToNew(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "cleanToNew", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_contains(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        jboolean result;

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.contains(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "contains", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_containsAll(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.containsAll(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "containsAll", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_containsAny(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        jboolean result;

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.containsAny(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "containsAny", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_copyInto(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 4:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            jint a2;
            jint a3;

            if (!parseArgs(args, "kkII", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.copyInto(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }
          }
          break;
         case 5:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jint a1;
            jint a2;
            ::stallone::api::doubles::IDoubleArray a3((jobject) NULL);
            jint a4;

            if (!parseArgs(args, "kIIkI", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.copyInto(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }
          }
          break;
         case 8:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint a4;
            ::stallone::api::doubles::IDoubleArray a5((jobject) NULL);
            jint a6;
            jint a7;

            if (!parseArgs(args, "kIIIIkII", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
            {
              OBJ_CALL(self->object.copyInto(a0, a1, a2, a3, a4, a5, a6, a7));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "copyInto", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_count(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        jint result;

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.count(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "count", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_countRows(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        jint result;

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.countRows(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "countRows", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_equal(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.equal(a0, a1));
              Py_RETURN_BOOL(result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            jdouble a2;
            jboolean result;

            if (!parseArgs(args, "kkD", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.equal(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "equal", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_exchange(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        jint a2;

        if (!parseArgs(args, "kII", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(self->object.exchange(a0, a1, a2));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "exchange", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_fill(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(self->object.fill(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "fill", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_findAll(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            ::stallone::api::ints::IIntList result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findAll(a0, a1));
              return ::stallone::api::ints::t_IIntList::wrap_Object(result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jdouble a1;
            ::stallone::api::ints::IIntList result((jobject) NULL);

            if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findAll(a0, a1));
              return ::stallone::api::ints::t_IIntList::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "findAll", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_findAllRows(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.findAllRows(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "findAllRows", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_findBackwards(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jdouble a1;
            jint result;

            if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findBackwards(a0, a1));
              return PyInt_FromLong((long) result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findBackwards(a0, a1));
              return PyInt_FromLong((long) result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            jint a2;
            jint result;

            if (!parseArgs(args, "kkI", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.findBackwards(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jdouble a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "kDI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.findBackwards(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "findBackwards", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_findClosest(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        jint result;

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.findClosest(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "findClosest", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_findForward(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jdouble a1;
            jint result;

            if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findForward(a0, a1));
              return PyInt_FromLong((long) result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jdouble a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "kDI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.findForward(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "findForward", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_findRowForward(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findRowForward(a0, a1));
              return PyInt_FromLong((long) result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            jint a2;
            jint result;

            if (!parseArgs(args, "kkI", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.findRowForward(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "findRowForward", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_findSorted(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        jint result;

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.findSorted(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "findSorted", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_insertRowToNew(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::doubles::IDoubleArray a2((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kIk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.insertRowToNew(a0, a1, a2));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "insertRowToNew", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_insertSorted(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleList a0((jobject) NULL);
        jdouble a1;

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleList::initializeClass, &a0, &a1))
        {
          OBJ_CALL(self->object.insertSorted(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "insertSorted", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_insertSortedFixed(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        jint result;

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.insertSortedFixed(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "insertSortedFixed", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_insertToNew(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        jdouble a2;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kID", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.insertToNew(a0, a1, a2));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "insertToNew", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_intersectionToNew(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.intersectionToNew(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "intersectionToNew", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_isSorted(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jboolean result;

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.isSorted(a0));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "isSorted", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_largeValueIndexes(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.largeValueIndexes(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "largeValueIndexes", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_largeValues(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.largeValues(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "largeValues", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_largest(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.largest(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "largest", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_largestIndexes(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.largestIndexes(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "largestIndexes", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_locateSorted(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        jint result;

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.locateSorted(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "locateSorted", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_max(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble result;

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.max$(a0));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "max", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_maxInColumn(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        jdouble result;

        if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.maxInColumn(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "maxInColumn", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_maxInLine(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        jdouble result;

        if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.maxInLine(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "maxInLine", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_maxIndex(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.maxIndex(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "maxIndex", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_merge(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.merge(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "merge", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_mergeColumns(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.mergeColumns(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "mergeColumns", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_mergeToNew(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.mergeToNew(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jdouble a1;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.mergeToNew(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "mergeToNew", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_min(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble result;

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.min$(a0));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "min", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_minIndex(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.minIndex(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "minIndex", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_mirror(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.mirror(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "mirror", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_print(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
            {
              OBJ_CALL(self->object.print(a0));
              Py_RETURN_NONE;
            }
          }
          break;
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);

            if (!parseArgs(args, "ks", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.print(a0, a1));
              Py_RETURN_NONE;
            }
          }
          break;
         case 3:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);

            if (!parseArgs(args, "kss", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.print(a0, a1, a2));
              Py_RETURN_NONE;
            }
          }
          break;
         case 4:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;

            if (!parseArgs(args, "ksII", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.print(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }
          }
          break;
         case 5:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jint a3;
            jint a4;

            if (!parseArgs(args, "kssII", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.print(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "print", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_removeIndex(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.removeIndex(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "removeIndex", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_removeIndexToNew(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.removeIndexToNew(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jint a1;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.removeIndexToNew(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "removeIndexToNew", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_removeRow(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.removeRow(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "removeRow", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_removeValueToNew(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jint a1;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.removeValueToNew(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.removeValueToNew(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "removeValueToNew", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_smallValueIndexes(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.smallValueIndexes(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "smallValueIndexes", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_smallValues(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.smallValues(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "smallValues", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_smallest(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.smallest(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "smallest", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_smallestIndexes(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.smallestIndexes(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "smallestIndexes", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_sort(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.sort(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "sort", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_sortedIndexes(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.sortedIndexes(a0));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "sortedIndexes", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_subColumns(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.subColumns(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "subColumns", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_subRows(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.subRows(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "subRows", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_subTable(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::ints::IIntArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray a2((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kkk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.subTable(a0, a1, a2));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "subTable", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_subToNew(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subToNew(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            jint a1;
            jint a2;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "kII", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.subToNew(a0, a1, a2));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "subToNew", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_sum(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble result;

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.sum(a0));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "sum", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_sumCol(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        jdouble result;

        if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.sumCol(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "sumCol", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_sumRow(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        jdouble result;

        if (!parseArgs(args, "kI", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.sumRow(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "sumRow", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_toString(t_DoubleUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }
          }
          break;
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "ks", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.toString(a0, a1));
              return j2p(result);
            }
          }
          break;
         case 3:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "kss", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.toString(a0, a1, a2));
              return j2p(result);
            }
          }
          break;
         case 4:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "ksII", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.toString(a0, a1, a2, a3));
              return j2p(result);
            }
          }
          break;
         case 5:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jint a3;
            jint a4;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "kssII", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.toString(a0, a1, a2, a3, a4));
              return j2p(result);
            }
          }
        }

        return callSuper(&PY_TYPE(DoubleUtilities), (PyObject *) self, "toString", args, 2);
      }

      static PyObject *t_DoubleUtilities_transpose(t_DoubleUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.transpose(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "transpose", arg);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_unionToNew(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.unionToNew(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "unionToNew", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_within(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        jdouble a2;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kDD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.within(a0, a1, a2));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "within", args);
        return NULL;
      }

      static PyObject *t_DoubleUtilities_withinIndexes(t_DoubleUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble a1;
        jdouble a2;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kDD", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.withinIndexes(a0, a1, a2));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "withinIndexes", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/ints/Ints.h"
#include "stallone/api/ints/IntFactory.h"
#include "stallone/api/ints/IntUtilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace ints {

      ::java::lang::Class *Ints::class$ = NULL;
      jmethodID *Ints::mids$ = NULL;
      bool Ints::live$ = false;
      ::stallone::api::ints::IntFactory *Ints::create = NULL;
      ::stallone::api::ints::IntUtilities *Ints::util = NULL;

      jclass Ints::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/ints/Ints");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          cls = (jclass) class$->this$;

          create = new ::stallone::api::ints::IntFactory(env->getStaticObjectField(cls, "create", "Lstallone/api/ints/IntFactory;"));
          util = new ::stallone::api::ints::IntUtilities(env->getStaticObjectField(cls, "util", "Lstallone/api/ints/IntUtilities;"));
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Ints::Ints() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace ints {
      static PyObject *t_Ints_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Ints_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Ints_init_(t_Ints *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Ints__methods_[] = {
        DECLARE_METHOD(t_Ints, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Ints, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Ints, t_Ints, ::java::lang::Object, Ints, t_Ints_init_, 0, 0, 0, 0, 0);

      void t_Ints::install(PyObject *module)
      {
        installType(&PY_TYPE(Ints), module, "Ints", 0);
      }

      void t_Ints::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Ints).tp_dict, "class_", make_descriptor(Ints::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Ints).tp_dict, "wrapfn_", make_descriptor(t_Ints::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Ints).tp_dict, "boxfn_", make_descriptor(boxObject));
        env->getClass(Ints::initializeClass);
        PyDict_SetItemString(PY_TYPE(Ints).tp_dict, "create", make_descriptor(::stallone::api::ints::t_IntFactory::wrap_Object(*Ints::create)));
        PyDict_SetItemString(PY_TYPE(Ints).tp_dict, "util", make_descriptor(::stallone::api::ints::t_IntUtilities::wrap_Object(*Ints::util)));
      }

      static PyObject *t_Ints_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Ints::initializeClass, 1)))
          return NULL;
        return t_Ints::wrap_Object(Ints(((t_Ints *) arg)->object.this$));
      }
      static PyObject *t_Ints_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Ints::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Ints_init_(t_Ints *self, PyObject *args, PyObject *kwds)
      {
        Ints object((jobject) NULL);

        INT_CALL(object = Ints());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/doubles/Doubles.h"
#include "stallone/api/doubles/DoubleUtilities.h"
#include "stallone/api/doubles/DoubleFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace doubles {

      ::java::lang::Class *Doubles::class$ = NULL;
      jmethodID *Doubles::mids$ = NULL;
      bool Doubles::live$ = false;
      ::stallone::api::doubles::DoubleFactory *Doubles::create = NULL;
      ::stallone::api::doubles::DoubleUtilities *Doubles::util = NULL;

      jclass Doubles::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/doubles/Doubles");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          cls = (jclass) class$->this$;

          create = new ::stallone::api::doubles::DoubleFactory(env->getStaticObjectField(cls, "create", "Lstallone/api/doubles/DoubleFactory;"));
          util = new ::stallone::api::doubles::DoubleUtilities(env->getStaticObjectField(cls, "util", "Lstallone/api/doubles/DoubleUtilities;"));
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Doubles::Doubles() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace doubles {
      static PyObject *t_Doubles_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Doubles_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Doubles_init_(t_Doubles *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Doubles__methods_[] = {
        DECLARE_METHOD(t_Doubles, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Doubles, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Doubles, t_Doubles, ::java::lang::Object, Doubles, t_Doubles_init_, 0, 0, 0, 0, 0);

      void t_Doubles::install(PyObject *module)
      {
        installType(&PY_TYPE(Doubles), module, "Doubles", 0);
      }

      void t_Doubles::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Doubles).tp_dict, "class_", make_descriptor(Doubles::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Doubles).tp_dict, "wrapfn_", make_descriptor(t_Doubles::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Doubles).tp_dict, "boxfn_", make_descriptor(boxObject));
        env->getClass(Doubles::initializeClass);
        PyDict_SetItemString(PY_TYPE(Doubles).tp_dict, "create", make_descriptor(::stallone::api::doubles::t_DoubleFactory::wrap_Object(*Doubles::create)));
        PyDict_SetItemString(PY_TYPE(Doubles).tp_dict, "util", make_descriptor(::stallone::api::doubles::t_DoubleUtilities::wrap_Object(*Doubles::util)));
      }

      static PyObject *t_Doubles_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Doubles::initializeClass, 1)))
          return NULL;
        return t_Doubles::wrap_Object(Doubles(((t_Doubles *) arg)->object.this$));
      }
      static PyObject *t_Doubles_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Doubles::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Doubles_init_(t_Doubles *self, PyObject *args, PyObject *kwds)
      {
        Doubles object((jobject) NULL);

        INT_CALL(object = Doubles());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/mc/IDynamicalExpectationsSpectral.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace mc {

      ::java::lang::Class *IDynamicalExpectationsSpectral::class$ = NULL;
      jmethodID *IDynamicalExpectationsSpectral::mids$ = NULL;
      bool IDynamicalExpectationsSpectral::live$ = false;

      jclass IDynamicalExpectationsSpectral::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/mc/IDynamicalExpectationsSpectral");

          mids$ = new jmethodID[max_mid];
          mids$[mid_calculateAutocorrelation_0253084a] = env->getMethodID(cls, "calculateAutocorrelation", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_calculateCorrelation_608d488a] = env->getMethodID(cls, "calculateCorrelation", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_calculatePerturbationExpectation_608d488a] = env->getMethodID(cls, "calculatePerturbationExpectation", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_getAmplitudes_1d53e353] = env->getMethodID(cls, "getAmplitudes", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getTimescales_1d53e353] = env->getMethodID(cls, "getTimescales", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getValue_5d1c7657] = env->getMethodID(cls, "getValue", "(D)D");
          mids$[mid_setK_0253084a] = env->getMethodID(cls, "setK", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_setStationaryDistribution_0253084a] = env->getMethodID(cls, "setStationaryDistribution", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_setT_0253084a] = env->getMethodID(cls, "setT", "(Lstallone/api/doubles/IDoubleArray;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void IDynamicalExpectationsSpectral::calculateAutocorrelation(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_calculateAutocorrelation_0253084a], a0.this$);
      }

      void IDynamicalExpectationsSpectral::calculateCorrelation(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_calculateCorrelation_608d488a], a0.this$, a1.this$);
      }

      void IDynamicalExpectationsSpectral::calculatePerturbationExpectation(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_calculatePerturbationExpectation_608d488a], a0.this$, a1.this$);
      }

      ::stallone::api::doubles::IDoubleArray IDynamicalExpectationsSpectral::getAmplitudes() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getAmplitudes_1d53e353]));
      }

      ::stallone::api::doubles::IDoubleArray IDynamicalExpectationsSpectral::getTimescales() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getTimescales_1d53e353]));
      }

      jdouble IDynamicalExpectationsSpectral::getValue(jdouble a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_getValue_5d1c7657], a0);
      }

      void IDynamicalExpectationsSpectral::setK(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setK_0253084a], a0.this$);
      }

      void IDynamicalExpectationsSpectral::setStationaryDistribution(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setStationaryDistribution_0253084a], a0.this$);
      }

      void IDynamicalExpectationsSpectral::setT(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setT_0253084a], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace mc {
      static PyObject *t_IDynamicalExpectationsSpectral_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDynamicalExpectationsSpectral_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDynamicalExpectationsSpectral_calculateAutocorrelation(t_IDynamicalExpectationsSpectral *self, PyObject *arg);
      static PyObject *t_IDynamicalExpectationsSpectral_calculateCorrelation(t_IDynamicalExpectationsSpectral *self, PyObject *args);
      static PyObject *t_IDynamicalExpectationsSpectral_calculatePerturbationExpectation(t_IDynamicalExpectationsSpectral *self, PyObject *args);
      static PyObject *t_IDynamicalExpectationsSpectral_getAmplitudes(t_IDynamicalExpectationsSpectral *self);
      static PyObject *t_IDynamicalExpectationsSpectral_getTimescales(t_IDynamicalExpectationsSpectral *self);
      static PyObject *t_IDynamicalExpectationsSpectral_getValue(t_IDynamicalExpectationsSpectral *self, PyObject *arg);
      static PyObject *t_IDynamicalExpectationsSpectral_setK(t_IDynamicalExpectationsSpectral *self, PyObject *arg);
      static PyObject *t_IDynamicalExpectationsSpectral_setStationaryDistribution(t_IDynamicalExpectationsSpectral *self, PyObject *arg);
      static PyObject *t_IDynamicalExpectationsSpectral_setT(t_IDynamicalExpectationsSpectral *self, PyObject *arg);
      static PyObject *t_IDynamicalExpectationsSpectral_get__amplitudes(t_IDynamicalExpectationsSpectral *self, void *data);
      static int t_IDynamicalExpectationsSpectral_set__k(t_IDynamicalExpectationsSpectral *self, PyObject *arg, void *data);
      static int t_IDynamicalExpectationsSpectral_set__stationaryDistribution(t_IDynamicalExpectationsSpectral *self, PyObject *arg, void *data);
      static int t_IDynamicalExpectationsSpectral_set__t(t_IDynamicalExpectationsSpectral *self, PyObject *arg, void *data);
      static PyObject *t_IDynamicalExpectationsSpectral_get__timescales(t_IDynamicalExpectationsSpectral *self, void *data);
      static PyGetSetDef t_IDynamicalExpectationsSpectral__fields_[] = {
        DECLARE_GET_FIELD(t_IDynamicalExpectationsSpectral, amplitudes),
        DECLARE_SET_FIELD(t_IDynamicalExpectationsSpectral, k),
        DECLARE_SET_FIELD(t_IDynamicalExpectationsSpectral, stationaryDistribution),
        DECLARE_SET_FIELD(t_IDynamicalExpectationsSpectral, t),
        DECLARE_GET_FIELD(t_IDynamicalExpectationsSpectral, timescales),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IDynamicalExpectationsSpectral__methods_[] = {
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, calculateAutocorrelation, METH_O),
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, calculateCorrelation, METH_VARARGS),
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, calculatePerturbationExpectation, METH_VARARGS),
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, getAmplitudes, METH_NOARGS),
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, getTimescales, METH_NOARGS),
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, getValue, METH_O),
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, setK, METH_O),
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, setStationaryDistribution, METH_O),
        DECLARE_METHOD(t_IDynamicalExpectationsSpectral, setT, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IDynamicalExpectationsSpectral, t_IDynamicalExpectationsSpectral, ::java::lang::Object, IDynamicalExpectationsSpectral, abstract_init, 0, 0, t_IDynamicalExpectationsSpectral__fields_, 0, 0);

      void t_IDynamicalExpectationsSpectral::install(PyObject *module)
      {
        installType(&PY_TYPE(IDynamicalExpectationsSpectral), module, "IDynamicalExpectationsSpectral", 0);
      }

      void t_IDynamicalExpectationsSpectral::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IDynamicalExpectationsSpectral).tp_dict, "class_", make_descriptor(IDynamicalExpectationsSpectral::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IDynamicalExpectationsSpectral).tp_dict, "wrapfn_", make_descriptor(t_IDynamicalExpectationsSpectral::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IDynamicalExpectationsSpectral).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IDynamicalExpectationsSpectral_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IDynamicalExpectationsSpectral::initializeClass, 1)))
          return NULL;
        return t_IDynamicalExpectationsSpectral::wrap_Object(IDynamicalExpectationsSpectral(((t_IDynamicalExpectationsSpectral *) arg)->object.this$));
      }
      static PyObject *t_IDynamicalExpectationsSpectral_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IDynamicalExpectationsSpectral::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IDynamicalExpectationsSpectral_calculateAutocorrelation(t_IDynamicalExpectationsSpectral *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.calculateAutocorrelation(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "calculateAutocorrelation", arg);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectationsSpectral_calculateCorrelation(t_IDynamicalExpectationsSpectral *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(self->object.calculateCorrelation(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "calculateCorrelation", args);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectationsSpectral_calculatePerturbationExpectation(t_IDynamicalExpectationsSpectral *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(self->object.calculatePerturbationExpectation(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "calculatePerturbationExpectation", args);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectationsSpectral_getAmplitudes(t_IDynamicalExpectationsSpectral *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getAmplitudes());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_IDynamicalExpectationsSpectral_getTimescales(t_IDynamicalExpectationsSpectral *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getTimescales());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_IDynamicalExpectationsSpectral_getValue(t_IDynamicalExpectationsSpectral *self, PyObject *arg)
      {
        jdouble a0;
        jdouble result;

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(result = self->object.getValue(a0));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getValue", arg);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectationsSpectral_setK(t_IDynamicalExpectationsSpectral *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setK(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setK", arg);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectationsSpectral_setStationaryDistribution(t_IDynamicalExpectationsSpectral *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setStationaryDistribution(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setStationaryDistribution", arg);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectationsSpectral_setT(t_IDynamicalExpectationsSpectral *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setT(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setT", arg);
        return NULL;
      }

      static PyObject *t_IDynamicalExpectationsSpectral_get__amplitudes(t_IDynamicalExpectationsSpectral *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getAmplitudes());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }

      static int t_IDynamicalExpectationsSpectral_set__k(t_IDynamicalExpectationsSpectral *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setK(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "k", arg);
        return -1;
      }

      static int t_IDynamicalExpectationsSpectral_set__stationaryDistribution(t_IDynamicalExpectationsSpectral *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setStationaryDistribution(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "stationaryDistribution", arg);
        return -1;
      }

      static int t_IDynamicalExpectationsSpectral_set__t(t_IDynamicalExpectationsSpectral *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setT(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "t", arg);
        return -1;
      }

      static PyObject *t_IDynamicalExpectationsSpectral_get__timescales(t_IDynamicalExpectationsSpectral *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getTimescales());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/mc/IMarkovPropagator.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace mc {

      ::java::lang::Class *IMarkovPropagator::class$ = NULL;
      jmethodID *IMarkovPropagator::mids$ = NULL;
      bool IMarkovPropagator::live$ = false;

      jclass IMarkovPropagator::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/mc/IMarkovPropagator");

          mids$ = new jmethodID[max_mid];
          mids$[mid_propagate_e50533dc] = env->getMethodID(cls, "propagate", "(D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_set_0253084a] = env->getMethodID(cls, "set", "(Lstallone/api/doubles/IDoubleArray;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::stallone::api::doubles::IDoubleArray IMarkovPropagator::propagate(jdouble a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_propagate_e50533dc], a0));
      }

      void IMarkovPropagator::set(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_set_0253084a], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace mc {
      static PyObject *t_IMarkovPropagator_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IMarkovPropagator_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IMarkovPropagator_propagate(t_IMarkovPropagator *self, PyObject *arg);
      static PyObject *t_IMarkovPropagator_set(t_IMarkovPropagator *self, PyObject *arg);

      static PyMethodDef t_IMarkovPropagator__methods_[] = {
        DECLARE_METHOD(t_IMarkovPropagator, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IMarkovPropagator, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IMarkovPropagator, propagate, METH_O),
        DECLARE_METHOD(t_IMarkovPropagator, set, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IMarkovPropagator, t_IMarkovPropagator, ::java::lang::Object, IMarkovPropagator, abstract_init, 0, 0, 0, 0, 0);

      void t_IMarkovPropagator::install(PyObject *module)
      {
        installType(&PY_TYPE(IMarkovPropagator), module, "IMarkovPropagator", 0);
      }

      void t_IMarkovPropagator::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IMarkovPropagator).tp_dict, "class_", make_descriptor(IMarkovPropagator::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IMarkovPropagator).tp_dict, "wrapfn_", make_descriptor(t_IMarkovPropagator::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IMarkovPropagator).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IMarkovPropagator_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IMarkovPropagator::initializeClass, 1)))
          return NULL;
        return t_IMarkovPropagator::wrap_Object(IMarkovPropagator(((t_IMarkovPropagator *) arg)->object.this$));
      }
      static PyObject *t_IMarkovPropagator_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IMarkovPropagator::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IMarkovPropagator_propagate(t_IMarkovPropagator *self, PyObject *arg)
      {
        jdouble a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(result = self->object.propagate(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "propagate", arg);
        return NULL;
      }

      static PyObject *t_IMarkovPropagator_set(t_IMarkovPropagator *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.set(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "set", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Comparable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *String::class$ = NULL;
    jmethodID *String::mids$ = NULL;
    bool String::live$ = false;

    jclass String::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/String");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_700e23d6] = env->getMethodID(cls, "<init>", "([C)V");
        mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
        mids$[mid_init$_44634788] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuffer;)V");
        mids$[mid_init$_9f94ae34] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuilder;)V");
        mids$[mid_init$_b8354c43] = env->getMethodID(cls, "<init>", "([BI)V");
        mids$[mid_init$_1a0c6fd5] = env->getMethodID(cls, "<init>", "([BLjava/lang/String;)V");
        mids$[mid_init$_6f0bb356] = env->getMethodID(cls, "<init>", "([CII)V");
        mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
        mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
        mids$[mid_init$_96a25f0b] = env->getMethodID(cls, "<init>", "([BIII)V");
        mids$[mid_init$_5ab96441] = env->getMethodID(cls, "<init>", "([BIILjava/lang/String;)V");
        mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
        mids$[mid_codePointAt_39c7bd23] = env->getMethodID(cls, "codePointAt", "(I)I");
        mids$[mid_codePointBefore_39c7bd23] = env->getMethodID(cls, "codePointBefore", "(I)I");
        mids$[mid_codePointCount_d8d154b9] = env->getMethodID(cls, "codePointCount", "(II)I");
        mids$[mid_compareTo_5fdc3f57] = env->getMethodID(cls, "compareTo", "(Ljava/lang/String;)I");
        mids$[mid_compareToIgnoreCase_5fdc3f57] = env->getMethodID(cls, "compareToIgnoreCase", "(Ljava/lang/String;)I");
        mids$[mid_concat_97a5258f] = env->getMethodID(cls, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_contains_a8afc646] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_a8afc646] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_44634784] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/StringBuffer;)Z");
        mids$[mid_copyValueOf_c783d655] = env->getStaticMethodID(cls, "copyValueOf", "([C)Ljava/lang/String;");
        mids$[mid_copyValueOf_ddb60785] = env->getStaticMethodID(cls, "copyValueOf", "([CII)Ljava/lang/String;");
        mids$[mid_endsWith_5fdc3f44] = env->getMethodID(cls, "endsWith", "(Ljava/lang/String;)Z");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equalsIgnoreCase_5fdc3f44] = env->getMethodID(cls, "equalsIgnoreCase", "(Ljava/lang/String;)Z");
        mids$[mid_format_0fb26e3b] = env->getStaticMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_getBytes_dab10e7e] = env->getMethodID(cls, "getBytes", "()[B");
        mids$[mid_getBytes_94a731a4] = env->getMethodID(cls, "getBytes", "(Ljava/lang/String;)[B");
        mids$[mid_getBytes_fdf97d27] = env->getMethodID(cls, "getBytes", "(II[BI)V");
        mids$[mid_getChars_06518f84] = env->getMethodID(cls, "getChars", "(II[CI)V");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_indexOf_39c7bd23] = env->getMethodID(cls, "indexOf", "(I)I");
        mids$[mid_indexOf_5fdc3f57] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;)I");
        mids$[mid_indexOf_6e53ccd9] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;I)I");
        mids$[mid_indexOf_d8d154b9] = env->getMethodID(cls, "indexOf", "(II)I");
        mids$[mid_intern_14c7b5c5] = env->getMethodID(cls, "intern", "()Ljava/lang/String;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_lastIndexOf_39c7bd23] = env->getMethodID(cls, "lastIndexOf", "(I)I");
        mids$[mid_lastIndexOf_5fdc3f57] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;)I");
        mids$[mid_lastIndexOf_d8d154b9] = env->getMethodID(cls, "lastIndexOf", "(II)I");
        mids$[mid_lastIndexOf_6e53ccd9] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;I)I");
        mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
        mids$[mid_matches_5fdc3f44] = env->getMethodID(cls, "matches", "(Ljava/lang/String;)Z");
        mids$[mid_offsetByCodePoints_d8d154b9] = env->getMethodID(cls, "offsetByCodePoints", "(II)I");
        mids$[mid_regionMatches_344d8cb6] = env->getMethodID(cls, "regionMatches", "(ILjava/lang/String;II)Z");
        mids$[mid_regionMatches_35f2560d] = env->getMethodID(cls, "regionMatches", "(ZILjava/lang/String;II)Z");
        mids$[mid_replace_f1c62e0d] = env->getMethodID(cls, "replace", "(CC)Ljava/lang/String;");
        mids$[mid_replace_103b702d] = env->getMethodID(cls, "replace", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;");
        mids$[mid_replaceAll_aacea7e9] = env->getMethodID(cls, "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_replaceFirst_aacea7e9] = env->getMethodID(cls, "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_split_1f6a174f] = env->getMethodID(cls, "split", "(Ljava/lang/String;)[Ljava/lang/String;");
        mids$[mid_split_3384fe85] = env->getMethodID(cls, "split", "(Ljava/lang/String;I)[Ljava/lang/String;");
        mids$[mid_startsWith_5fdc3f44] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;)Z");
        mids$[mid_startsWith_6e53ccca] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;I)Z");
        mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
        mids$[mid_substring_141401b3] = env->getMethodID(cls, "substring", "(I)Ljava/lang/String;");
        mids$[mid_substring_f9118fe5] = env->getMethodID(cls, "substring", "(II)Ljava/lang/String;");
        mids$[mid_toCharArray_dab10e7f] = env->getMethodID(cls, "toCharArray", "()[C");
        mids$[mid_toLowerCase_14c7b5c5] = env->getMethodID(cls, "toLowerCase", "()Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_14c7b5c5] = env->getMethodID(cls, "toUpperCase", "()Ljava/lang/String;");
        mids$[mid_trim_14c7b5c5] = env->getMethodID(cls, "trim", "()Ljava/lang/String;");
        mids$[mid_valueOf_445a175e] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_c9db4eed] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_valueOf_5ded254a] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_1b4624f8] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_141401b3] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/String;");
        mids$[mid_valueOf_c783d655] = env->getStaticMethodID(cls, "valueOf", "([C)Ljava/lang/String;");
        mids$[mid_valueOf_7611a535] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/String;");
        mids$[mid_valueOf_3e02f30e] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/String;");
        mids$[mid_valueOf_ddb60785] = env->getStaticMethodID(cls, "valueOf", "([CII)Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    String::String() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    String::String(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_700e23d6, a0.this$)) {}

    String::String(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

    String::String(const ::java::lang::StringBuffer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_44634788, a0.this$)) {}

    String::String(const ::java::lang::StringBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9f94ae34, a0.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8354c43, a0.this$, a1)) {}

    String::String(const JArray< jbyte > & a0, const String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1a0c6fd5, a0.this$, a1.this$)) {}

    String::String(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f0bb356, a0.this$, a1, a2)) {}

    String::String(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_96a25f0b, a0.this$, a1, a2, a3)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, const String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ab96441, a0.this$, a1, a2, a3.this$)) {}

    jchar String::charAt(jint a0) const
    {
      return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
    }

    jint String::codePointAt(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointAt_39c7bd23], a0);
    }

    jint String::codePointBefore(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointBefore_39c7bd23], a0);
    }

    jint String::codePointCount(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointCount_d8d154b9], a0, a1);
    }

    jint String::compareTo(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_5fdc3f57], a0.this$);
    }

    jint String::compareToIgnoreCase(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareToIgnoreCase_5fdc3f57], a0.this$);
    }

    String String::concat(const String & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_concat_97a5258f], a0.this$));
    }

    jboolean String::contains(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_a8afc646], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_a8afc646], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::StringBuffer & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_44634784], a0.this$);
    }

    String String::copyValueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_c783d655], a0.this$));
    }

    String String::copyValueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_ddb60785], a0.this$, a1, a2));
    }

    jboolean String::endsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_endsWith_5fdc3f44], a0.this$);
    }

    jboolean String::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean String::equalsIgnoreCase(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equalsIgnoreCase_5fdc3f44], a0.this$);
    }

    String String::format(const String & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_0fb26e3b], a0.this$, a1.this$));
    }

    JArray< jbyte > String::getBytes() const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_dab10e7e]));
    }

    JArray< jbyte > String::getBytes(const String & a0) const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_94a731a4], a0.this$));
    }

    void String::getBytes(jint a0, jint a1, const JArray< jbyte > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getBytes_fdf97d27], a0, a1, a2.this$, a3);
    }

    void String::getChars(jint a0, jint a1, const JArray< jchar > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getChars_06518f84], a0, a1, a2.this$, a3);
    }

    jint String::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint String::indexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_39c7bd23], a0);
    }

    jint String::indexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_5fdc3f57], a0.this$);
    }

    jint String::indexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_6e53ccd9], a0.this$, a1);
    }

    jint String::indexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_d8d154b9], a0, a1);
    }

    String String::intern() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_intern_14c7b5c5]));
    }

    jboolean String::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    jint String::lastIndexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_39c7bd23], a0);
    }

    jint String::lastIndexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_5fdc3f57], a0.this$);
    }

    jint String::lastIndexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_d8d154b9], a0, a1);
    }

    jint String::lastIndexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_6e53ccd9], a0.this$, a1);
    }

    jint String::length() const
    {
      return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
    }

    jboolean String::matches(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_matches_5fdc3f44], a0.this$);
    }

    jint String::offsetByCodePoints(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_d8d154b9], a0, a1);
    }

    jboolean String::regionMatches(jint a0, const String & a1, jint a2, jint a3) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_344d8cb6], a0, a1.this$, a2, a3);
    }

    jboolean String::regionMatches(jboolean a0, jint a1, const String & a2, jint a3, jint a4) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_35f2560d], a0, a1, a2.this$, a3, a4);
    }

    String String::replace(jchar a0, jchar a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_f1c62e0d], a0, a1));
    }

    String String::replace(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_103b702d], a0.this$, a1.this$));
    }

    String String::replaceAll(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceAll_aacea7e9], a0.this$, a1.this$));
    }

    String String::replaceFirst(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceFirst_aacea7e9], a0.this$, a1.this$));
    }

    JArray< String > String::split(const String & a0) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_1f6a174f], a0.this$));
    }

    JArray< String > String::split(const String & a0, jint a1) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_3384fe85], a0.this$, a1));
    }

    jboolean String::startsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_5fdc3f44], a0.this$);
    }

    jboolean String::startsWith(const String & a0, jint a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_6e53ccca], a0.this$, a1);
    }

    ::java::lang::CharSequence String::subSequence(jint a0, jint a1) const
    {
      return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
    }

    String String::substring(jint a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_141401b3], a0));
    }

    String String::substring(jint a0, jint a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_f9118fe5], a0, a1));
    }

    JArray< jchar > String::toCharArray() const
    {
      return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_dab10e7f]));
    }

    String String::toLowerCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_14c7b5c5]));
    }

    String String::toString() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    String String::toUpperCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_14c7b5c5]));
    }

    String String::trim() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_trim_14c7b5c5]));
    }

    String String::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_445a175e], a0));
    }

    String String::valueOf(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c9db4eed], a0.this$));
    }

    String String::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5ded254a], a0));
    }

    String String::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1b4624f8], a0));
    }

    String String::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_141401b3], a0));
    }

    String String::valueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c783d655], a0.this$));
    }

    String String::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7611a535], a0));
    }

    String String::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3e02f30e], a0));
    }

    String String::valueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ddb60785], a0.this$, a1, a2));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg);
    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds);
    static PyObject *t_String_charAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointCount(t_String *self, PyObject *args);
    static PyObject *t_String_compareTo(t_String *self, PyObject *arg);
    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_concat(t_String *self, PyObject *arg);
    static PyObject *t_String_contains(t_String *self, PyObject *arg);
    static PyObject *t_String_contentEquals(t_String *self, PyObject *args);
    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_endsWith(t_String *self, PyObject *arg);
    static PyObject *t_String_equals(t_String *self, PyObject *args);
    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_format(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_getBytes(t_String *self, PyObject *args);
    static PyObject *t_String_getChars(t_String *self, PyObject *args);
    static PyObject *t_String_hashCode(t_String *self, PyObject *args);
    static PyObject *t_String_indexOf(t_String *self, PyObject *args);
    static PyObject *t_String_intern(t_String *self);
    static PyObject *t_String_isEmpty(t_String *self);
    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args);
    static PyObject *t_String_length(t_String *self);
    static PyObject *t_String_matches(t_String *self, PyObject *arg);
    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args);
    static PyObject *t_String_regionMatches(t_String *self, PyObject *args);
    static PyObject *t_String_replace(t_String *self, PyObject *args);
    static PyObject *t_String_replaceAll(t_String *self, PyObject *args);
    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args);
    static PyObject *t_String_split(t_String *self, PyObject *args);
    static PyObject *t_String_startsWith(t_String *self, PyObject *args);
    static PyObject *t_String_subSequence(t_String *self, PyObject *args);
    static PyObject *t_String_substring(t_String *self, PyObject *args);
    static PyObject *t_String_toCharArray(t_String *self);
    static PyObject *t_String_toLowerCase(t_String *self);
    static PyObject *t_String_toString(t_String *self, PyObject *args);
    static PyObject *t_String_toUpperCase(t_String *self);
    static PyObject *t_String_trim(t_String *self);
    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_get__bytes(t_String *self, void *data);
    static PyObject *t_String_get__empty(t_String *self, void *data);
    static PyGetSetDef t_String__fields_[] = {
      DECLARE_GET_FIELD(t_String, bytes),
      DECLARE_GET_FIELD(t_String, empty),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_String__methods_[] = {
      DECLARE_METHOD(t_String, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, charAt, METH_O),
      DECLARE_METHOD(t_String, codePointAt, METH_O),
      DECLARE_METHOD(t_String, codePointBefore, METH_O),
      DECLARE_METHOD(t_String, codePointCount, METH_VARARGS),
      DECLARE_METHOD(t_String, compareTo, METH_O),
      DECLARE_METHOD(t_String, compareToIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, concat, METH_O),
      DECLARE_METHOD(t_String, contains, METH_O),
      DECLARE_METHOD(t_String, contentEquals, METH_VARARGS),
      DECLARE_METHOD(t_String, copyValueOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, endsWith, METH_O),
      DECLARE_METHOD(t_String, equals, METH_VARARGS),
      DECLARE_METHOD(t_String, equalsIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, format, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, getBytes, METH_VARARGS),
      DECLARE_METHOD(t_String, getChars, METH_VARARGS),
      DECLARE_METHOD(t_String, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_String, indexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, intern, METH_NOARGS),
      DECLARE_METHOD(t_String, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_String, lastIndexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, length, METH_NOARGS),
      DECLARE_METHOD(t_String, matches, METH_O),
      DECLARE_METHOD(t_String, offsetByCodePoints, METH_VARARGS),
      DECLARE_METHOD(t_String, regionMatches, METH_VARARGS),
      DECLARE_METHOD(t_String, replace, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceAll, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceFirst, METH_VARARGS),
      DECLARE_METHOD(t_String, split, METH_VARARGS),
      DECLARE_METHOD(t_String, startsWith, METH_VARARGS),
      DECLARE_METHOD(t_String, subSequence, METH_VARARGS),
      DECLARE_METHOD(t_String, substring, METH_VARARGS),
      DECLARE_METHOD(t_String, toCharArray, METH_NOARGS),
      DECLARE_METHOD(t_String, toLowerCase, METH_NOARGS),
      DECLARE_METHOD(t_String, toString, METH_VARARGS),
      DECLARE_METHOD(t_String, toUpperCase, METH_NOARGS),
      DECLARE_METHOD(t_String, trim, METH_NOARGS),
      DECLARE_METHOD(t_String, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(String, t_String, ::java::lang::Object, String, t_String_init_, 0, 0, t_String__fields_, 0, 0);

    void t_String::install(PyObject *module)
    {
      installType(&PY_TYPE(String), module, "String", 0);
    }

    void t_String::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "class_", make_descriptor(String::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "wrapfn_", make_descriptor(unboxString));
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "boxfn_", make_descriptor(boxString));
    }

    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, String::initializeClass, 1)))
        return NULL;
      return t_String::wrap_Object(String(((t_String *) arg)->object.this$));
    }
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, String::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String object((jobject) NULL);

          INT_CALL(object = String());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          String a1((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[Bs", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String a3((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIIs", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_String_charAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.charAt(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError((PyObject *) self, "charAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointAt(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointBefore(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointBefore", arg);
      return NULL;
    }

    static PyObject *t_String_codePointCount(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.codePointCount(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_String_compareTo(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareToIgnoreCase(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareToIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_concat(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.concat(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "concat", arg);
      return NULL;
    }

    static PyObject *t_String_contains(t_String *self, PyObject *arg)
    {
      ::java::lang::CharSequence a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_String_contentEquals(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "contentEquals", args);
      return NULL;
    }

    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "copyValueOf", args);
      return NULL;
    }

    static PyObject *t_String_endsWith(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.endsWith(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "endsWith", arg);
      return NULL;
    }

    static PyObject *t_String_equals(t_String *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.equalsIgnoreCase(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equalsIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_format(PyTypeObject *type, PyObject *args)
    {
      String a0((jobject) NULL);
      JArray< ::java::lang::Object > a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "s[o", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::String::format(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "format", args);
      return NULL;
    }

    static PyObject *t_String_getBytes(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytes());
          return result.wrap();
        }
        break;
       case 1:
        {
          String a0((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBytes(a0));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          jint a0;
          jint a1;
          JArray< jbyte > a2((jobject) NULL);
          jint a3;

          if (!parseArgs(args, "II[BI", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.getBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "getBytes", args);
      return NULL;
    }

    static PyObject *t_String_getChars(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      JArray< jchar > a2((jobject) NULL);
      jint a3;

      if (!parseArgs(args, "II[CI", &a0, &a1, &a2, &a3))
      {
        OBJ_CALL(self->object.getChars(a0, a1, a2, a3));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "getChars", args);
      return NULL;
    }

    static PyObject *t_String_hashCode(t_String *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_String_indexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "indexOf", args);
      return NULL;
    }

    static PyObject *t_String_intern(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.intern());
      return j2p(result);
    }

    static PyObject *t_String_isEmpty(t_String *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "lastIndexOf", args);
      return NULL;
    }

    static PyObject *t_String_length(t_String *self)
    {
      jint result;
      OBJ_CALL(result = self->object.length());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_String_matches(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.matches(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "matches", arg);
      return NULL;
    }

    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_String_regionMatches(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 4:
        {
          jint a0;
          String a1((jobject) NULL);
          jint a2;
          jint a3;
          jboolean result;

          if (!parseArgs(args, "IsII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 5:
        {
          jboolean a0;
          jint a1;
          String a2((jobject) NULL);
          jint a3;
          jint a4;
          jboolean result;

          if (!parseArgs(args, "ZIsII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3, a4));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "regionMatches", args);
      return NULL;
    }

    static PyObject *t_String_replace(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jchar a0;
          jchar a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "CC", &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          ::java::lang::CharSequence a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "replace", args);
      return NULL;
    }

    static PyObject *t_String_replaceAll(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceAll(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceFirst(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceFirst", args);
      return NULL;
    }

    static PyObject *t_String_split(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.split(a0));
            return JArray<jstring>(result.this$).wrap();
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.split(a0, a1));
            return JArray<jstring>(result.this$).wrap();
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "split", args);
      return NULL;
    }

    static PyObject *t_String_startsWith(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.startsWith(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jboolean result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.startsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "startsWith", args);
      return NULL;
    }

    static PyObject *t_String_subSequence(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      ::java::lang::CharSequence result((jobject) NULL);

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.subSequence(a0, a1));
        return ::java::lang::t_CharSequence::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "subSequence", args);
      return NULL;
    }

    static PyObject *t_String_substring(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.substring(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.substring(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "substring", args);
      return NULL;
    }

    static PyObject *t_String_toCharArray(t_String *self)
    {
      JArray< jchar > result((jobject) NULL);
      OBJ_CALL(result = self->object.toCharArray());
      return result.wrap();
    }

    static PyObject *t_String_toLowerCase(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLowerCase());
      return j2p(result);
    }

    static PyObject *t_String_toString(t_String *self, PyObject *args)
    {
      String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_String_toUpperCase(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.toUpperCase());
      return j2p(result);
    }

    static PyObject *t_String_trim(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.trim());
      return j2p(result);
    }

    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jfloat a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jdouble a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jchar a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_String_get__bytes(t_String *self, void *data)
    {
      JArray< jbyte > value((jobject) NULL);
      OBJ_CALL(value = self->object.getBytes());
      return value.wrap();
    }

    static PyObject *t_String_get__empty(t_String *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/complex/ImaginaryView.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/complex/IComplexArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace complex {

      ::java::lang::Class *ImaginaryView::class$ = NULL;
      jmethodID *ImaginaryView::mids$ = NULL;
      bool ImaginaryView::live$ = false;

      jclass ImaginaryView::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/complex/ImaginaryView");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_ce2e75ca] = env->getMethodID(cls, "<init>", "(Lstallone/api/complex/IComplexArray;)V");
          mids$[mid_columns_54c6a179] = env->getMethodID(cls, "columns", "()I");
          mids$[mid_copy_1d53e353] = env->getMethodID(cls, "copy", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_create_e3ead0f5] = env->getMethodID(cls, "create", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_create_3cbb604f] = env->getMethodID(cls, "create", "(II)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_get_39c7bd2e] = env->getMethodID(cls, "get", "(I)D");
          mids$[mid_get_d8d154b4] = env->getMethodID(cls, "get", "(II)D");
          mids$[mid_getArray_dab10e78] = env->getMethodID(cls, "getArray", "()[D");
          mids$[mid_getColumn_b4292e9e] = env->getMethodID(cls, "getColumn", "(I)[D");
          mids$[mid_getRow_b4292e9e] = env->getMethodID(cls, "getRow", "(I)[D");
          mids$[mid_getTable_b9d949a8] = env->getMethodID(cls, "getTable", "()[[D");
          mids$[mid_isSparse_54c6a16a] = env->getMethodID(cls, "isSparse", "()Z");
          mids$[mid_order_54c6a179] = env->getMethodID(cls, "order", "()I");
          mids$[mid_rows_54c6a179] = env->getMethodID(cls, "rows", "()I");
          mids$[mid_set_5aa51c57] = env->getMethodID(cls, "set", "(ID)V");
          mids$[mid_set_514fa3b5] = env->getMethodID(cls, "set", "(IID)V");
          mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
          mids$[mid_zero_54c6a166] = env->getMethodID(cls, "zero", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ImaginaryView::ImaginaryView(const ::stallone::api::complex::IComplexArray & a0) : ::stallone::doubles::AbstractDoubleArray(env->newObject(initializeClass, &mids$, mid_init$_ce2e75ca, a0.this$)) {}

      jint ImaginaryView::columns() const
      {
        return env->callIntMethod(this$, mids$[mid_columns_54c6a179]);
      }

      ::stallone::api::doubles::IDoubleArray ImaginaryView::copy() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_copy_1d53e353]));
      }

      ::stallone::api::doubles::IDoubleArray ImaginaryView::create(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_create_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleArray ImaginaryView::create(jint a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_create_3cbb604f], a0, a1));
      }

      jdouble ImaginaryView::get(jint a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_get_39c7bd2e], a0);
      }

      jdouble ImaginaryView::get(jint a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_get_d8d154b4], a0, a1);
      }

      JArray< jdouble > ImaginaryView::getArray() const
      {
        return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e78]));
      }

      JArray< jdouble > ImaginaryView::getColumn(jint a0) const
      {
        return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getColumn_b4292e9e], a0));
      }

      JArray< jdouble > ImaginaryView::getRow(jint a0) const
      {
        return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getRow_b4292e9e], a0));
      }

      JArray< JArray< jdouble > > ImaginaryView::getTable() const
      {
        return JArray< JArray< jdouble > >(env->callObjectMethod(this$, mids$[mid_getTable_b9d949a8]));
      }

      jboolean ImaginaryView::isSparse() const
      {
        return env->callBooleanMethod(this$, mids$[mid_isSparse_54c6a16a]);
      }

      jint ImaginaryView::order() const
      {
        return env->callIntMethod(this$, mids$[mid_order_54c6a179]);
      }

      jint ImaginaryView::rows() const
      {
        return env->callIntMethod(this$, mids$[mid_rows_54c6a179]);
      }

      void ImaginaryView::set(jint a0, jdouble a1) const
      {
        env->callVoidMethod(this$, mids$[mid_set_5aa51c57], a0, a1);
      }

      void ImaginaryView::set(jint a0, jint a1, jdouble a2) const
      {
        env->callVoidMethod(this$, mids$[mid_set_514fa3b5], a0, a1, a2);
      }

      jint ImaginaryView::size() const
      {
        return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
      }

      void ImaginaryView::zero() const
      {
        env->callVoidMethod(this$, mids$[mid_zero_54c6a166]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace complex {
      static PyObject *t_ImaginaryView_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ImaginaryView_instance_(PyTypeObject *type, PyObject *arg);
      static int t_ImaginaryView_init_(t_ImaginaryView *self, PyObject *args, PyObject *kwds);
      static PyObject *t_ImaginaryView_columns(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_copy(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_create(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_get(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_getArray(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_getColumn(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_getRow(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_getTable(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_isSparse(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_order(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_rows(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_set(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_size(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_zero(t_ImaginaryView *self, PyObject *args);
      static PyObject *t_ImaginaryView_get__array(t_ImaginaryView *self, void *data);
      static PyObject *t_ImaginaryView_get__sparse(t_ImaginaryView *self, void *data);
      static PyObject *t_ImaginaryView_get__table(t_ImaginaryView *self, void *data);
      static PyGetSetDef t_ImaginaryView__fields_[] = {
        DECLARE_GET_FIELD(t_ImaginaryView, array),
        DECLARE_GET_FIELD(t_ImaginaryView, sparse),
        DECLARE_GET_FIELD(t_ImaginaryView, table),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_ImaginaryView__methods_[] = {
        DECLARE_METHOD(t_ImaginaryView, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ImaginaryView, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ImaginaryView, columns, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, copy, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, create, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, get, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, getArray, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, getColumn, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, getRow, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, getTable, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, isSparse, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, order, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, rows, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, set, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, size, METH_VARARGS),
        DECLARE_METHOD(t_ImaginaryView, zero, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ImaginaryView, t_ImaginaryView, ::stallone::doubles::AbstractDoubleArray, ImaginaryView, t_ImaginaryView_init_, 0, 0, t_ImaginaryView__fields_, 0, 0);

      void t_ImaginaryView::install(PyObject *module)
      {
        installType(&PY_TYPE(ImaginaryView), module, "ImaginaryView", 0);
      }

      void t_ImaginaryView::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ImaginaryView).tp_dict, "class_", make_descriptor(ImaginaryView::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ImaginaryView).tp_dict, "wrapfn_", make_descriptor(t_ImaginaryView::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ImaginaryView).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ImaginaryView_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ImaginaryView::initializeClass, 1)))
          return NULL;
        return t_ImaginaryView::wrap_Object(ImaginaryView(((t_ImaginaryView *) arg)->object.this$));
      }
      static PyObject *t_ImaginaryView_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ImaginaryView::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_ImaginaryView_init_(t_ImaginaryView *self, PyObject *args, PyObject *kwds)
      {
        ::stallone::api::complex::IComplexArray a0((jobject) NULL);
        ImaginaryView object((jobject) NULL);

        if (!parseArgs(args, "k", ::stallone::api::complex::IComplexArray::initializeClass, &a0))
        {
          INT_CALL(object = ImaginaryView(a0));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_ImaginaryView_columns(t_ImaginaryView *self, PyObject *args)
      {
        jint result;

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.columns());
          return PyInt_FromLong((long) result);
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "columns", args, 2);
      }

      static PyObject *t_ImaginaryView_copy(t_ImaginaryView *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.copy());
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "copy", args, 2);
      }

      static PyObject *t_ImaginaryView_create(t_ImaginaryView *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            jint a1;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "create", args, 2);
      }

      static PyObject *t_ImaginaryView_get(t_ImaginaryView *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            jdouble result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyFloat_FromDouble((double) result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            jint a1;
            jdouble result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.get(a0, a1));
              return PyFloat_FromDouble((double) result);
            }
          }
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "get", args, 2);
      }

      static PyObject *t_ImaginaryView_getArray(t_ImaginaryView *self, PyObject *args)
      {
        JArray< jdouble > result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getArray());
          return result.wrap();
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "getArray", args, 2);
      }

      static PyObject *t_ImaginaryView_getColumn(t_ImaginaryView *self, PyObject *args)
      {
        jint a0;
        JArray< jdouble > result((jobject) NULL);

        if (!parseArgs(args, "I", &a0))
        {
          OBJ_CALL(result = self->object.getColumn(a0));
          return result.wrap();
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "getColumn", args, 2);
      }

      static PyObject *t_ImaginaryView_getRow(t_ImaginaryView *self, PyObject *args)
      {
        jint a0;
        JArray< jdouble > result((jobject) NULL);

        if (!parseArgs(args, "I", &a0))
        {
          OBJ_CALL(result = self->object.getRow(a0));
          return result.wrap();
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "getRow", args, 2);
      }

      static PyObject *t_ImaginaryView_getTable(t_ImaginaryView *self, PyObject *args)
      {
        JArray< JArray< jdouble > > result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getTable());
          return JArray<jobject>(result.this$).wrap(NULL);
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "getTable", args, 2);
      }

      static PyObject *t_ImaginaryView_isSparse(t_ImaginaryView *self, PyObject *args)
      {
        jboolean result;

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.isSparse());
          Py_RETURN_BOOL(result);
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "isSparse", args, 2);
      }

      static PyObject *t_ImaginaryView_order(t_ImaginaryView *self, PyObject *args)
      {
        jint result;

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.order());
          return PyInt_FromLong((long) result);
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "order", args, 2);
      }

      static PyObject *t_ImaginaryView_rows(t_ImaginaryView *self, PyObject *args)
      {
        jint result;

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.rows());
          return PyInt_FromLong((long) result);
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "rows", args, 2);
      }

      static PyObject *t_ImaginaryView_set(t_ImaginaryView *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            jint a0;
            jdouble a1;

            if (!parseArgs(args, "ID", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }
          }
          break;
         case 3:
          {
            jint a0;
            jint a1;
            jdouble a2;

            if (!parseArgs(args, "IID", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.set(a0, a1, a2));
              Py_RETURN_NONE;
            }
          }
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "set", args, 2);
      }

      static PyObject *t_ImaginaryView_size(t_ImaginaryView *self, PyObject *args)
      {
        jint result;

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "size", args, 2);
      }

      static PyObject *t_ImaginaryView_zero(t_ImaginaryView *self, PyObject *args)
      {

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(self->object.zero());
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(ImaginaryView), (PyObject *) self, "zero", args, 2);
      }

      static PyObject *t_ImaginaryView_get__array(t_ImaginaryView *self, void *data)
      {
        JArray< jdouble > value((jobject) NULL);
        OBJ_CALL(value = self->object.getArray());
        return value.wrap();
      }

      static PyObject *t_ImaginaryView_get__sparse(t_ImaginaryView *self, void *data)
      {
        jboolean value;
        OBJ_CALL(value = self->object.isSparse());
        Py_RETURN_BOOL(value);
      }

      static PyObject *t_ImaginaryView_get__table(t_ImaginaryView *self, void *data)
      {
        JArray< JArray< jdouble > > value((jobject) NULL);
        OBJ_CALL(value = self->object.getTable());
        return JArray<jobject>(value.this$).wrap(NULL);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/ints/ISortInt.h"
#include "stallone/api/ints/IIntArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace ints {

      ::java::lang::Class *ISortInt::class$ = NULL;
      jmethodID *ISortInt::mids$ = NULL;
      bool ISortInt::live$ = false;

      jclass ISortInt::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/ints/ISortInt");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getSortedData_4ac77731] = env->getMethodID(cls, "getSortedData", "()Lstallone/api/ints/IIntArray;");
          mids$[mid_getSortedIndexes_4ac77731] = env->getMethodID(cls, "getSortedIndexes", "()Lstallone/api/ints/IIntArray;");
          mids$[mid_setData_059aa494] = env->getMethodID(cls, "setData", "(Lstallone/api/ints/IIntArray;)V");
          mids$[mid_setData_88ee849e] = env->getMethodID(cls, "setData", "(Lstallone/api/ints/IIntArray;Lstallone/api/ints/IIntArray;)V");
          mids$[mid_sort_4ac77731] = env->getMethodID(cls, "sort", "()Lstallone/api/ints/IIntArray;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::stallone::api::ints::IIntArray ISortInt::getSortedData() const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_getSortedData_4ac77731]));
      }

      ::stallone::api::ints::IIntArray ISortInt::getSortedIndexes() const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_getSortedIndexes_4ac77731]));
      }

      void ISortInt::setData(const ::stallone::api::ints::IIntArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setData_059aa494], a0.this$);
      }

      void ISortInt::setData(const ::stallone::api::ints::IIntArray & a0, const ::stallone::api::ints::IIntArray & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setData_88ee849e], a0.this$, a1.this$);
      }

      ::stallone::api::ints::IIntArray ISortInt::sort() const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_sort_4ac77731]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace ints {
      static PyObject *t_ISortInt_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ISortInt_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ISortInt_getSortedData(t_ISortInt *self);
      static PyObject *t_ISortInt_getSortedIndexes(t_ISortInt *self);
      static PyObject *t_ISortInt_setData(t_ISortInt *self, PyObject *args);
      static PyObject *t_ISortInt_sort(t_ISortInt *self);
      static int t_ISortInt_set__data(t_ISortInt *self, PyObject *arg, void *data);
      static PyObject *t_ISortInt_get__sortedData(t_ISortInt *self, void *data);
      static PyObject *t_ISortInt_get__sortedIndexes(t_ISortInt *self, void *data);
      static PyGetSetDef t_ISortInt__fields_[] = {
        DECLARE_SET_FIELD(t_ISortInt, data),
        DECLARE_GET_FIELD(t_ISortInt, sortedData),
        DECLARE_GET_FIELD(t_ISortInt, sortedIndexes),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_ISortInt__methods_[] = {
        DECLARE_METHOD(t_ISortInt, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ISortInt, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ISortInt, getSortedData, METH_NOARGS),
        DECLARE_METHOD(t_ISortInt, getSortedIndexes, METH_NOARGS),
        DECLARE_METHOD(t_ISortInt, setData, METH_VARARGS),
        DECLARE_METHOD(t_ISortInt, sort, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ISortInt, t_ISortInt, ::java::lang::Object, ISortInt, abstract_init, 0, 0, t_ISortInt__fields_, 0, 0);

      void t_ISortInt::install(PyObject *module)
      {
        installType(&PY_TYPE(ISortInt), module, "ISortInt", 0);
      }

      void t_ISortInt::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ISortInt).tp_dict, "class_", make_descriptor(ISortInt::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ISortInt).tp_dict, "wrapfn_", make_descriptor(t_ISortInt::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ISortInt).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ISortInt_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ISortInt::initializeClass, 1)))
          return NULL;
        return t_ISortInt::wrap_Object(ISortInt(((t_ISortInt *) arg)->object.this$));
      }
      static PyObject *t_ISortInt_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ISortInt::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_ISortInt_getSortedData(t_ISortInt *self)
      {
        ::stallone::api::ints::IIntArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getSortedData());
        return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
      }

      static PyObject *t_ISortInt_getSortedIndexes(t_ISortInt *self)
      {
        ::stallone::api::ints::IIntArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getSortedIndexes());
        return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
      }

      static PyObject *t_ISortInt_setData(t_ISortInt *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setData(a0));
              Py_RETURN_NONE;
            }
          }
          break;
         case 2:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);
            ::stallone::api::ints::IIntArray a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntArray::initializeClass, ::stallone::api::ints::IIntArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.setData(a0, a1));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "setData", args);
        return NULL;
      }

      static PyObject *t_ISortInt_sort(t_ISortInt *self)
      {
        ::stallone::api::ints::IIntArray result((jobject) NULL);
        OBJ_CALL(result = self->object.sort());
        return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
      }

      static int t_ISortInt_set__data(t_ISortInt *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::ints::IIntArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::ints::IIntArray::initializeClass, &value))
          {
            INT_CALL(self->object.setData(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "data", arg);
        return -1;
      }

      static PyObject *t_ISortInt_get__sortedData(t_ISortInt *self, void *data)
      {
        ::stallone::api::ints::IIntArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getSortedData());
        return ::stallone::api::ints::t_IIntArray::wrap_Object(value);
      }

      static PyObject *t_ISortInt_get__sortedIndexes(t_ISortInt *self, void *data)
      {
        ::stallone::api::ints::IIntArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getSortedIndexes());
        return ::stallone::api::ints::t_IIntArray::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Comparable.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Float::class$ = NULL;
    jmethodID *Float::mids$ = NULL;
    bool Float::live$ = false;
    jint Float::MAX_EXPONENT = (jint) 0;
    jfloat Float::MAX_VALUE = (jfloat) 0;
    jint Float::MIN_EXPONENT = (jint) 0;
    jfloat Float::MIN_NORMAL = (jfloat) 0;
    jfloat Float::MIN_VALUE = (jfloat) 0;
    jfloat Float::NEGATIVE_INFINITY = (jfloat) 0;
    jfloat Float::NaN = (jfloat) 0;
    jfloat Float::POSITIVE_INFINITY = (jfloat) 0;
    jint Float::SIZE = (jint) 0;
    ::java::lang::Class *Float::TYPE = NULL;

    jclass Float::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Float");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_f1b0c01b] = env->getStaticMethodID(cls, "compare", "(FF)I");
        mids$[mid_compareTo_6b30eb75] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Float;)I");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatToIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToIntBits", "(F)I");
        mids$[mid_floatToRawIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToRawIntBits", "(F)I");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intBitsToFloat_39c7bd2c] = env->getStaticMethodID(cls, "intBitsToFloat", "(I)F");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_06298ca7] = env->getStaticMethodID(cls, "isInfinite", "(F)Z");
        mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_06298ca7] = env->getStaticMethodID(cls, "isNaN", "(F)Z");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseFloat_5fdc3f58] = env->getStaticMethodID(cls, "parseFloat", "(Ljava/lang/String;)F");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toHexString_5ded254a] = env->getStaticMethodID(cls, "toHexString", "(F)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_5ded254a] = env->getStaticMethodID(cls, "toString", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_685a245e] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/Float;");
        mids$[mid_valueOf_b837041d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Float;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticFloatField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticFloatField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticFloatField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticFloatField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticFloatField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticFloatField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Float::Float(jfloat a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

    Float::Float(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Float::Float(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

    jbyte Float::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Float::compare(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_f1b0c01b], a0, a1);
    }

    jint Float::compareTo(const Float & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_6b30eb75], a0.this$);
    }

    jdouble Float::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Float::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jint Float::floatToIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToIntBits_06298cb4], a0);
    }

    jint Float::floatToRawIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToRawIntBits_06298cb4], a0);
    }

    jfloat Float::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Float::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jfloat Float::intBitsToFloat(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_intBitsToFloat_39c7bd2c], a0);
    }

    jint Float::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jboolean Float::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
    }

    jboolean Float::isInfinite(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_06298ca7], a0);
    }

    jboolean Float::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
    }

    jboolean Float::isNaN(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_06298ca7], a0);
    }

    jlong Float::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jfloat Float::parseFloat(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_parseFloat_5fdc3f58], a0.this$);
    }

    jshort Float::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Float::toHexString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_5ded254a], a0));
    }

    ::java::lang::String Float::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Float::toString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_5ded254a], a0));
    }

    Float Float::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_685a245e], a0));
    }

    Float Float::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_b837041d], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg);
    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_equals(t_Float *self, PyObject *args);
    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args);
    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_intValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_isInfinite(t_Float *self);
    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_isNaN(t_Float *self);
    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_longValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_toString(t_Float *self, PyObject *args);
    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_get__infinite(t_Float *self, void *data);
    static PyObject *t_Float_get__naN(t_Float *self, void *data);
    static PyGetSetDef t_Float__fields_[] = {
      DECLARE_GET_FIELD(t_Float, infinite),
      DECLARE_GET_FIELD(t_Float, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Float__methods_[] = {
      DECLARE_METHOD(t_Float, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, compareTo, METH_O),
      DECLARE_METHOD(t_Float, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, equals, METH_VARARGS),
      DECLARE_METHOD(t_Float, floatToIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatToRawIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Float, intBitsToFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Float, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Float, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, parseFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, toString, METH_VARARGS),
      DECLARE_METHOD(t_Float, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Float, t_Float, ::java::lang::Number, Float, t_Float_init_, 0, 0, t_Float__fields_, 0, 0);

    void t_Float::install(PyObject *module)
    {
      installType(&PY_TYPE(Float), module, "Float", 0);
    }

    void t_Float::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "class_", make_descriptor(Float::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "wrapfn_", make_descriptor(unboxFloat));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "boxfn_", make_descriptor(boxFloat));
      env->getClass(Float::initializeClass);
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_EXPONENT", make_descriptor(Float::MAX_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_VALUE", make_descriptor(Float::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_EXPONENT", make_descriptor(Float::MIN_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_NORMAL", make_descriptor(Float::MIN_NORMAL));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_VALUE", make_descriptor(Float::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Float::NEGATIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NaN", make_descriptor(Float::NaN));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "POSITIVE_INFINITY", make_descriptor(Float::POSITIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "SIZE", make_descriptor(Float::SIZE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Float::TYPE)));
    }

    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Float::initializeClass, 1)))
        return NULL;
      return t_Float::wrap_Object(Float(((t_Float *) arg)->object.this$));
    }
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Float::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jfloat a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Float object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jdouble a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jint result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg)
    {
      Float a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Float_equals(t_Float *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToIntBits(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToRawIntBits(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToRawIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jfloat result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::intBitsToFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "intBitsToFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_intValue(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Float_isInfinite(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Float_isNaN(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Float_longValue(t_Float *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jfloat result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::parseFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Float_toString(t_Float *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jfloat a0;
          Float result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Float result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Float_get__infinite(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Float_get__naN(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/doubles/IDifferentiableMetric.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace doubles {

      ::java::lang::Class *IDifferentiableMetric::class$ = NULL;
      jmethodID *IDifferentiableMetric::mids$ = NULL;
      bool IDifferentiableMetric::live$ = false;

      jclass IDifferentiableMetric::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/doubles/IDifferentiableMetric");

          mids$ = new jmethodID[max_mid];
          mids$[mid_gradientX_76419023] = env->getMethodID(cls, "gradientX", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_gradientY_76419023] = env->getMethodID(cls, "gradientY", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::stallone::api::doubles::IDoubleArray IDifferentiableMetric::gradientX(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_gradientX_76419023], a0.this$, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray IDifferentiableMetric::gradientY(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_gradientY_76419023], a0.this$, a1.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace doubles {
      static PyObject *t_IDifferentiableMetric_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDifferentiableMetric_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDifferentiableMetric_of_(t_IDifferentiableMetric *self, PyObject *args);
      static PyObject *t_IDifferentiableMetric_gradientX(t_IDifferentiableMetric *self, PyObject *args);
      static PyObject *t_IDifferentiableMetric_gradientY(t_IDifferentiableMetric *self, PyObject *args);
      static PyObject *t_IDifferentiableMetric_get__parameters_(t_IDifferentiableMetric *self, void *data);
      static PyGetSetDef t_IDifferentiableMetric__fields_[] = {
        DECLARE_GET_FIELD(t_IDifferentiableMetric, parameters_),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IDifferentiableMetric__methods_[] = {
        DECLARE_METHOD(t_IDifferentiableMetric, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDifferentiableMetric, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDifferentiableMetric, of_, METH_VARARGS),
        DECLARE_METHOD(t_IDifferentiableMetric, gradientX, METH_VARARGS),
        DECLARE_METHOD(t_IDifferentiableMetric, gradientY, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IDifferentiableMetric, t_IDifferentiableMetric, ::stallone::api::doubles::IMetric, IDifferentiableMetric, abstract_init, 0, 0, t_IDifferentiableMetric__fields_, 0, 0);
      PyObject *t_IDifferentiableMetric::wrap_Object(const IDifferentiableMetric& object, PyTypeObject *T)
      {
        PyObject *obj = t_IDifferentiableMetric::wrap_Object(object);
        if (obj != NULL && obj != Py_None)
        {
          t_IDifferentiableMetric *self = (t_IDifferentiableMetric *) obj;
          self->parameters[0] = T;
        }
        return obj;
      }

      PyObject *t_IDifferentiableMetric::wrap_jobject(const jobject& object, PyTypeObject *T)
      {
        PyObject *obj = t_IDifferentiableMetric::wrap_jobject(object);
        if (obj != NULL && obj != Py_None)
        {
          t_IDifferentiableMetric *self = (t_IDifferentiableMetric *) obj;
          self->parameters[0] = T;
        }
        return obj;
      }

      void t_IDifferentiableMetric::install(PyObject *module)
      {
        installType(&PY_TYPE(IDifferentiableMetric), module, "IDifferentiableMetric", 0);
      }

      void t_IDifferentiableMetric::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IDifferentiableMetric).tp_dict, "class_", make_descriptor(IDifferentiableMetric::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IDifferentiableMetric).tp_dict, "wrapfn_", make_descriptor(t_IDifferentiableMetric::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IDifferentiableMetric).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IDifferentiableMetric_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IDifferentiableMetric::initializeClass, 1)))
          return NULL;
        return t_IDifferentiableMetric::wrap_Object(IDifferentiableMetric(((t_IDifferentiableMetric *) arg)->object.this$));
      }
      static PyObject *t_IDifferentiableMetric_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IDifferentiableMetric::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IDifferentiableMetric_of_(t_IDifferentiableMetric *self, PyObject *args)
      {
        if (!parseArg(args, "T", 1, &(self->parameters)))
          Py_RETURN_SELF;
        return PyErr_SetArgsError((PyObject *) self, "of_", args);
      }

      static PyObject *t_IDifferentiableMetric_gradientX(t_IDifferentiableMetric *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.gradientX(a0, a1));
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "gradientX", args);
        return NULL;
      }

      static PyObject *t_IDifferentiableMetric_gradientY(t_IDifferentiableMetric *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.gradientY(a0, a1));
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "gradientY", args);
        return NULL;
      }
      static PyObject *t_IDifferentiableMetric_get__parameters_(t_IDifferentiableMetric *self, void *data)
      {
        return typeParameters(self->parameters, sizeof(self->parameters));
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Character.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Character::class$ = NULL;
    jmethodID *Character::mids$ = NULL;
    bool Character::live$ = false;
    jbyte Character::COMBINING_SPACING_MARK = (jbyte) 0;
    jbyte Character::CONNECTOR_PUNCTUATION = (jbyte) 0;
    jbyte Character::CONTROL = (jbyte) 0;
    jbyte Character::CURRENCY_SYMBOL = (jbyte) 0;
    jbyte Character::DASH_PUNCTUATION = (jbyte) 0;
    jbyte Character::DECIMAL_DIGIT_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_ARABIC_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_BOUNDARY_NEUTRAL = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_NONSPACING_MARK = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_OTHER_NEUTRALS = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_SEGMENT_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_UNDEFINED = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_WHITESPACE = (jbyte) 0;
    jbyte Character::ENCLOSING_MARK = (jbyte) 0;
    jbyte Character::END_PUNCTUATION = (jbyte) 0;
    jbyte Character::FINAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::FORMAT = (jbyte) 0;
    jbyte Character::INITIAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::LETTER_NUMBER = (jbyte) 0;
    jbyte Character::LINE_SEPARATOR = (jbyte) 0;
    jbyte Character::LOWERCASE_LETTER = (jbyte) 0;
    jbyte Character::MATH_SYMBOL = (jbyte) 0;
    jint Character::MAX_CODE_POINT = (jint) 0;
    jchar Character::MAX_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MAX_LOW_SURROGATE = (jchar) 0;
    jint Character::MAX_RADIX = (jint) 0;
    jchar Character::MAX_SURROGATE = (jchar) 0;
    jchar Character::MAX_VALUE = (jchar) 0;
    jint Character::MIN_CODE_POINT = (jint) 0;
    jchar Character::MIN_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MIN_LOW_SURROGATE = (jchar) 0;
    jint Character::MIN_RADIX = (jint) 0;
    jint Character::MIN_SUPPLEMENTARY_CODE_POINT = (jint) 0;
    jchar Character::MIN_SURROGATE = (jchar) 0;
    jchar Character::MIN_VALUE = (jchar) 0;
    jbyte Character::MODIFIER_LETTER = (jbyte) 0;
    jbyte Character::MODIFIER_SYMBOL = (jbyte) 0;
    jbyte Character::NON_SPACING_MARK = (jbyte) 0;
    jbyte Character::OTHER_LETTER = (jbyte) 0;
    jbyte Character::OTHER_NUMBER = (jbyte) 0;
    jbyte Character::OTHER_PUNCTUATION = (jbyte) 0;
    jbyte Character::OTHER_SYMBOL = (jbyte) 0;
    jbyte Character::PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::PRIVATE_USE = (jbyte) 0;
    jint Character::SIZE = (jint) 0;
    jbyte Character::SPACE_SEPARATOR = (jbyte) 0;
    jbyte Character::START_PUNCTUATION = (jbyte) 0;
    jbyte Character::SURROGATE = (jbyte) 0;
    jbyte Character::TITLECASE_LETTER = (jbyte) 0;
    ::java::lang::Class *Character::TYPE = NULL;
    jbyte Character::UNASSIGNED = (jbyte) 0;
    jbyte Character::UPPERCASE_LETTER = (jbyte) 0;

    jclass Character::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Character");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_87fd545a] = env->getMethodID(cls, "<init>", "(C)V");
        mids$[mid_charCount_39c7bd23] = env->getStaticMethodID(cls, "charCount", "(I)I");
        mids$[mid_charValue_54c6a173] = env->getMethodID(cls, "charValue", "()C");
        mids$[mid_codePointAt_ec6430eb] = env->getStaticMethodID(cls, "codePointAt", "([CI)I");
        mids$[mid_codePointAt_2fbf15bf] = env->getStaticMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointAt_6f0bb349] = env->getStaticMethodID(cls, "codePointAt", "([CII)I");
        mids$[mid_codePointBefore_2fbf15bf] = env->getStaticMethodID(cls, "codePointBefore", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointBefore_ec6430eb] = env->getStaticMethodID(cls, "codePointBefore", "([CI)I");
        mids$[mid_codePointBefore_6f0bb349] = env->getStaticMethodID(cls, "codePointBefore", "([CII)I");
        mids$[mid_codePointCount_6cc8d7fd] = env->getStaticMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_codePointCount_6f0bb349] = env->getStaticMethodID(cls, "codePointCount", "([CII)I");
        mids$[mid_compareTo_35927258] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Character;)I");
        mids$[mid_digit_3108448f] = env->getStaticMethodID(cls, "digit", "(CI)I");
        mids$[mid_digit_d8d154b9] = env->getStaticMethodID(cls, "digit", "(II)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_forDigit_d8d154b3] = env->getStaticMethodID(cls, "forDigit", "(II)C");
        mids$[mid_getDirectionality_39c7bd28] = env->getStaticMethodID(cls, "getDirectionality", "(I)B");
        mids$[mid_getDirectionality_87fd544e] = env->getStaticMethodID(cls, "getDirectionality", "(C)B");
        mids$[mid_getNumericValue_39c7bd23] = env->getStaticMethodID(cls, "getNumericValue", "(I)I");
        mids$[mid_getNumericValue_87fd5445] = env->getStaticMethodID(cls, "getNumericValue", "(C)I");
        mids$[mid_getType_87fd5445] = env->getStaticMethodID(cls, "getType", "(C)I");
        mids$[mid_getType_39c7bd23] = env->getStaticMethodID(cls, "getType", "(I)I");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isDefined_87fd5456] = env->getStaticMethodID(cls, "isDefined", "(C)Z");
        mids$[mid_isDefined_39c7bd30] = env->getStaticMethodID(cls, "isDefined", "(I)Z");
        mids$[mid_isDigit_39c7bd30] = env->getStaticMethodID(cls, "isDigit", "(I)Z");
        mids$[mid_isDigit_87fd5456] = env->getStaticMethodID(cls, "isDigit", "(C)Z");
        mids$[mid_isHighSurrogate_87fd5456] = env->getStaticMethodID(cls, "isHighSurrogate", "(C)Z");
        mids$[mid_isISOControl_39c7bd30] = env->getStaticMethodID(cls, "isISOControl", "(I)Z");
        mids$[mid_isISOControl_87fd5456] = env->getStaticMethodID(cls, "isISOControl", "(C)Z");
        mids$[mid_isIdentifierIgnorable_39c7bd30] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(I)Z");
        mids$[mid_isIdentifierIgnorable_87fd5456] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(C)Z");
        mids$[mid_isJavaIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(I)Z");
        mids$[mid_isJavaIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(C)Z");
        mids$[mid_isJavaIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(C)Z");
        mids$[mid_isJavaIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(I)Z");
        mids$[mid_isJavaLetter_87fd5456] = env->getStaticMethodID(cls, "isJavaLetter", "(C)Z");
        mids$[mid_isJavaLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isJavaLetterOrDigit", "(C)Z");
        mids$[mid_isLetter_87fd5456] = env->getStaticMethodID(cls, "isLetter", "(C)Z");
        mids$[mid_isLetter_39c7bd30] = env->getStaticMethodID(cls, "isLetter", "(I)Z");
        mids$[mid_isLetterOrDigit_39c7bd30] = env->getStaticMethodID(cls, "isLetterOrDigit", "(I)Z");
        mids$[mid_isLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isLetterOrDigit", "(C)Z");
        mids$[mid_isLowSurrogate_87fd5456] = env->getStaticMethodID(cls, "isLowSurrogate", "(C)Z");
        mids$[mid_isLowerCase_39c7bd30] = env->getStaticMethodID(cls, "isLowerCase", "(I)Z");
        mids$[mid_isLowerCase_87fd5456] = env->getStaticMethodID(cls, "isLowerCase", "(C)Z");
        mids$[mid_isMirrored_87fd5456] = env->getStaticMethodID(cls, "isMirrored", "(C)Z");
        mids$[mid_isMirrored_39c7bd30] = env->getStaticMethodID(cls, "isMirrored", "(I)Z");
        mids$[mid_isSpace_87fd5456] = env->getStaticMethodID(cls, "isSpace", "(C)Z");
        mids$[mid_isSpaceChar_87fd5456] = env->getStaticMethodID(cls, "isSpaceChar", "(C)Z");
        mids$[mid_isSpaceChar_39c7bd30] = env->getStaticMethodID(cls, "isSpaceChar", "(I)Z");
        mids$[mid_isSupplementaryCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isSupplementaryCodePoint", "(I)Z");
        mids$[mid_isSurrogatePair_37c94822] = env->getStaticMethodID(cls, "isSurrogatePair", "(CC)Z");
        mids$[mid_isTitleCase_39c7bd30] = env->getStaticMethodID(cls, "isTitleCase", "(I)Z");
        mids$[mid_isTitleCase_87fd5456] = env->getStaticMethodID(cls, "isTitleCase", "(C)Z");
        mids$[mid_isUnicodeIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(C)Z");
        mids$[mid_isUnicodeIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(C)Z");
        mids$[mid_isUpperCase_39c7bd30] = env->getStaticMethodID(cls, "isUpperCase", "(I)Z");
        mids$[mid_isUpperCase_87fd5456] = env->getStaticMethodID(cls, "isUpperCase", "(C)Z");
        mids$[mid_isValidCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isValidCodePoint", "(I)Z");
        mids$[mid_isWhitespace_39c7bd30] = env->getStaticMethodID(cls, "isWhitespace", "(I)Z");
        mids$[mid_isWhitespace_87fd5456] = env->getStaticMethodID(cls, "isWhitespace", "(C)Z");
        mids$[mid_offsetByCodePoints_6cc8d7fd] = env->getStaticMethodID(cls, "offsetByCodePoints", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_offsetByCodePoints_f453ace9] = env->getStaticMethodID(cls, "offsetByCodePoints", "([CIIII)I");
        mids$[mid_reverseBytes_87fd544f] = env->getStaticMethodID(cls, "reverseBytes", "(C)C");
        mids$[mid_toChars_b4292e99] = env->getStaticMethodID(cls, "toChars", "(I)[C");
        mids$[mid_toChars_273c5d2d] = env->getStaticMethodID(cls, "toChars", "(I[CI)I");
        mids$[mid_toCodePoint_37c94831] = env->getStaticMethodID(cls, "toCodePoint", "(CC)I");
        mids$[mid_toLowerCase_39c7bd23] = env->getStaticMethodID(cls, "toLowerCase", "(I)I");
        mids$[mid_toLowerCase_87fd544f] = env->getStaticMethodID(cls, "toLowerCase", "(C)C");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_7611a535] = env->getStaticMethodID(cls, "toString", "(C)Ljava/lang/String;");
        mids$[mid_toTitleCase_87fd544f] = env->getStaticMethodID(cls, "toTitleCase", "(C)C");
        mids$[mid_toTitleCase_39c7bd23] = env->getStaticMethodID(cls, "toTitleCase", "(I)I");
        mids$[mid_toUpperCase_39c7bd23] = env->getStaticMethodID(cls, "toUpperCase", "(I)I");
        mids$[mid_toUpperCase_87fd544f] = env->getStaticMethodID(cls, "toUpperCase", "(C)C");
        mids$[mid_valueOf_58724da6] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/Character;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        COMBINING_SPACING_MARK = env->getStaticByteField(cls, "COMBINING_SPACING_MARK");
        CONNECTOR_PUNCTUATION = env->getStaticByteField(cls, "CONNECTOR_PUNCTUATION");
        CONTROL = env->getStaticByteField(cls, "CONTROL");
        CURRENCY_SYMBOL = env->getStaticByteField(cls, "CURRENCY_SYMBOL");
        DASH_PUNCTUATION = env->getStaticByteField(cls, "DASH_PUNCTUATION");
        DECIMAL_DIGIT_NUMBER = env->getStaticByteField(cls, "DECIMAL_DIGIT_NUMBER");
        DIRECTIONALITY_ARABIC_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_ARABIC_NUMBER");
        DIRECTIONALITY_BOUNDARY_NEUTRAL = env->getStaticByteField(cls, "DIRECTIONALITY_BOUNDARY_NEUTRAL");
        DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER");
        DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR");
        DIRECTIONALITY_LEFT_TO_RIGHT = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT");
        DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING");
        DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE");
        DIRECTIONALITY_NONSPACING_MARK = env->getStaticByteField(cls, "DIRECTIONALITY_NONSPACING_MARK");
        DIRECTIONALITY_OTHER_NEUTRALS = env->getStaticByteField(cls, "DIRECTIONALITY_OTHER_NEUTRALS");
        DIRECTIONALITY_PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_PARAGRAPH_SEPARATOR");
        DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = env->getStaticByteField(cls, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT");
        DIRECTIONALITY_RIGHT_TO_LEFT = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT");
        DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC");
        DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING");
        DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE");
        DIRECTIONALITY_SEGMENT_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_SEGMENT_SEPARATOR");
        DIRECTIONALITY_UNDEFINED = env->getStaticByteField(cls, "DIRECTIONALITY_UNDEFINED");
        DIRECTIONALITY_WHITESPACE = env->getStaticByteField(cls, "DIRECTIONALITY_WHITESPACE");
        ENCLOSING_MARK = env->getStaticByteField(cls, "ENCLOSING_MARK");
        END_PUNCTUATION = env->getStaticByteField(cls, "END_PUNCTUATION");
        FINAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "FINAL_QUOTE_PUNCTUATION");
        FORMAT = env->getStaticByteField(cls, "FORMAT");
        INITIAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "INITIAL_QUOTE_PUNCTUATION");
        LETTER_NUMBER = env->getStaticByteField(cls, "LETTER_NUMBER");
        LINE_SEPARATOR = env->getStaticByteField(cls, "LINE_SEPARATOR");
        LOWERCASE_LETTER = env->getStaticByteField(cls, "LOWERCASE_LETTER");
        MATH_SYMBOL = env->getStaticByteField(cls, "MATH_SYMBOL");
        MAX_CODE_POINT = env->getStaticIntField(cls, "MAX_CODE_POINT");
        MAX_HIGH_SURROGATE = env->getStaticCharField(cls, "MAX_HIGH_SURROGATE");
        MAX_LOW_SURROGATE = env->getStaticCharField(cls, "MAX_LOW_SURROGATE");
        MAX_RADIX = env->getStaticIntField(cls, "MAX_RADIX");
        MAX_SURROGATE = env->getStaticCharField(cls, "MAX_SURROGATE");
        MAX_VALUE = env->getStaticCharField(cls, "MAX_VALUE");
        MIN_CODE_POINT = env->getStaticIntField(cls, "MIN_CODE_POINT");
        MIN_HIGH_SURROGATE = env->getStaticCharField(cls, "MIN_HIGH_SURROGATE");
        MIN_LOW_SURROGATE = env->getStaticCharField(cls, "MIN_LOW_SURROGATE");
        MIN_RADIX = env->getStaticIntField(cls, "MIN_RADIX");
        MIN_SUPPLEMENTARY_CODE_POINT = env->getStaticIntField(cls, "MIN_SUPPLEMENTARY_CODE_POINT");
        MIN_SURROGATE = env->getStaticCharField(cls, "MIN_SURROGATE");
        MIN_VALUE = env->getStaticCharField(cls, "MIN_VALUE");
        MODIFIER_LETTER = env->getStaticByteField(cls, "MODIFIER_LETTER");
        MODIFIER_SYMBOL = env->getStaticByteField(cls, "MODIFIER_SYMBOL");
        NON_SPACING_MARK = env->getStaticByteField(cls, "NON_SPACING_MARK");
        OTHER_LETTER = env->getStaticByteField(cls, "OTHER_LETTER");
        OTHER_NUMBER = env->getStaticByteField(cls, "OTHER_NUMBER");
        OTHER_PUNCTUATION = env->getStaticByteField(cls, "OTHER_PUNCTUATION");
        OTHER_SYMBOL = env->getStaticByteField(cls, "OTHER_SYMBOL");
        PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "PARAGRAPH_SEPARATOR");
        PRIVATE_USE = env->getStaticByteField(cls, "PRIVATE_USE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        SPACE_SEPARATOR = env->getStaticByteField(cls, "SPACE_SEPARATOR");
        START_PUNCTUATION = env->getStaticByteField(cls, "START_PUNCTUATION");
        SURROGATE = env->getStaticByteField(cls, "SURROGATE");
        TITLECASE_LETTER = env->getStaticByteField(cls, "TITLECASE_LETTER");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        UNASSIGNED = env->getStaticByteField(cls, "UNASSIGNED");
        UPPERCASE_LETTER = env->getStaticByteField(cls, "UPPERCASE_LETTER");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Character::Character(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_87fd545a, a0)) {}

    jint Character::charCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_charCount_39c7bd23], a0);
    }

    jchar Character::charValue() const
    {
      return env->callCharMethod(this$, mids$[mid_charValue_54c6a173]);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_ec6430eb], a0.this$, a1);
    }

    jint Character::codePointAt(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_2fbf15bf], a0.this$, a1);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointBefore(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_2fbf15bf], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_ec6430eb], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6cc8d7fd], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::compareTo(const Character & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_35927258], a0.this$);
    }

    jint Character::digit(jchar a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_3108448f], a0, a1);
    }

    jint Character::digit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_d8d154b9], a0, a1);
    }

    jboolean Character::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jchar Character::forDigit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_forDigit_d8d154b3], a0, a1);
    }

    jbyte Character::getDirectionality(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_39c7bd28], a0);
    }

    jbyte Character::getDirectionality(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_87fd544e], a0);
    }

    jint Character::getNumericValue(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_39c7bd23], a0);
    }

    jint Character::getNumericValue(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_87fd5445], a0);
    }

    jint Character::getType(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_87fd5445], a0);
    }

    jint Character::getType(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_39c7bd23], a0);
    }

    jint Character::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean Character::isDefined(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_87fd5456], a0);
    }

    jboolean Character::isDefined(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_39c7bd30], a0);
    }

    jboolean Character::isDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_39c7bd30], a0);
    }

    jboolean Character::isDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_87fd5456], a0);
    }

    jboolean Character::isHighSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isHighSurrogate_87fd5456], a0);
    }

    jboolean Character::isISOControl(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_39c7bd30], a0);
    }

    jboolean Character::isISOControl(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_87fd5456], a0);
    }

    jboolean Character::isIdentifierIgnorable(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_39c7bd30], a0);
    }

    jboolean Character::isIdentifierIgnorable(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_87fd5456], a0);
    }

    jboolean Character::isJavaIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_87fd5456], a0);
    }

    jboolean Character::isJavaIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_87fd5456], a0);
    }

    jboolean Character::isJavaIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_39c7bd30], a0);
    }

    jboolean Character::isJavaLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetter_87fd5456], a0);
    }

    jboolean Character::isJavaLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetterOrDigit_87fd5456], a0);
    }

    jboolean Character::isLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_87fd5456], a0);
    }

    jboolean Character::isLetter(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_39c7bd30], a0);
    }

    jboolean Character::isLetterOrDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_39c7bd30], a0);
    }

    jboolean Character::isLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_87fd5456], a0);
    }

    jboolean Character::isLowSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowSurrogate_87fd5456], a0);
    }

    jboolean Character::isLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_39c7bd30], a0);
    }

    jboolean Character::isLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_87fd5456], a0);
    }

    jboolean Character::isMirrored(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_87fd5456], a0);
    }

    jboolean Character::isMirrored(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_39c7bd30], a0);
    }

    jboolean Character::isSpace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpace_87fd5456], a0);
    }

    jboolean Character::isSpaceChar(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_87fd5456], a0);
    }

    jboolean Character::isSpaceChar(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_39c7bd30], a0);
    }

    jboolean Character::isSupplementaryCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSupplementaryCodePoint_39c7bd30], a0);
    }

    jboolean Character::isSurrogatePair(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogatePair_37c94822], a0, a1);
    }

    jboolean Character::isTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_39c7bd30], a0);
    }

    jboolean Character::isTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_87fd5456], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_87fd5456], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_87fd5456], a0);
    }

    jboolean Character::isUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_39c7bd30], a0);
    }

    jboolean Character::isUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_87fd5456], a0);
    }

    jboolean Character::isValidCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isValidCodePoint_39c7bd30], a0);
    }

    jboolean Character::isWhitespace(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_39c7bd30], a0);
    }

    jboolean Character::isWhitespace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_87fd5456], a0);
    }

    jint Character::offsetByCodePoints(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_6cc8d7fd], a0.this$, a1, a2);
    }

    jint Character::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_f453ace9], a0.this$, a1, a2, a3, a4);
    }

    jchar Character::reverseBytes(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_reverseBytes_87fd544f], a0);
    }

    JArray< jchar > Character::toChars(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_toChars_b4292e99], a0));
    }

    jint Character::toChars(jint a0, const JArray< jchar > & a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toChars_273c5d2d], a0, a1.this$, a2);
    }

    jint Character::toCodePoint(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toCodePoint_37c94831], a0, a1);
    }

    jint Character::toLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toLowerCase_39c7bd23], a0);
    }

    jchar Character::toLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toLowerCase_87fd544f], a0);
    }

    ::java::lang::String Character::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Character::toString(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_7611a535], a0));
    }

    jchar Character::toTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toTitleCase_87fd544f], a0);
    }

    jint Character::toTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toTitleCase_39c7bd23], a0);
    }

    jint Character::toUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUpperCase_39c7bd23], a0);
    }

    jchar Character::toUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toUpperCase_87fd544f], a0);
    }

    Character Character::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Character(env->callStaticObjectMethod(cls, mids$[mid_valueOf_58724da6], a0));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_charValue(t_Character *self);
    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg);
    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_equals(t_Character *self, PyObject *args);
    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args);
    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toString(t_Character *self, PyObject *args);
    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Character__methods_[] = {
      DECLARE_METHOD(t_Character, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charValue, METH_NOARGS),
      DECLARE_METHOD(t_Character, codePointAt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointBefore, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointCount, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compareTo, METH_O),
      DECLARE_METHOD(t_Character, digit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, equals, METH_VARARGS),
      DECLARE_METHOD(t_Character, forDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getDirectionality, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getNumericValue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getType, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Character, isDefined, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isHighSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isISOControl, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdentifierIgnorable, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetter, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetterOrDigit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetter, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetterOrDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isMirrored, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpace, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpaceChar, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSupplementaryCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogatePair, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isValidCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isWhitespace, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, offsetByCodePoints, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toChars, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toCodePoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toString, METH_VARARGS),
      DECLARE_METHOD(t_Character, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, valueOf, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Character, t_Character, ::java::lang::Object, Character, t_Character_init_, 0, 0, 0, 0, 0);

    void t_Character::install(PyObject *module)
    {
      installType(&PY_TYPE(Character), module, "Character", 0);
    }

    void t_Character::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "class_", make_descriptor(Character::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "wrapfn_", make_descriptor(unboxCharacter));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "boxfn_", make_descriptor(boxCharacter));
      env->getClass(Character::initializeClass);
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "COMBINING_SPACING_MARK", make_descriptor(Character::COMBINING_SPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONNECTOR_PUNCTUATION", make_descriptor(Character::CONNECTOR_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONTROL", make_descriptor(Character::CONTROL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CURRENCY_SYMBOL", make_descriptor(Character::CURRENCY_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DASH_PUNCTUATION", make_descriptor(Character::DASH_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DECIMAL_DIGIT_NUMBER", make_descriptor(Character::DECIMAL_DIGIT_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_ARABIC_NUMBER", make_descriptor(Character::DIRECTIONALITY_ARABIC_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_BOUNDARY_NEUTRAL", make_descriptor(Character::DIRECTIONALITY_BOUNDARY_NEUTRAL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_NONSPACING_MARK", make_descriptor(Character::DIRECTIONALITY_NONSPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_OTHER_NEUTRALS", make_descriptor(Character::DIRECTIONALITY_OTHER_NEUTRALS));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_PARAGRAPH_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", make_descriptor(Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_SEGMENT_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_SEGMENT_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_UNDEFINED", make_descriptor(Character::DIRECTIONALITY_UNDEFINED));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_WHITESPACE", make_descriptor(Character::DIRECTIONALITY_WHITESPACE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "ENCLOSING_MARK", make_descriptor(Character::ENCLOSING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "END_PUNCTUATION", make_descriptor(Character::END_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FINAL_QUOTE_PUNCTUATION", make_descriptor(Character::FINAL_QUOTE_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FORMAT", make_descriptor(Character::FORMAT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "INITIAL_QUOTE_PUNCTUATION", make_descriptor(Character::INITIAL_QUOTE_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LETTER_NUMBER", make_descriptor(Character::LETTER_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LINE_SEPARATOR", make_descriptor(Character::LINE_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LOWERCASE_LETTER", make_descriptor(Character::LOWERCASE_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MATH_SYMBOL", make_descriptor(Character::MATH_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_CODE_POINT", make_descriptor(Character::MAX_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_HIGH_SURROGATE", make_descriptor(Character::MAX_HIGH_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_LOW_SURROGATE", make_descriptor(Character::MAX_LOW_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_RADIX", make_descriptor(Character::MAX_RADIX));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_SURROGATE", make_descriptor(Character::MAX_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_VALUE", make_descriptor(Character::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_CODE_POINT", make_descriptor(Character::MIN_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_HIGH_SURROGATE", make_descriptor(Character::MIN_HIGH_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_LOW_SURROGATE", make_descriptor(Character::MIN_LOW_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_RADIX", make_descriptor(Character::MIN_RADIX));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SUPPLEMENTARY_CODE_POINT", make_descriptor(Character::MIN_SUPPLEMENTARY_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SURROGATE", make_descriptor(Character::MIN_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_VALUE", make_descriptor(Character::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_LETTER", make_descriptor(Character::MODIFIER_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_SYMBOL", make_descriptor(Character::MODIFIER_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "NON_SPACING_MARK", make_descriptor(Character::NON_SPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_LETTER", make_descriptor(Character::OTHER_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_NUMBER", make_descriptor(Character::OTHER_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_PUNCTUATION", make_descriptor(Character::OTHER_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_SYMBOL", make_descriptor(Character::OTHER_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PARAGRAPH_SEPARATOR", make_descriptor(Character::PARAGRAPH_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PRIVATE_USE", make_descriptor(Character::PRIVATE_USE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SIZE", make_descriptor(Character::SIZE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SPACE_SEPARATOR", make_descriptor(Character::SPACE_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "START_PUNCTUATION", make_descriptor(Character::START_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SURROGATE", make_descriptor(Character::SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TITLECASE_LETTER", make_descriptor(Character::TITLECASE_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Character::TYPE)));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UNASSIGNED", make_descriptor(Character::UNASSIGNED));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UPPERCASE_LETTER", make_descriptor(Character::UPPERCASE_LETTER));
    }

    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Character::initializeClass, 1)))
        return NULL;
      return t_Character::wrap_Object(Character(((t_Character *) arg)->object.this$));
    }
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Character::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds)
    {
      jchar a0;
      Character object((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        INT_CALL(object = Character(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::charCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "charCount", arg);
      return NULL;
    }

    static PyObject *t_Character_charValue(t_Character *self)
    {
      jchar result;
      OBJ_CALL(result = self->object.charValue());
      return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
    }

    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointAt", args);
      return NULL;
    }

    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointBefore", args);
      return NULL;
    }

    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg)
    {
      Character a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jchar a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "digit", args);
      return NULL;
    }

    static PyObject *t_Character_equals(t_Character *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jchar result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::forDigit(a0, a1));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "forDigit", args);
      return NULL;
    }

    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jbyte result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jbyte result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDirectionality", args);
      return NULL;
    }

    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumericValue", args);
      return NULL;
    }

    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getType", args);
      return NULL;
    }

    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDefined", args);
      return NULL;
    }

    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isHighSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isHighSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isISOControl", args);
      return NULL;
    }

    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isIdentifierIgnorable", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetter(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetter", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetterOrDigit(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetterOrDigit", arg);
      return NULL;
    }

    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetter", args);
      return NULL;
    }

    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetterOrDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isLowSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isLowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isMirrored", args);
      return NULL;
    }

    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSpace(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSpace", arg);
      return NULL;
    }

    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isSpaceChar", args);
      return NULL;
    }

    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSupplementaryCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSupplementaryCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jboolean result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogatePair(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogatePair", args);
      return NULL;
    }

    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isValidCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isValidCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isWhitespace", args);
      return NULL;
    }

    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint a4;
          jint result;

          if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2, a3, a4));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jchar result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::reverseBytes(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          jint a0;
          JArray< jchar > a1((jobject) NULL);
          jint a2;
          jint result;

          if (!parseArgs(args, "I[CI", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toChars", args);
      return NULL;
    }

    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::toCodePoint(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toCodePoint", args);
      return NULL;
    }

    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
      }

      PyErr_SetArgsError(type, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_toString(t_Character *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
      }

      PyErr_SetArgsError(type, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      Character result((jobject) NULL);

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::valueOf(a0));
        return t_Character::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/cluster/Clustering.h"
#include "stallone/api/cluster/ClusterUtilities.h"
#include "stallone/api/cluster/ClusterFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace cluster {

      ::java::lang::Class *Clustering::class$ = NULL;
      jmethodID *Clustering::mids$ = NULL;
      bool Clustering::live$ = false;
      ::stallone::api::cluster::ClusterFactory *Clustering::create = NULL;
      ::stallone::api::cluster::ClusterUtilities *Clustering::util = NULL;

      jclass Clustering::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/cluster/Clustering");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          cls = (jclass) class$->this$;

          create = new ::stallone::api::cluster::ClusterFactory(env->getStaticObjectField(cls, "create", "Lstallone/api/cluster/ClusterFactory;"));
          util = new ::stallone::api::cluster::ClusterUtilities(env->getStaticObjectField(cls, "util", "Lstallone/api/cluster/ClusterUtilities;"));
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Clustering::Clustering() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace cluster {
      static PyObject *t_Clustering_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Clustering_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Clustering_init_(t_Clustering *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Clustering__methods_[] = {
        DECLARE_METHOD(t_Clustering, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Clustering, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Clustering, t_Clustering, ::java::lang::Object, Clustering, t_Clustering_init_, 0, 0, 0, 0, 0);

      void t_Clustering::install(PyObject *module)
      {
        installType(&PY_TYPE(Clustering), module, "Clustering", 0);
      }

      void t_Clustering::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Clustering).tp_dict, "class_", make_descriptor(Clustering::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Clustering).tp_dict, "wrapfn_", make_descriptor(t_Clustering::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Clustering).tp_dict, "boxfn_", make_descriptor(boxObject));
        env->getClass(Clustering::initializeClass);
        PyDict_SetItemString(PY_TYPE(Clustering).tp_dict, "create", make_descriptor(::stallone::api::cluster::t_ClusterFactory::wrap_Object(*Clustering::create)));
        PyDict_SetItemString(PY_TYPE(Clustering).tp_dict, "util", make_descriptor(::stallone::api::cluster::t_ClusterUtilities::wrap_Object(*Clustering::util)));
      }

      static PyObject *t_Clustering_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Clustering::initializeClass, 1)))
          return NULL;
        return t_Clustering::wrap_Object(Clustering(((t_Clustering *) arg)->object.this$));
      }
      static PyObject *t_Clustering_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Clustering::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Clustering_init_(t_Clustering *self, PyObject *args, PyObject *kwds)
      {
        Clustering object((jobject) NULL);

        INT_CALL(object = Clustering());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/hmm/IExpectationMaximization.h"
#include "stallone/api/hmm/IHMMParameters.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace hmm {

      ::java::lang::Class *IExpectationMaximization::class$ = NULL;
      jmethodID *IExpectationMaximization::mids$ = NULL;
      bool IExpectationMaximization::live$ = false;

      jclass IExpectationMaximization::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/hmm/IExpectationMaximization");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getLogLikelihoodHistory_dab10e78] = env->getMethodID(cls, "getLogLikelihoodHistory", "()[D");
          mids$[mid_setInitialParameters_ba9323e8] = env->getMethodID(cls, "setInitialParameters", "(Lstallone/api/hmm/IHMMParameters;)V");
          mids$[mid_setLikelihoodDecreaseTolerance_5d1c7645] = env->getMethodID(cls, "setLikelihoodDecreaseTolerance", "(D)V");
          mids$[mid_setMaximumNumberOfStep_39c7bd3c] = env->getMethodID(cls, "setMaximumNumberOfStep", "(I)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      JArray< jdouble > IExpectationMaximization::getLogLikelihoodHistory() const
      {
        return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getLogLikelihoodHistory_dab10e78]));
      }

      void IExpectationMaximization::setInitialParameters(const ::stallone::api::hmm::IHMMParameters & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setInitialParameters_ba9323e8], a0.this$);
      }

      void IExpectationMaximization::setLikelihoodDecreaseTolerance(jdouble a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setLikelihoodDecreaseTolerance_5d1c7645], a0);
      }

      void IExpectationMaximization::setMaximumNumberOfStep(jint a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setMaximumNumberOfStep_39c7bd3c], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace hmm {
      static PyObject *t_IExpectationMaximization_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IExpectationMaximization_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IExpectationMaximization_getLogLikelihoodHistory(t_IExpectationMaximization *self);
      static PyObject *t_IExpectationMaximization_setInitialParameters(t_IExpectationMaximization *self, PyObject *arg);
      static PyObject *t_IExpectationMaximization_setLikelihoodDecreaseTolerance(t_IExpectationMaximization *self, PyObject *arg);
      static PyObject *t_IExpectationMaximization_setMaximumNumberOfStep(t_IExpectationMaximization *self, PyObject *arg);
      static int t_IExpectationMaximization_set__initialParameters(t_IExpectationMaximization *self, PyObject *arg, void *data);
      static int t_IExpectationMaximization_set__likelihoodDecreaseTolerance(t_IExpectationMaximization *self, PyObject *arg, void *data);
      static PyObject *t_IExpectationMaximization_get__logLikelihoodHistory(t_IExpectationMaximization *self, void *data);
      static int t_IExpectationMaximization_set__maximumNumberOfStep(t_IExpectationMaximization *self, PyObject *arg, void *data);
      static PyGetSetDef t_IExpectationMaximization__fields_[] = {
        DECLARE_SET_FIELD(t_IExpectationMaximization, initialParameters),
        DECLARE_SET_FIELD(t_IExpectationMaximization, likelihoodDecreaseTolerance),
        DECLARE_GET_FIELD(t_IExpectationMaximization, logLikelihoodHistory),
        DECLARE_SET_FIELD(t_IExpectationMaximization, maximumNumberOfStep),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IExpectationMaximization__methods_[] = {
        DECLARE_METHOD(t_IExpectationMaximization, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IExpectationMaximization, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IExpectationMaximization, getLogLikelihoodHistory, METH_NOARGS),
        DECLARE_METHOD(t_IExpectationMaximization, setInitialParameters, METH_O),
        DECLARE_METHOD(t_IExpectationMaximization, setLikelihoodDecreaseTolerance, METH_O),
        DECLARE_METHOD(t_IExpectationMaximization, setMaximumNumberOfStep, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IExpectationMaximization, t_IExpectationMaximization, ::stallone::api::hmm::IHMMOptimizer, IExpectationMaximization, abstract_init, 0, 0, t_IExpectationMaximization__fields_, 0, 0);

      void t_IExpectationMaximization::install(PyObject *module)
      {
        installType(&PY_TYPE(IExpectationMaximization), module, "IExpectationMaximization", 0);
      }

      void t_IExpectationMaximization::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IExpectationMaximization).tp_dict, "class_", make_descriptor(IExpectationMaximization::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IExpectationMaximization).tp_dict, "wrapfn_", make_descriptor(t_IExpectationMaximization::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IExpectationMaximization).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IExpectationMaximization_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IExpectationMaximization::initializeClass, 1)))
          return NULL;
        return t_IExpectationMaximization::wrap_Object(IExpectationMaximization(((t_IExpectationMaximization *) arg)->object.this$));
      }
      static PyObject *t_IExpectationMaximization_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IExpectationMaximization::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IExpectationMaximization_getLogLikelihoodHistory(t_IExpectationMaximization *self)
      {
        JArray< jdouble > result((jobject) NULL);
        OBJ_CALL(result = self->object.getLogLikelihoodHistory());
        return result.wrap();
      }

      static PyObject *t_IExpectationMaximization_setInitialParameters(t_IExpectationMaximization *self, PyObject *arg)
      {
        ::stallone::api::hmm::IHMMParameters a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::hmm::IHMMParameters::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setInitialParameters(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setInitialParameters", arg);
        return NULL;
      }

      static PyObject *t_IExpectationMaximization_setLikelihoodDecreaseTolerance(t_IExpectationMaximization *self, PyObject *arg)
      {
        jdouble a0;

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(self->object.setLikelihoodDecreaseTolerance(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setLikelihoodDecreaseTolerance", arg);
        return NULL;
      }

      static PyObject *t_IExpectationMaximization_setMaximumNumberOfStep(t_IExpectationMaximization *self, PyObject *arg)
      {
        jint a0;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(self->object.setMaximumNumberOfStep(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setMaximumNumberOfStep", arg);
        return NULL;
      }

      static int t_IExpectationMaximization_set__initialParameters(t_IExpectationMaximization *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::hmm::IHMMParameters value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::hmm::IHMMParameters::initializeClass, &value))
          {
            INT_CALL(self->object.setInitialParameters(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "initialParameters", arg);
        return -1;
      }

      static int t_IExpectationMaximization_set__likelihoodDecreaseTolerance(t_IExpectationMaximization *self, PyObject *arg, void *data)
      {
        {
          jdouble value;
          if (!parseArg(arg, "D", &value))
          {
            INT_CALL(self->object.setLikelihoodDecreaseTolerance(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "likelihoodDecreaseTolerance", arg);
        return -1;
      }

      static PyObject *t_IExpectationMaximization_get__logLikelihoodHistory(t_IExpectationMaximization *self, void *data)
      {
        JArray< jdouble > value((jobject) NULL);
        OBJ_CALL(value = self->object.getLogLikelihoodHistory());
        return value.wrap();
      }

      static int t_IExpectationMaximization_set__maximumNumberOfStep(t_IExpectationMaximization *self, PyObject *arg, void *data)
      {
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object.setMaximumNumberOfStep(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "maximumNumberOfStep", arg);
        return -1;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/discretization/Discretization.h"
#include "stallone/api/discretization/DiscretizationFactory.h"
#include "stallone/api/discretization/DiscretizationUtilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace discretization {

      ::java::lang::Class *Discretization::class$ = NULL;
      jmethodID *Discretization::mids$ = NULL;
      bool Discretization::live$ = false;
      ::stallone::api::discretization::DiscretizationFactory *Discretization::create = NULL;
      ::stallone::api::discretization::DiscretizationUtilities *Discretization::util = NULL;

      jclass Discretization::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/discretization/Discretization");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          cls = (jclass) class$->this$;

          create = new ::stallone::api::discretization::DiscretizationFactory(env->getStaticObjectField(cls, "create", "Lstallone/api/discretization/DiscretizationFactory;"));
          util = new ::stallone::api::discretization::DiscretizationUtilities(env->getStaticObjectField(cls, "util", "Lstallone/api/discretization/DiscretizationUtilities;"));
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Discretization::Discretization() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace discretization {
      static PyObject *t_Discretization_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Discretization_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Discretization_init_(t_Discretization *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Discretization__methods_[] = {
        DECLARE_METHOD(t_Discretization, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Discretization, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Discretization, t_Discretization, ::java::lang::Object, Discretization, t_Discretization_init_, 0, 0, 0, 0, 0);

      void t_Discretization::install(PyObject *module)
      {
        installType(&PY_TYPE(Discretization), module, "Discretization", 0);
      }

      void t_Discretization::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Discretization).tp_dict, "class_", make_descriptor(Discretization::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Discretization).tp_dict, "wrapfn_", make_descriptor(t_Discretization::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Discretization).tp_dict, "boxfn_", make_descriptor(boxObject));
        env->getClass(Discretization::initializeClass);
        PyDict_SetItemString(PY_TYPE(Discretization).tp_dict, "create", make_descriptor(::stallone::api::discretization::t_DiscretizationFactory::wrap_Object(*Discretization::create)));
        PyDict_SetItemString(PY_TYPE(Discretization).tp_dict, "util", make_descriptor(::stallone::api::discretization::t_DiscretizationUtilities::wrap_Object(*Discretization::util)));
      }

      static PyObject *t_Discretization_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Discretization::initializeClass, 1)))
          return NULL;
        return t_Discretization::wrap_Object(Discretization(((t_Discretization *) arg)->object.this$));
      }
      static PyObject *t_Discretization_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Discretization::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Discretization_init_(t_Discretization *self, PyObject *args, PyObject *kwds)
      {
        Discretization object((jobject) NULL);

        INT_CALL(object = Discretization());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/IAlgorithm.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {

    ::java::lang::Class *IAlgorithm::class$ = NULL;
    jmethodID *IAlgorithm::mids$ = NULL;
    bool IAlgorithm::live$ = false;

    jclass IAlgorithm::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("stallone/api/IAlgorithm");

        mids$ = new jmethodID[max_mid];
        mids$[mid_perform_54c6a166] = env->getMethodID(cls, "perform", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void IAlgorithm::perform() const
    {
      env->callVoidMethod(this$, mids$[mid_perform_54c6a166]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    static PyObject *t_IAlgorithm_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IAlgorithm_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IAlgorithm_perform(t_IAlgorithm *self);

    static PyMethodDef t_IAlgorithm__methods_[] = {
      DECLARE_METHOD(t_IAlgorithm, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IAlgorithm, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IAlgorithm, perform, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IAlgorithm, t_IAlgorithm, ::java::lang::Object, IAlgorithm, abstract_init, 0, 0, 0, 0, 0);

    void t_IAlgorithm::install(PyObject *module)
    {
      installType(&PY_TYPE(IAlgorithm), module, "IAlgorithm", 0);
    }

    void t_IAlgorithm::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IAlgorithm).tp_dict, "class_", make_descriptor(IAlgorithm::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IAlgorithm).tp_dict, "wrapfn_", make_descriptor(t_IAlgorithm::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IAlgorithm).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IAlgorithm_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IAlgorithm::initializeClass, 1)))
        return NULL;
      return t_IAlgorithm::wrap_Object(IAlgorithm(((t_IAlgorithm *) arg)->object.this$));
    }
    static PyObject *t_IAlgorithm_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IAlgorithm::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_IAlgorithm_perform(t_IAlgorithm *self)
    {
      OBJ_CALL(self->object.perform());
      Py_RETURN_NONE;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/potential/Potentials.h"
#include "stallone/api/potential/PotentialUtilities.h"
#include "stallone/api/potential/PotentialFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace potential {

      ::java::lang::Class *Potentials::class$ = NULL;
      jmethodID *Potentials::mids$ = NULL;
      bool Potentials::live$ = false;
      ::stallone::api::potential::PotentialFactory *Potentials::create = NULL;
      ::stallone::api::potential::PotentialUtilities *Potentials::util = NULL;

      jclass Potentials::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/potential/Potentials");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          cls = (jclass) class$->this$;

          create = new ::stallone::api::potential::PotentialFactory(env->getStaticObjectField(cls, "create", "Lstallone/api/potential/PotentialFactory;"));
          util = new ::stallone::api::potential::PotentialUtilities(env->getStaticObjectField(cls, "util", "Lstallone/api/potential/PotentialUtilities;"));
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Potentials::Potentials() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace potential {
      static PyObject *t_Potentials_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Potentials_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Potentials_init_(t_Potentials *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Potentials__methods_[] = {
        DECLARE_METHOD(t_Potentials, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Potentials, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Potentials, t_Potentials, ::java::lang::Object, Potentials, t_Potentials_init_, 0, 0, 0, 0, 0);

      void t_Potentials::install(PyObject *module)
      {
        installType(&PY_TYPE(Potentials), module, "Potentials", 0);
      }

      void t_Potentials::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Potentials).tp_dict, "class_", make_descriptor(Potentials::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Potentials).tp_dict, "wrapfn_", make_descriptor(t_Potentials::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Potentials).tp_dict, "boxfn_", make_descriptor(boxObject));
        env->getClass(Potentials::initializeClass);
        PyDict_SetItemString(PY_TYPE(Potentials).tp_dict, "create", make_descriptor(::stallone::api::potential::t_PotentialFactory::wrap_Object(*Potentials::create)));
        PyDict_SetItemString(PY_TYPE(Potentials).tp_dict, "util", make_descriptor(::stallone::api::potential::t_PotentialUtilities::wrap_Object(*Potentials::util)));
      }

      static PyObject *t_Potentials_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Potentials::initializeClass, 1)))
          return NULL;
        return t_Potentials::wrap_Object(Potentials(((t_Potentials *) arg)->object.this$));
      }
      static PyObject *t_Potentials_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Potentials::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Potentials_init_(t_Potentials *self, PyObject *args, PyObject *kwds)
      {
        Potentials object((jobject) NULL);

        INT_CALL(object = Potentials());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/potential/IEnergyModel.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace potential {

      ::java::lang::Class *IEnergyModel::class$ = NULL;
      jmethodID *IEnergyModel::mids$ = NULL;
      bool IEnergyModel::live$ = false;

      jclass IEnergyModel::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/potential/IEnergyModel");

          mids$ = new jmethodID[max_mid];
          mids$[mid_calculate_54c6a16a] = env->getMethodID(cls, "calculate", "()Z");
          mids$[mid_getCoordinates_1d53e353] = env->getMethodID(cls, "getCoordinates", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getEnergy_54c6a174] = env->getMethodID(cls, "getEnergy", "()D");
          mids$[mid_getGradient_1d53e353] = env->getMethodID(cls, "getGradient", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getNDimensions_54c6a179] = env->getMethodID(cls, "getNDimensions", "()I");
          mids$[mid_setCoordinates_0253084a] = env->getMethodID(cls, "setCoordinates", "(Lstallone/api/doubles/IDoubleArray;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jboolean IEnergyModel::calculate() const
      {
        return env->callBooleanMethod(this$, mids$[mid_calculate_54c6a16a]);
      }

      ::stallone::api::doubles::IDoubleArray IEnergyModel::getCoordinates() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getCoordinates_1d53e353]));
      }

      jdouble IEnergyModel::getEnergy() const
      {
        return env->callDoubleMethod(this$, mids$[mid_getEnergy_54c6a174]);
      }

      ::stallone::api::doubles::IDoubleArray IEnergyModel::getGradient() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getGradient_1d53e353]));
      }

      jint IEnergyModel::getNDimensions() const
      {
        return env->callIntMethod(this$, mids$[mid_getNDimensions_54c6a179]);
      }

      void IEnergyModel::setCoordinates(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setCoordinates_0253084a], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace potential {
      static PyObject *t_IEnergyModel_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IEnergyModel_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IEnergyModel_calculate(t_IEnergyModel *self);
      static PyObject *t_IEnergyModel_getCoordinates(t_IEnergyModel *self);
      static PyObject *t_IEnergyModel_getEnergy(t_IEnergyModel *self);
      static PyObject *t_IEnergyModel_getGradient(t_IEnergyModel *self);
      static PyObject *t_IEnergyModel_getNDimensions(t_IEnergyModel *self);
      static PyObject *t_IEnergyModel_setCoordinates(t_IEnergyModel *self, PyObject *arg);
      static PyObject *t_IEnergyModel_get__coordinates(t_IEnergyModel *self, void *data);
      static int t_IEnergyModel_set__coordinates(t_IEnergyModel *self, PyObject *arg, void *data);
      static PyObject *t_IEnergyModel_get__energy(t_IEnergyModel *self, void *data);
      static PyObject *t_IEnergyModel_get__gradient(t_IEnergyModel *self, void *data);
      static PyObject *t_IEnergyModel_get__nDimensions(t_IEnergyModel *self, void *data);
      static PyGetSetDef t_IEnergyModel__fields_[] = {
        DECLARE_GETSET_FIELD(t_IEnergyModel, coordinates),
        DECLARE_GET_FIELD(t_IEnergyModel, energy),
        DECLARE_GET_FIELD(t_IEnergyModel, gradient),
        DECLARE_GET_FIELD(t_IEnergyModel, nDimensions),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IEnergyModel__methods_[] = {
        DECLARE_METHOD(t_IEnergyModel, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IEnergyModel, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IEnergyModel, calculate, METH_NOARGS),
        DECLARE_METHOD(t_IEnergyModel, getCoordinates, METH_NOARGS),
        DECLARE_METHOD(t_IEnergyModel, getEnergy, METH_NOARGS),
        DECLARE_METHOD(t_IEnergyModel, getGradient, METH_NOARGS),
        DECLARE_METHOD(t_IEnergyModel, getNDimensions, METH_NOARGS),
        DECLARE_METHOD(t_IEnergyModel, setCoordinates, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IEnergyModel, t_IEnergyModel, ::java::lang::Object, IEnergyModel, abstract_init, 0, 0, t_IEnergyModel__fields_, 0, 0);

      void t_IEnergyModel::install(PyObject *module)
      {
        installType(&PY_TYPE(IEnergyModel), module, "IEnergyModel", 0);
      }

      void t_IEnergyModel::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IEnergyModel).tp_dict, "class_", make_descriptor(IEnergyModel::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IEnergyModel).tp_dict, "wrapfn_", make_descriptor(t_IEnergyModel::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IEnergyModel).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IEnergyModel_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IEnergyModel::initializeClass, 1)))
          return NULL;
        return t_IEnergyModel::wrap_Object(IEnergyModel(((t_IEnergyModel *) arg)->object.this$));
      }
      static PyObject *t_IEnergyModel_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IEnergyModel::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IEnergyModel_calculate(t_IEnergyModel *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.calculate());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_IEnergyModel_getCoordinates(t_IEnergyModel *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getCoordinates());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_IEnergyModel_getEnergy(t_IEnergyModel *self)
      {
        jdouble result;
        OBJ_CALL(result = self->object.getEnergy());
        return PyFloat_FromDouble((double) result);
      }

      static PyObject *t_IEnergyModel_getGradient(t_IEnergyModel *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getGradient());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_IEnergyModel_getNDimensions(t_IEnergyModel *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getNDimensions());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IEnergyModel_setCoordinates(t_IEnergyModel *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setCoordinates(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setCoordinates", arg);
        return NULL;
      }

      static PyObject *t_IEnergyModel_get__coordinates(t_IEnergyModel *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getCoordinates());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }
      static int t_IEnergyModel_set__coordinates(t_IEnergyModel *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setCoordinates(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "coordinates", arg);
        return -1;
      }

      static PyObject *t_IEnergyModel_get__energy(t_IEnergyModel *self, void *data)
      {
        jdouble value;
        OBJ_CALL(value = self->object.getEnergy());
        return PyFloat_FromDouble((double) value);
      }

      static PyObject *t_IEnergyModel_get__gradient(t_IEnergyModel *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getGradient());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }

      static PyObject *t_IEnergyModel_get__nDimensions(t_IEnergyModel *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getNDimensions());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Enum.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Enum::class$ = NULL;
    jmethodID *Enum::mids$ = NULL;
    bool Enum::live$ = false;

    jclass Enum::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Enum");

        mids$ = new jmethodID[max_mid];
        mids$[mid_compareTo_618aa849] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Enum;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
        mids$[mid_ordinal_54c6a179] = env->getMethodID(cls, "ordinal", "()I");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_valueOf_46e8491f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jint Enum::compareTo(const Enum & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_618aa849], a0.this$);
    }

    jboolean Enum::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Class Enum::getDeclaringClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
    }

    jint Enum::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    ::java::lang::String Enum::name() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
    }

    jint Enum::ordinal() const
    {
      return env->callIntMethod(this$, mids$[mid_ordinal_54c6a179]);
    }

    ::java::lang::String Enum::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    Enum Enum::valueOf(const ::java::lang::Class & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Enum(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46e8491f], a0.this$, a1.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg);
    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_getDeclaringClass(t_Enum *self);
    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_name(t_Enum *self);
    static PyObject *t_Enum_ordinal(t_Enum *self);
    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data);
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data);
    static PyGetSetDef t_Enum__fields_[] = {
      DECLARE_GET_FIELD(t_Enum, declaringClass),
      DECLARE_GET_FIELD(t_Enum, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enum__methods_[] = {
      DECLARE_METHOD(t_Enum, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enum, compareTo, METH_O),
      DECLARE_METHOD(t_Enum, equals, METH_VARARGS),
      DECLARE_METHOD(t_Enum, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Enum, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Enum, name, METH_NOARGS),
      DECLARE_METHOD(t_Enum, ordinal, METH_NOARGS),
      DECLARE_METHOD(t_Enum, toString, METH_VARARGS),
      DECLARE_METHOD(t_Enum, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Enum, t_Enum, ::java::lang::Object, Enum, abstract_init, 0, 0, t_Enum__fields_, 0, 0);
    PyObject *t_Enum::wrap_Object(const Enum& object, PyTypeObject *E)
    {
      PyObject *obj = t_Enum::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = E;
      }
      return obj;
    }

    PyObject *t_Enum::wrap_jobject(const jobject& object, PyTypeObject *E)
    {
      PyObject *obj = t_Enum::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = E;
      }
      return obj;
    }

    void t_Enum::install(PyObject *module)
    {
      installType(&PY_TYPE(Enum), module, "Enum", 0);
    }

    void t_Enum::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "class_", make_descriptor(Enum::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "wrapfn_", make_descriptor(t_Enum::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enum::initializeClass, 1)))
        return NULL;
      return t_Enum::wrap_Object(Enum(((t_Enum *) arg)->object.this$));
    }
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enum::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg)
    {
      Enum a0((jobject) NULL);
      PyTypeObject **p0;
      jint result;

      if (!parseArg(arg, "K", Enum::initializeClass, &a0, &p0, t_Enum::parameters_))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Enum_getDeclaringClass(t_Enum *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Enum_name(t_Enum *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.name());
      return j2p(result);
    }

    static PyObject *t_Enum_ordinal(t_Enum *self)
    {
      jint result;
      OBJ_CALL(result = self->object.ordinal());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Class a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::String a1((jobject) NULL);
      Enum result((jobject) NULL);

      if (!parseArgs(args, "Ks", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::lang::Enum::valueOf(a0, a1));
        return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : t_Enum::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/stat/StatisticsUtilities.h"
#include "stallone/api/ints/IIntArray.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/doubles/IDoubleList.h"
#include "stallone/api/ints/IIntList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace stat {

      ::java::lang::Class *StatisticsUtilities::class$ = NULL;
      jmethodID *StatisticsUtilities::mids$ = NULL;
      bool StatisticsUtilities::live$ = false;

      jclass StatisticsUtilities::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/stat/StatisticsUtilities");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_covariance_608d4898] = env->getMethodID(cls, "covariance", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)D");
          mids$[mid_gaussianDensity_c5d3f3bd] = env->getMethodID(cls, "gaussianDensity", "(DDD)D");
          mids$[mid_histogram_a01ac655] = env->getMethodID(cls, "histogram", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)Lstallone/api/ints/IIntArray;");
          mids$[mid_mean_02530858] = env->getMethodID(cls, "mean", "(Lstallone/api/doubles/IDoubleArray;)D");
          mids$[mid_meanColumn_32638cb7] = env->getMethodID(cls, "meanColumn", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_meanRow_32638cb7] = env->getMethodID(cls, "meanRow", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_splitNonexponentialLifetimes_7d9b9db3] = env->getMethodID(cls, "splitNonexponentialLifetimes", "(Lstallone/api/ints/IIntList;Lstallone/api/doubles/IDoubleList;)[I");
          mids$[mid_splitNonexponentialLifetimes_488ea26a] = env->getMethodID(cls, "splitNonexponentialLifetimes", "([I[D)[I");
          mids$[mid_stdDev_02530858] = env->getMethodID(cls, "stdDev", "(Lstallone/api/doubles/IDoubleArray;)D");
          mids$[mid_variance_02530858] = env->getMethodID(cls, "variance", "(Lstallone/api/doubles/IDoubleArray;)D");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      StatisticsUtilities::StatisticsUtilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      jdouble StatisticsUtilities::covariance(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_covariance_608d4898], a0.this$, a1.this$);
      }

      jdouble StatisticsUtilities::gaussianDensity(jdouble a0, jdouble a1, jdouble a2) const
      {
        return env->callDoubleMethod(this$, mids$[mid_gaussianDensity_c5d3f3bd], a0, a1, a2);
      }

      ::stallone::api::ints::IIntArray StatisticsUtilities::histogram(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_histogram_a01ac655], a0.this$, a1.this$));
      }

      jdouble StatisticsUtilities::mean(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_mean_02530858], a0.this$);
      }

      ::stallone::api::doubles::IDoubleArray StatisticsUtilities::meanColumn(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_meanColumn_32638cb7], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray StatisticsUtilities::meanRow(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_meanRow_32638cb7], a0.this$));
      }

      JArray< jint > StatisticsUtilities::splitNonexponentialLifetimes(const ::stallone::api::ints::IIntList & a0, const ::stallone::api::doubles::IDoubleList & a1) const
      {
        return JArray< jint >(env->callObjectMethod(this$, mids$[mid_splitNonexponentialLifetimes_7d9b9db3], a0.this$, a1.this$));
      }

      JArray< jint > StatisticsUtilities::splitNonexponentialLifetimes(const JArray< jint > & a0, const JArray< jdouble > & a1) const
      {
        return JArray< jint >(env->callObjectMethod(this$, mids$[mid_splitNonexponentialLifetimes_488ea26a], a0.this$, a1.this$));
      }

      jdouble StatisticsUtilities::stdDev(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_stdDev_02530858], a0.this$);
      }

      jdouble StatisticsUtilities::variance(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_variance_02530858], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace stat {
      static PyObject *t_StatisticsUtilities_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_StatisticsUtilities_instance_(PyTypeObject *type, PyObject *arg);
      static int t_StatisticsUtilities_init_(t_StatisticsUtilities *self, PyObject *args, PyObject *kwds);
      static PyObject *t_StatisticsUtilities_covariance(t_StatisticsUtilities *self, PyObject *args);
      static PyObject *t_StatisticsUtilities_gaussianDensity(t_StatisticsUtilities *self, PyObject *args);
      static PyObject *t_StatisticsUtilities_histogram(t_StatisticsUtilities *self, PyObject *args);
      static PyObject *t_StatisticsUtilities_mean(t_StatisticsUtilities *self, PyObject *arg);
      static PyObject *t_StatisticsUtilities_meanColumn(t_StatisticsUtilities *self, PyObject *arg);
      static PyObject *t_StatisticsUtilities_meanRow(t_StatisticsUtilities *self, PyObject *arg);
      static PyObject *t_StatisticsUtilities_splitNonexponentialLifetimes(t_StatisticsUtilities *self, PyObject *args);
      static PyObject *t_StatisticsUtilities_stdDev(t_StatisticsUtilities *self, PyObject *arg);
      static PyObject *t_StatisticsUtilities_variance(t_StatisticsUtilities *self, PyObject *arg);

      static PyMethodDef t_StatisticsUtilities__methods_[] = {
        DECLARE_METHOD(t_StatisticsUtilities, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_StatisticsUtilities, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_StatisticsUtilities, covariance, METH_VARARGS),
        DECLARE_METHOD(t_StatisticsUtilities, gaussianDensity, METH_VARARGS),
        DECLARE_METHOD(t_StatisticsUtilities, histogram, METH_VARARGS),
        DECLARE_METHOD(t_StatisticsUtilities, mean, METH_O),
        DECLARE_METHOD(t_StatisticsUtilities, meanColumn, METH_O),
        DECLARE_METHOD(t_StatisticsUtilities, meanRow, METH_O),
        DECLARE_METHOD(t_StatisticsUtilities, splitNonexponentialLifetimes, METH_VARARGS),
        DECLARE_METHOD(t_StatisticsUtilities, stdDev, METH_O),
        DECLARE_METHOD(t_StatisticsUtilities, variance, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(StatisticsUtilities, t_StatisticsUtilities, ::java::lang::Object, StatisticsUtilities, t_StatisticsUtilities_init_, 0, 0, 0, 0, 0);

      void t_StatisticsUtilities::install(PyObject *module)
      {
        installType(&PY_TYPE(StatisticsUtilities), module, "StatisticsUtilities", 0);
      }

      void t_StatisticsUtilities::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(StatisticsUtilities).tp_dict, "class_", make_descriptor(StatisticsUtilities::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(StatisticsUtilities).tp_dict, "wrapfn_", make_descriptor(t_StatisticsUtilities::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(StatisticsUtilities).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_StatisticsUtilities_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, StatisticsUtilities::initializeClass, 1)))
          return NULL;
        return t_StatisticsUtilities::wrap_Object(StatisticsUtilities(((t_StatisticsUtilities *) arg)->object.this$));
      }
      static PyObject *t_StatisticsUtilities_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, StatisticsUtilities::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_StatisticsUtilities_init_(t_StatisticsUtilities *self, PyObject *args, PyObject *kwds)
      {
        StatisticsUtilities object((jobject) NULL);

        INT_CALL(object = StatisticsUtilities());
        self->object = object;

        return 0;
      }

      static PyObject *t_StatisticsUtilities_covariance(t_StatisticsUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        jdouble result;

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.covariance(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "covariance", args);
        return NULL;
      }

      static PyObject *t_StatisticsUtilities_gaussianDensity(t_StatisticsUtilities *self, PyObject *args)
      {
        jdouble a0;
        jdouble a1;
        jdouble a2;
        jdouble result;

        if (!parseArgs(args, "DDD", &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.gaussianDensity(a0, a1, a2));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "gaussianDensity", args);
        return NULL;
      }

      static PyObject *t_StatisticsUtilities_histogram(t_StatisticsUtilities *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.histogram(a0, a1));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "histogram", args);
        return NULL;
      }

      static PyObject *t_StatisticsUtilities_mean(t_StatisticsUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble result;

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.mean(a0));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "mean", arg);
        return NULL;
      }

      static PyObject *t_StatisticsUtilities_meanColumn(t_StatisticsUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.meanColumn(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "meanColumn", arg);
        return NULL;
      }

      static PyObject *t_StatisticsUtilities_meanRow(t_StatisticsUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.meanRow(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "meanRow", arg);
        return NULL;
      }

      static PyObject *t_StatisticsUtilities_splitNonexponentialLifetimes(t_StatisticsUtilities *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 2:
          {
            ::stallone::api::ints::IIntList a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleList a1((jobject) NULL);
            JArray< jint > result((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::ints::IIntList::initializeClass, ::stallone::api::doubles::IDoubleList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.splitNonexponentialLifetimes(a0, a1));
              return result.wrap();
            }
          }
          {
            JArray< jint > a0((jobject) NULL);
            JArray< jdouble > a1((jobject) NULL);
            JArray< jint > result((jobject) NULL);

            if (!parseArgs(args, "[I[D", &a0, &a1))
            {
              OBJ_CALL(result = self->object.splitNonexponentialLifetimes(a0, a1));
              return result.wrap();
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "splitNonexponentialLifetimes", args);
        return NULL;
      }

      static PyObject *t_StatisticsUtilities_stdDev(t_StatisticsUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble result;

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.stdDev(a0));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "stdDev", arg);
        return NULL;
      }

      static PyObject *t_StatisticsUtilities_variance(t_StatisticsUtilities *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jdouble result;

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.variance(a0));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "variance", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/graph/IIntConnectivity.h"
#include "stallone/api/graph/IIntGraph.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace graph {

      ::java::lang::Class *IIntConnectivity::class$ = NULL;
      jmethodID *IIntConnectivity::mids$ = NULL;
      bool IIntConnectivity::live$ = false;

      jclass IIntConnectivity::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/graph/IIntConnectivity");

          mids$ = new jmethodID[max_mid];
          mids$[mid_perform_54c6a166] = env->getMethodID(cls, "perform", "()V");
          mids$[mid_setGraph_7599d3ca] = env->getMethodID(cls, "setGraph", "(Lstallone/api/graph/IIntGraph;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void IIntConnectivity::perform() const
      {
        env->callVoidMethod(this$, mids$[mid_perform_54c6a166]);
      }

      void IIntConnectivity::setGraph(const ::stallone::api::graph::IIntGraph & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setGraph_7599d3ca], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace graph {
      static PyObject *t_IIntConnectivity_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntConnectivity_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntConnectivity_perform(t_IIntConnectivity *self);
      static PyObject *t_IIntConnectivity_setGraph(t_IIntConnectivity *self, PyObject *arg);
      static int t_IIntConnectivity_set__graph(t_IIntConnectivity *self, PyObject *arg, void *data);
      static PyGetSetDef t_IIntConnectivity__fields_[] = {
        DECLARE_SET_FIELD(t_IIntConnectivity, graph),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IIntConnectivity__methods_[] = {
        DECLARE_METHOD(t_IIntConnectivity, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntConnectivity, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntConnectivity, perform, METH_NOARGS),
        DECLARE_METHOD(t_IIntConnectivity, setGraph, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IIntConnectivity, t_IIntConnectivity, ::java::lang::Object, IIntConnectivity, abstract_init, 0, 0, t_IIntConnectivity__fields_, 0, 0);

      void t_IIntConnectivity::install(PyObject *module)
      {
        installType(&PY_TYPE(IIntConnectivity), module, "IIntConnectivity", 0);
      }

      void t_IIntConnectivity::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IIntConnectivity).tp_dict, "class_", make_descriptor(IIntConnectivity::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IIntConnectivity).tp_dict, "wrapfn_", make_descriptor(t_IIntConnectivity::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IIntConnectivity).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IIntConnectivity_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IIntConnectivity::initializeClass, 1)))
          return NULL;
        return t_IIntConnectivity::wrap_Object(IIntConnectivity(((t_IIntConnectivity *) arg)->object.this$));
      }
      static PyObject *t_IIntConnectivity_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IIntConnectivity::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IIntConnectivity_perform(t_IIntConnectivity *self)
      {
        OBJ_CALL(self->object.perform());
        Py_RETURN_NONE;
      }

      static PyObject *t_IIntConnectivity_setGraph(t_IIntConnectivity *self, PyObject *arg)
      {
        ::stallone::api::graph::IIntGraph a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::graph::IIntGraph::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setGraph(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setGraph", arg);
        return NULL;
      }

      static int t_IIntConnectivity_set__graph(t_IIntConnectivity *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::graph::IIntGraph value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::graph::IIntGraph::initializeClass, &value))
          {
            INT_CALL(self->object.setGraph(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "graph", arg);
        return -1;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Byte.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Comparable.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Byte::class$ = NULL;
    jmethodID *Byte::mids$ = NULL;
    bool Byte::live$ = false;
    jbyte Byte::MAX_VALUE = (jbyte) 0;
    jbyte Byte::MIN_VALUE = (jbyte) 0;
    jint Byte::SIZE = (jint) 0;
    ::java::lang::Class *Byte::TYPE = NULL;

    jclass Byte::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Byte");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_b2271687] = env->getMethodID(cls, "<init>", "(B)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compareTo_c2b89a9a] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Byte;)I");
        mids$[mid_decode_4a53f64a] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseByte_5fdc3f5c] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;)B");
        mids$[mid_parseByte_6e53ccd2] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;I)B");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_fce80606] = env->getStaticMethodID(cls, "toString", "(B)Ljava/lang/String;");
        mids$[mid_valueOf_f1e1a5a7] = env->getStaticMethodID(cls, "valueOf", "(B)Ljava/lang/Byte;");
        mids$[mid_valueOf_4a53f64a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_valueOf_83e30bb0] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Byte;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_VALUE = env->getStaticByteField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticByteField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Byte::Byte(jbyte a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_b2271687, a0)) {}

    Byte::Byte(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Byte::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Byte::compareTo(const Byte & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_c2b89a9a], a0.this$);
    }

    Byte Byte::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_decode_4a53f64a], a0.this$));
    }

    jdouble Byte::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Byte::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Byte::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Byte::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Byte::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Byte::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_5fdc3f5c], a0.this$);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_6e53ccd2], a0.this$, a1);
    }

    jshort Byte::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Byte::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Byte::toString(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_fce80606], a0));
    }

    Byte Byte::valueOf(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_f1e1a5a7], a0));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4a53f64a], a0.this$));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_83e30bb0], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg);
    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Byte__methods_[] = {
      DECLARE_METHOD(t_Byte, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, compareTo, METH_O),
      DECLARE_METHOD(t_Byte, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, equals, METH_VARARGS),
      DECLARE_METHOD(t_Byte, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Byte, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, parseByte, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Byte, t_Byte, ::java::lang::Number, Byte, t_Byte_init_, 0, 0, 0, 0, 0);

    void t_Byte::install(PyObject *module)
    {
      installType(&PY_TYPE(Byte), module, "Byte", 0);
    }

    void t_Byte::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "class_", make_descriptor(Byte::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "wrapfn_", make_descriptor(unboxByte));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "boxfn_", make_descriptor(boxByte));
      env->getClass(Byte::initializeClass);
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MAX_VALUE", make_descriptor(Byte::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MIN_VALUE", make_descriptor(Byte::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "SIZE", make_descriptor(Byte::SIZE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Byte::TYPE)));
    }

    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Byte::initializeClass, 1)))
        return NULL;
      return t_Byte::wrap_Object(Byte(((t_Byte *) arg)->object.this$));
    }
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Byte::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jbyte a0;
          Byte object((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Byte object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg)
    {
      Byte a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Byte), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Byte result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::decode(a0));
        return t_Byte::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jbyte result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jbyte result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseByte", args);
      return NULL;
    }

    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jbyte a0;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Byte result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0, a1));
            return t_Byte::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/hmm/IHMMParameters.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace hmm {

      ::java::lang::Class *IHMMParameters::class$ = NULL;
      jmethodID *IHMMParameters::mids$ = NULL;
      bool IHMMParameters::live$ = false;

      jclass IHMMParameters::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/hmm/IHMMParameters");

          mids$ = new jmethodID[max_mid];
          mids$[mid_copy_6a5b587d] = env->getMethodID(cls, "copy", "()Lstallone/api/hmm/IHMMParameters;");
          mids$[mid_getInitialDistribution_1d53e353] = env->getMethodID(cls, "getInitialDistribution", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getNStates_54c6a179] = env->getMethodID(cls, "getNStates", "()I");
          mids$[mid_getOutputParameters_e3ead0f5] = env->getMethodID(cls, "getOutputParameters", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getTransitionMatrix_1d53e353] = env->getMethodID(cls, "getTransitionMatrix", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_isReversible_54c6a16a] = env->getMethodID(cls, "isReversible", "()Z");
          mids$[mid_isStationary_54c6a16a] = env->getMethodID(cls, "isStationary", "()Z");
          mids$[mid_setInitialDistribution_0253084a] = env->getMethodID(cls, "setInitialDistribution", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_setOutputParameters_9665a230] = env->getMethodID(cls, "setOutputParameters", "(ILstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_setTransitionMatrix_0253084a] = env->getMethodID(cls, "setTransitionMatrix", "(Lstallone/api/doubles/IDoubleArray;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      IHMMParameters IHMMParameters::copy() const
      {
        return IHMMParameters(env->callObjectMethod(this$, mids$[mid_copy_6a5b587d]));
      }

      ::stallone::api::doubles::IDoubleArray IHMMParameters::getInitialDistribution() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getInitialDistribution_1d53e353]));
      }

      jint IHMMParameters::getNStates() const
      {
        return env->callIntMethod(this$, mids$[mid_getNStates_54c6a179]);
      }

      ::stallone::api::doubles::IDoubleArray IHMMParameters::getOutputParameters(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getOutputParameters_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleArray IHMMParameters::getTransitionMatrix() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getTransitionMatrix_1d53e353]));
      }

      jboolean IHMMParameters::isReversible() const
      {
        return env->callBooleanMethod(this$, mids$[mid_isReversible_54c6a16a]);
      }

      jboolean IHMMParameters::isStationary() const
      {
        return env->callBooleanMethod(this$, mids$[mid_isStationary_54c6a16a]);
      }

      void IHMMParameters::setInitialDistribution(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setInitialDistribution_0253084a], a0.this$);
      }

      void IHMMParameters::setOutputParameters(jint a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setOutputParameters_9665a230], a0, a1.this$);
      }

      void IHMMParameters::setTransitionMatrix(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setTransitionMatrix_0253084a], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace hmm {
      static PyObject *t_IHMMParameters_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IHMMParameters_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IHMMParameters_copy(t_IHMMParameters *self);
      static PyObject *t_IHMMParameters_getInitialDistribution(t_IHMMParameters *self);
      static PyObject *t_IHMMParameters_getNStates(t_IHMMParameters *self);
      static PyObject *t_IHMMParameters_getOutputParameters(t_IHMMParameters *self, PyObject *arg);
      static PyObject *t_IHMMParameters_getTransitionMatrix(t_IHMMParameters *self);
      static PyObject *t_IHMMParameters_isReversible(t_IHMMParameters *self);
      static PyObject *t_IHMMParameters_isStationary(t_IHMMParameters *self);
      static PyObject *t_IHMMParameters_setInitialDistribution(t_IHMMParameters *self, PyObject *arg);
      static PyObject *t_IHMMParameters_setOutputParameters(t_IHMMParameters *self, PyObject *args);
      static PyObject *t_IHMMParameters_setTransitionMatrix(t_IHMMParameters *self, PyObject *arg);
      static PyObject *t_IHMMParameters_get__initialDistribution(t_IHMMParameters *self, void *data);
      static int t_IHMMParameters_set__initialDistribution(t_IHMMParameters *self, PyObject *arg, void *data);
      static PyObject *t_IHMMParameters_get__nStates(t_IHMMParameters *self, void *data);
      static PyObject *t_IHMMParameters_get__reversible(t_IHMMParameters *self, void *data);
      static PyObject *t_IHMMParameters_get__stationary(t_IHMMParameters *self, void *data);
      static PyObject *t_IHMMParameters_get__transitionMatrix(t_IHMMParameters *self, void *data);
      static int t_IHMMParameters_set__transitionMatrix(t_IHMMParameters *self, PyObject *arg, void *data);
      static PyGetSetDef t_IHMMParameters__fields_[] = {
        DECLARE_GETSET_FIELD(t_IHMMParameters, initialDistribution),
        DECLARE_GET_FIELD(t_IHMMParameters, nStates),
        DECLARE_GET_FIELD(t_IHMMParameters, reversible),
        DECLARE_GET_FIELD(t_IHMMParameters, stationary),
        DECLARE_GETSET_FIELD(t_IHMMParameters, transitionMatrix),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IHMMParameters__methods_[] = {
        DECLARE_METHOD(t_IHMMParameters, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IHMMParameters, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IHMMParameters, copy, METH_NOARGS),
        DECLARE_METHOD(t_IHMMParameters, getInitialDistribution, METH_NOARGS),
        DECLARE_METHOD(t_IHMMParameters, getNStates, METH_NOARGS),
        DECLARE_METHOD(t_IHMMParameters, getOutputParameters, METH_O),
        DECLARE_METHOD(t_IHMMParameters, getTransitionMatrix, METH_NOARGS),
        DECLARE_METHOD(t_IHMMParameters, isReversible, METH_NOARGS),
        DECLARE_METHOD(t_IHMMParameters, isStationary, METH_NOARGS),
        DECLARE_METHOD(t_IHMMParameters, setInitialDistribution, METH_O),
        DECLARE_METHOD(t_IHMMParameters, setOutputParameters, METH_VARARGS),
        DECLARE_METHOD(t_IHMMParameters, setTransitionMatrix, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IHMMParameters, t_IHMMParameters, ::java::lang::Object, IHMMParameters, abstract_init, 0, 0, t_IHMMParameters__fields_, 0, 0);

      void t_IHMMParameters::install(PyObject *module)
      {
        installType(&PY_TYPE(IHMMParameters), module, "IHMMParameters", 0);
      }

      void t_IHMMParameters::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IHMMParameters).tp_dict, "class_", make_descriptor(IHMMParameters::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IHMMParameters).tp_dict, "wrapfn_", make_descriptor(t_IHMMParameters::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IHMMParameters).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IHMMParameters_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IHMMParameters::initializeClass, 1)))
          return NULL;
        return t_IHMMParameters::wrap_Object(IHMMParameters(((t_IHMMParameters *) arg)->object.this$));
      }
      static PyObject *t_IHMMParameters_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IHMMParameters::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IHMMParameters_copy(t_IHMMParameters *self)
      {
        IHMMParameters result((jobject) NULL);
        OBJ_CALL(result = self->object.copy());
        return t_IHMMParameters::wrap_Object(result);
      }

      static PyObject *t_IHMMParameters_getInitialDistribution(t_IHMMParameters *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getInitialDistribution());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_IHMMParameters_getNStates(t_IHMMParameters *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getNStates());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IHMMParameters_getOutputParameters(t_IHMMParameters *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.getOutputParameters(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getOutputParameters", arg);
        return NULL;
      }

      static PyObject *t_IHMMParameters_getTransitionMatrix(t_IHMMParameters *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getTransitionMatrix());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_IHMMParameters_isReversible(t_IHMMParameters *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.isReversible());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_IHMMParameters_isStationary(t_IHMMParameters *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.isStationary());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_IHMMParameters_setInitialDistribution(t_IHMMParameters *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setInitialDistribution(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setInitialDistribution", arg);
        return NULL;
      }

      static PyObject *t_IHMMParameters_setOutputParameters(t_IHMMParameters *self, PyObject *args)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);

        if (!parseArgs(args, "Ik", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
        {
          OBJ_CALL(self->object.setOutputParameters(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setOutputParameters", args);
        return NULL;
      }

      static PyObject *t_IHMMParameters_setTransitionMatrix(t_IHMMParameters *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setTransitionMatrix(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setTransitionMatrix", arg);
        return NULL;
      }

      static PyObject *t_IHMMParameters_get__initialDistribution(t_IHMMParameters *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getInitialDistribution());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }
      static int t_IHMMParameters_set__initialDistribution(t_IHMMParameters *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setInitialDistribution(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "initialDistribution", arg);
        return -1;
      }

      static PyObject *t_IHMMParameters_get__nStates(t_IHMMParameters *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getNStates());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_IHMMParameters_get__reversible(t_IHMMParameters *self, void *data)
      {
        jboolean value;
        OBJ_CALL(value = self->object.isReversible());
        Py_RETURN_BOOL(value);
      }

      static PyObject *t_IHMMParameters_get__stationary(t_IHMMParameters *self, void *data)
      {
        jboolean value;
        OBJ_CALL(value = self->object.isStationary());
        Py_RETURN_BOOL(value);
      }

      static PyObject *t_IHMMParameters_get__transitionMatrix(t_IHMMParameters *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getTransitionMatrix());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }
      static int t_IHMMParameters_set__transitionMatrix(t_IHMMParameters *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setTransitionMatrix(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "transitionMatrix", arg);
        return -1;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/hmm/ParameterEstimationException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace hmm {

      ::java::lang::Class *ParameterEstimationException::class$ = NULL;
      jmethodID *ParameterEstimationException::mids$ = NULL;
      bool ParameterEstimationException::live$ = false;

      jclass ParameterEstimationException::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/hmm/ParameterEstimationException");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ParameterEstimationException::ParameterEstimationException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace hmm {
      static PyObject *t_ParameterEstimationException_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ParameterEstimationException_instance_(PyTypeObject *type, PyObject *arg);
      static int t_ParameterEstimationException_init_(t_ParameterEstimationException *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_ParameterEstimationException__methods_[] = {
        DECLARE_METHOD(t_ParameterEstimationException, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ParameterEstimationException, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ParameterEstimationException, t_ParameterEstimationException, ::java::lang::Exception, ParameterEstimationException, t_ParameterEstimationException_init_, 0, 0, 0, 0, 0);

      void t_ParameterEstimationException::install(PyObject *module)
      {
        installType(&PY_TYPE(ParameterEstimationException), module, "ParameterEstimationException", 0);
      }

      void t_ParameterEstimationException::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ParameterEstimationException).tp_dict, "class_", make_descriptor(ParameterEstimationException::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ParameterEstimationException).tp_dict, "wrapfn_", make_descriptor(t_ParameterEstimationException::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ParameterEstimationException).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ParameterEstimationException_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ParameterEstimationException::initializeClass, 1)))
          return NULL;
        return t_ParameterEstimationException::wrap_Object(ParameterEstimationException(((t_ParameterEstimationException *) arg)->object.this$));
      }
      static PyObject *t_ParameterEstimationException_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ParameterEstimationException::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_ParameterEstimationException_init_(t_ParameterEstimationException *self, PyObject *args, PyObject *kwds)
      {
        ::java::lang::String a0((jobject) NULL);
        ParameterEstimationException object((jobject) NULL);

        if (!parseArgs(args, "s", &a0))
        {
          INT_CALL(object = ParameterEstimationException(a0));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/API.h"
#include "stallone/api/algebra/AlgebraUtilities.h"
#include "stallone/api/discretization/DiscretizationFactory.h"
#include "stallone/api/function/FunctionUtilities.h"
#include "stallone/api/potential/PotentialUtilities.h"
#include "stallone/api/complex/ComplexFactory.h"
#include "stallone/api/algebra/AlgebraFactory.h"
#include "stallone/api/hmm/HMMUtilities.h"
#include "stallone/api/complex/ComplexUtilities.h"
#include "stallone/api/intsequence/IntSequenceFactory.h"
#include "stallone/api/cluster/ClusterFactory.h"
#include "stallone/api/mc/MarkovModelUtilities.h"
#include "stallone/api/io/IOFactory.h"
#include "stallone/api/strings/StringUtilities.h"
#include "stallone/api/potential/PotentialFactory.h"
#include "stallone/api/datasequence/DataSequenceUtilities.h"
#include "stallone/api/discretization/DiscretizationUtilities.h"
#include "stallone/api/stat/StatisticsUtilities.h"
#include "stallone/api/ints/IntUtilities.h"
#include "stallone/api/doubles/DoubleFactory.h"
#include "stallone/api/hmm/HMMFactory.h"
#include "stallone/api/io/IOUtilities.h"
#include "stallone/api/datasequence/DataSequenceFactory.h"
#include "stallone/api/dynamics/DynamicsUtilities.h"
#include "stallone/api/graph/GraphUtilities.h"
#include "stallone/api/stat/StatisticsFactory.h"
#include "java/lang/Class.h"
#include "stallone/api/cluster/ClusterUtilities.h"
#include "stallone/api/dynamics/DynamicsFactory.h"
#include "stallone/api/strings/StringFactory.h"
#include "stallone/api/function/FunctionFactory.h"
#include "stallone/api/intsequence/IntSequenceUtilities.h"
#include "stallone/api/mc/MarkovModelFactory.h"
#include "stallone/api/doubles/DoubleUtilities.h"
#include "stallone/api/ints/IntFactory.h"
#include "stallone/api/graph/GraphFactory.h"
#include "JArray.h"

namespace stallone {
  namespace api {

    ::java::lang::Class *API::class$ = NULL;
    jmethodID *API::mids$ = NULL;
    bool API::live$ = false;
    ::stallone::api::algebra::AlgebraUtilities *API::alg = NULL;
    ::stallone::api::algebra::AlgebraFactory *API::algNew = NULL;
    ::stallone::api::cluster::ClusterUtilities *API::cluster = NULL;
    ::stallone::api::cluster::ClusterFactory *API::clusterNew = NULL;
    ::stallone::api::complex::ComplexUtilities *API::complex = NULL;
    ::stallone::api::complex::ComplexFactory *API::complexNew = NULL;
    ::stallone::api::datasequence::DataSequenceUtilities *API::data = NULL;
    ::stallone::api::datasequence::DataSequenceFactory *API::dataNew = NULL;
    ::stallone::api::discretization::DiscretizationUtilities *API::disc = NULL;
    ::stallone::api::discretization::DiscretizationFactory *API::discNew = NULL;
    ::stallone::api::doubles::DoubleUtilities *API::doubles = NULL;
    ::stallone::api::doubles::DoubleFactory *API::doublesNew = NULL;
    ::stallone::api::dynamics::DynamicsUtilities *API::dyn = NULL;
    ::stallone::api::dynamics::DynamicsFactory *API::dynNew = NULL;
    ::stallone::api::function::FunctionUtilities *API::func = NULL;
    ::stallone::api::function::FunctionFactory *API::funcNew = NULL;
    ::stallone::api::graph::GraphUtilities *API::graph = NULL;
    ::stallone::api::graph::GraphFactory *API::graphNew = NULL;
    ::stallone::api::hmm::HMMUtilities *API::hmm = NULL;
    ::stallone::api::hmm::HMMFactory *API::hmmNew = NULL;
    ::stallone::api::ints::IntUtilities *API::ints = NULL;
    ::stallone::api::ints::IntFactory *API::intsNew = NULL;
    ::stallone::api::intsequence::IntSequenceUtilities *API::intseq = NULL;
    ::stallone::api::intsequence::IntSequenceFactory *API::intseqNew = NULL;
    ::stallone::api::io::IOUtilities *API::io = NULL;
    ::stallone::api::io::IOFactory *API::ioNew = NULL;
    ::stallone::api::mc::MarkovModelUtilities *API::msm = NULL;
    ::stallone::api::mc::MarkovModelFactory *API::msmNew = NULL;
    ::stallone::api::potential::PotentialUtilities *API::pot = NULL;
    ::stallone::api::potential::PotentialFactory *API::potNew = NULL;
    ::stallone::api::stat::StatisticsUtilities *API::stat = NULL;
    ::stallone::api::stat::StatisticsFactory *API::statNew = NULL;
    ::stallone::api::strings::StringUtilities *API::str = NULL;
    ::stallone::api::strings::StringFactory *API::strNew = NULL;

    jclass API::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("stallone/api/API");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        alg = new ::stallone::api::algebra::AlgebraUtilities(env->getStaticObjectField(cls, "alg", "Lstallone/api/algebra/AlgebraUtilities;"));
        algNew = new ::stallone::api::algebra::AlgebraFactory(env->getStaticObjectField(cls, "algNew", "Lstallone/api/algebra/AlgebraFactory;"));
        cluster = new ::stallone::api::cluster::ClusterUtilities(env->getStaticObjectField(cls, "cluster", "Lstallone/api/cluster/ClusterUtilities;"));
        clusterNew = new ::stallone::api::cluster::ClusterFactory(env->getStaticObjectField(cls, "clusterNew", "Lstallone/api/cluster/ClusterFactory;"));
        complex = new ::stallone::api::complex::ComplexUtilities(env->getStaticObjectField(cls, "complex", "Lstallone/api/complex/ComplexUtilities;"));
        complexNew = new ::stallone::api::complex::ComplexFactory(env->getStaticObjectField(cls, "complexNew", "Lstallone/api/complex/ComplexFactory;"));
        data = new ::stallone::api::datasequence::DataSequenceUtilities(env->getStaticObjectField(cls, "data", "Lstallone/api/datasequence/DataSequenceUtilities;"));
        dataNew = new ::stallone::api::datasequence::DataSequenceFactory(env->getStaticObjectField(cls, "dataNew", "Lstallone/api/datasequence/DataSequenceFactory;"));
        disc = new ::stallone::api::discretization::DiscretizationUtilities(env->getStaticObjectField(cls, "disc", "Lstallone/api/discretization/DiscretizationUtilities;"));
        discNew = new ::stallone::api::discretization::DiscretizationFactory(env->getStaticObjectField(cls, "discNew", "Lstallone/api/discretization/DiscretizationFactory;"));
        doubles = new ::stallone::api::doubles::DoubleUtilities(env->getStaticObjectField(cls, "doubles", "Lstallone/api/doubles/DoubleUtilities;"));
        doublesNew = new ::stallone::api::doubles::DoubleFactory(env->getStaticObjectField(cls, "doublesNew", "Lstallone/api/doubles/DoubleFactory;"));
        dyn = new ::stallone::api::dynamics::DynamicsUtilities(env->getStaticObjectField(cls, "dyn", "Lstallone/api/dynamics/DynamicsUtilities;"));
        dynNew = new ::stallone::api::dynamics::DynamicsFactory(env->getStaticObjectField(cls, "dynNew", "Lstallone/api/dynamics/DynamicsFactory;"));
        func = new ::stallone::api::function::FunctionUtilities(env->getStaticObjectField(cls, "func", "Lstallone/api/function/FunctionUtilities;"));
        funcNew = new ::stallone::api::function::FunctionFactory(env->getStaticObjectField(cls, "funcNew", "Lstallone/api/function/FunctionFactory;"));
        graph = new ::stallone::api::graph::GraphUtilities(env->getStaticObjectField(cls, "graph", "Lstallone/api/graph/GraphUtilities;"));
        graphNew = new ::stallone::api::graph::GraphFactory(env->getStaticObjectField(cls, "graphNew", "Lstallone/api/graph/GraphFactory;"));
        hmm = new ::stallone::api::hmm::HMMUtilities(env->getStaticObjectField(cls, "hmm", "Lstallone/api/hmm/HMMUtilities;"));
        hmmNew = new ::stallone::api::hmm::HMMFactory(env->getStaticObjectField(cls, "hmmNew", "Lstallone/api/hmm/HMMFactory;"));
        ints = new ::stallone::api::ints::IntUtilities(env->getStaticObjectField(cls, "ints", "Lstallone/api/ints/IntUtilities;"));
        intsNew = new ::stallone::api::ints::IntFactory(env->getStaticObjectField(cls, "intsNew", "Lstallone/api/ints/IntFactory;"));
        intseq = new ::stallone::api::intsequence::IntSequenceUtilities(env->getStaticObjectField(cls, "intseq", "Lstallone/api/intsequence/IntSequenceUtilities;"));
        intseqNew = new ::stallone::api::intsequence::IntSequenceFactory(env->getStaticObjectField(cls, "intseqNew", "Lstallone/api/intsequence/IntSequenceFactory;"));
        io = new ::stallone::api::io::IOUtilities(env->getStaticObjectField(cls, "io", "Lstallone/api/io/IOUtilities;"));
        ioNew = new ::stallone::api::io::IOFactory(env->getStaticObjectField(cls, "ioNew", "Lstallone/api/io/IOFactory;"));
        msm = new ::stallone::api::mc::MarkovModelUtilities(env->getStaticObjectField(cls, "msm", "Lstallone/api/mc/MarkovModelUtilities;"));
        msmNew = new ::stallone::api::mc::MarkovModelFactory(env->getStaticObjectField(cls, "msmNew", "Lstallone/api/mc/MarkovModelFactory;"));
        pot = new ::stallone::api::potential::PotentialUtilities(env->getStaticObjectField(cls, "pot", "Lstallone/api/potential/PotentialUtilities;"));
        potNew = new ::stallone::api::potential::PotentialFactory(env->getStaticObjectField(cls, "potNew", "Lstallone/api/potential/PotentialFactory;"));
        stat = new ::stallone::api::stat::StatisticsUtilities(env->getStaticObjectField(cls, "stat", "Lstallone/api/stat/StatisticsUtilities;"));
        statNew = new ::stallone::api::stat::StatisticsFactory(env->getStaticObjectField(cls, "statNew", "Lstallone/api/stat/StatisticsFactory;"));
        str = new ::stallone::api::strings::StringUtilities(env->getStaticObjectField(cls, "str", "Lstallone/api/strings/StringUtilities;"));
        strNew = new ::stallone::api::strings::StringFactory(env->getStaticObjectField(cls, "strNew", "Lstallone/api/strings/StringFactory;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    API::API() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    static PyObject *t_API_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_API_instance_(PyTypeObject *type, PyObject *arg);
    static int t_API_init_(t_API *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_API__methods_[] = {
      DECLARE_METHOD(t_API, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_API, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(API, t_API, ::java::lang::Object, API, t_API_init_, 0, 0, 0, 0, 0);

    void t_API::install(PyObject *module)
    {
      installType(&PY_TYPE(API), module, "API", 0);
    }

    void t_API::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "class_", make_descriptor(API::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "wrapfn_", make_descriptor(t_API::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(API::initializeClass);
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "alg", make_descriptor(::stallone::api::algebra::t_AlgebraUtilities::wrap_Object(*API::alg)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "algNew", make_descriptor(::stallone::api::algebra::t_AlgebraFactory::wrap_Object(*API::algNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "cluster", make_descriptor(::stallone::api::cluster::t_ClusterUtilities::wrap_Object(*API::cluster)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "clusterNew", make_descriptor(::stallone::api::cluster::t_ClusterFactory::wrap_Object(*API::clusterNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "complex", make_descriptor(::stallone::api::complex::t_ComplexUtilities::wrap_Object(*API::complex)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "complexNew", make_descriptor(::stallone::api::complex::t_ComplexFactory::wrap_Object(*API::complexNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "data", make_descriptor(::stallone::api::datasequence::t_DataSequenceUtilities::wrap_Object(*API::data)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "dataNew", make_descriptor(::stallone::api::datasequence::t_DataSequenceFactory::wrap_Object(*API::dataNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "disc", make_descriptor(::stallone::api::discretization::t_DiscretizationUtilities::wrap_Object(*API::disc)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "discNew", make_descriptor(::stallone::api::discretization::t_DiscretizationFactory::wrap_Object(*API::discNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "doubles", make_descriptor(::stallone::api::doubles::t_DoubleUtilities::wrap_Object(*API::doubles)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "doublesNew", make_descriptor(::stallone::api::doubles::t_DoubleFactory::wrap_Object(*API::doublesNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "dyn", make_descriptor(::stallone::api::dynamics::t_DynamicsUtilities::wrap_Object(*API::dyn)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "dynNew", make_descriptor(::stallone::api::dynamics::t_DynamicsFactory::wrap_Object(*API::dynNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "func", make_descriptor(::stallone::api::function::t_FunctionUtilities::wrap_Object(*API::func)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "funcNew", make_descriptor(::stallone::api::function::t_FunctionFactory::wrap_Object(*API::funcNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "graph", make_descriptor(::stallone::api::graph::t_GraphUtilities::wrap_Object(*API::graph)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "graphNew", make_descriptor(::stallone::api::graph::t_GraphFactory::wrap_Object(*API::graphNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "hmm", make_descriptor(::stallone::api::hmm::t_HMMUtilities::wrap_Object(*API::hmm)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "hmmNew", make_descriptor(::stallone::api::hmm::t_HMMFactory::wrap_Object(*API::hmmNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "ints", make_descriptor(::stallone::api::ints::t_IntUtilities::wrap_Object(*API::ints)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "intsNew", make_descriptor(::stallone::api::ints::t_IntFactory::wrap_Object(*API::intsNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "intseq", make_descriptor(::stallone::api::intsequence::t_IntSequenceUtilities::wrap_Object(*API::intseq)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "intseqNew", make_descriptor(::stallone::api::intsequence::t_IntSequenceFactory::wrap_Object(*API::intseqNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "io", make_descriptor(::stallone::api::io::t_IOUtilities::wrap_Object(*API::io)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "ioNew", make_descriptor(::stallone::api::io::t_IOFactory::wrap_Object(*API::ioNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "msm", make_descriptor(::stallone::api::mc::t_MarkovModelUtilities::wrap_Object(*API::msm)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "msmNew", make_descriptor(::stallone::api::mc::t_MarkovModelFactory::wrap_Object(*API::msmNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "pot", make_descriptor(::stallone::api::potential::t_PotentialUtilities::wrap_Object(*API::pot)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "potNew", make_descriptor(::stallone::api::potential::t_PotentialFactory::wrap_Object(*API::potNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "stat", make_descriptor(::stallone::api::stat::t_StatisticsUtilities::wrap_Object(*API::stat)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "statNew", make_descriptor(::stallone::api::stat::t_StatisticsFactory::wrap_Object(*API::statNew)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "str", make_descriptor(::stallone::api::strings::t_StringUtilities::wrap_Object(*API::str)));
      PyDict_SetItemString(PY_TYPE(API).tp_dict, "strNew", make_descriptor(::stallone::api::strings::t_StringFactory::wrap_Object(*API::strNew)));
    }

    static PyObject *t_API_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, API::initializeClass, 1)))
        return NULL;
      return t_API::wrap_Object(API(((t_API *) arg)->object.this$));
    }
    static PyObject *t_API_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, API::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_API_init_(t_API *self, PyObject *args, PyObject *kwds)
    {
      API object((jobject) NULL);

      INT_CALL(object = API());
      self->object = object;

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/graph/IDynamicIntGraph.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace graph {

      ::java::lang::Class *IDynamicIntGraph::class$ = NULL;
      jmethodID *IDynamicIntGraph::mids$ = NULL;
      bool IDynamicIntGraph::live$ = false;

      jclass IDynamicIntGraph::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/graph/IDynamicIntGraph");

          mids$ = new jmethodID[max_mid];
          mids$[mid_addEdge_d8d154aa] = env->getMethodID(cls, "addEdge", "(II)Z");
          mids$[mid_addNode_39c7bd3c] = env->getMethodID(cls, "addNode", "(I)V");
          mids$[mid_hasEdge_d8d154aa] = env->getMethodID(cls, "hasEdge", "(II)Z");
          mids$[mid_removeAllEdges_54c6a166] = env->getMethodID(cls, "removeAllEdges", "()V");
          mids$[mid_removeEdge_d8d154a6] = env->getMethodID(cls, "removeEdge", "(II)V");
          mids$[mid_removeEdges_39c7bd3c] = env->getMethodID(cls, "removeEdges", "(I)V");
          mids$[mid_removeNode_39c7bd3c] = env->getMethodID(cls, "removeNode", "(I)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jboolean IDynamicIntGraph::addEdge(jint a0, jint a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_addEdge_d8d154aa], a0, a1);
      }

      void IDynamicIntGraph::addNode(jint a0) const
      {
        env->callVoidMethod(this$, mids$[mid_addNode_39c7bd3c], a0);
      }

      jboolean IDynamicIntGraph::hasEdge(jint a0, jint a1) const
      {
        return env->callBooleanMethod(this$, mids$[mid_hasEdge_d8d154aa], a0, a1);
      }

      void IDynamicIntGraph::removeAllEdges() const
      {
        env->callVoidMethod(this$, mids$[mid_removeAllEdges_54c6a166]);
      }

      void IDynamicIntGraph::removeEdge(jint a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_removeEdge_d8d154a6], a0, a1);
      }

      void IDynamicIntGraph::removeEdges(jint a0) const
      {
        env->callVoidMethod(this$, mids$[mid_removeEdges_39c7bd3c], a0);
      }

      void IDynamicIntGraph::removeNode(jint a0) const
      {
        env->callVoidMethod(this$, mids$[mid_removeNode_39c7bd3c], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace graph {
      static PyObject *t_IDynamicIntGraph_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDynamicIntGraph_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDynamicIntGraph_addEdge(t_IDynamicIntGraph *self, PyObject *args);
      static PyObject *t_IDynamicIntGraph_addNode(t_IDynamicIntGraph *self, PyObject *arg);
      static PyObject *t_IDynamicIntGraph_hasEdge(t_IDynamicIntGraph *self, PyObject *args);
      static PyObject *t_IDynamicIntGraph_removeAllEdges(t_IDynamicIntGraph *self);
      static PyObject *t_IDynamicIntGraph_removeEdge(t_IDynamicIntGraph *self, PyObject *args);
      static PyObject *t_IDynamicIntGraph_removeEdges(t_IDynamicIntGraph *self, PyObject *arg);
      static PyObject *t_IDynamicIntGraph_removeNode(t_IDynamicIntGraph *self, PyObject *arg);

      static PyMethodDef t_IDynamicIntGraph__methods_[] = {
        DECLARE_METHOD(t_IDynamicIntGraph, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDynamicIntGraph, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDynamicIntGraph, addEdge, METH_VARARGS),
        DECLARE_METHOD(t_IDynamicIntGraph, addNode, METH_O),
        DECLARE_METHOD(t_IDynamicIntGraph, hasEdge, METH_VARARGS),
        DECLARE_METHOD(t_IDynamicIntGraph, removeAllEdges, METH_NOARGS),
        DECLARE_METHOD(t_IDynamicIntGraph, removeEdge, METH_VARARGS),
        DECLARE_METHOD(t_IDynamicIntGraph, removeEdges, METH_O),
        DECLARE_METHOD(t_IDynamicIntGraph, removeNode, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IDynamicIntGraph, t_IDynamicIntGraph, ::stallone::api::graph::IIntGraph, IDynamicIntGraph, abstract_init, 0, 0, 0, 0, 0);

      void t_IDynamicIntGraph::install(PyObject *module)
      {
        installType(&PY_TYPE(IDynamicIntGraph), module, "IDynamicIntGraph", 0);
      }

      void t_IDynamicIntGraph::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IDynamicIntGraph).tp_dict, "class_", make_descriptor(IDynamicIntGraph::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IDynamicIntGraph).tp_dict, "wrapfn_", make_descriptor(t_IDynamicIntGraph::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IDynamicIntGraph).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IDynamicIntGraph_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IDynamicIntGraph::initializeClass, 1)))
          return NULL;
        return t_IDynamicIntGraph::wrap_Object(IDynamicIntGraph(((t_IDynamicIntGraph *) arg)->object.this$));
      }
      static PyObject *t_IDynamicIntGraph_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IDynamicIntGraph::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IDynamicIntGraph_addEdge(t_IDynamicIntGraph *self, PyObject *args)
      {
        jint a0;
        jint a1;
        jboolean result;

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.addEdge(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "addEdge", args);
        return NULL;
      }

      static PyObject *t_IDynamicIntGraph_addNode(t_IDynamicIntGraph *self, PyObject *arg)
      {
        jint a0;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(self->object.addNode(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "addNode", arg);
        return NULL;
      }

      static PyObject *t_IDynamicIntGraph_hasEdge(t_IDynamicIntGraph *self, PyObject *args)
      {
        jint a0;
        jint a1;
        jboolean result;

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.hasEdge(a0, a1));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "hasEdge", args);
        return NULL;
      }

      static PyObject *t_IDynamicIntGraph_removeAllEdges(t_IDynamicIntGraph *self)
      {
        OBJ_CALL(self->object.removeAllEdges());
        Py_RETURN_NONE;
      }

      static PyObject *t_IDynamicIntGraph_removeEdge(t_IDynamicIntGraph *self, PyObject *args)
      {
        jint a0;
        jint a1;

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(self->object.removeEdge(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "removeEdge", args);
        return NULL;
      }

      static PyObject *t_IDynamicIntGraph_removeEdges(t_IDynamicIntGraph *self, PyObject *arg)
      {
        jint a0;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(self->object.removeEdges(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "removeEdges", arg);
        return NULL;
      }

      static PyObject *t_IDynamicIntGraph_removeNode(t_IDynamicIntGraph *self, PyObject *arg)
      {
        jint a0;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(self->object.removeNode(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "removeNode", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/doubles/DoubleFactory.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/doubles/IDoubleList.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace doubles {

      ::java::lang::Class *DoubleFactory::class$ = NULL;
      jmethodID *DoubleFactory::mids$ = NULL;
      bool DoubleFactory::live$ = false;

      jclass DoubleFactory::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/doubles/DoubleFactory");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_array_ae6f32f9] = env->getMethodID(cls, "array", "(Ljava/lang/String;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_array_e3ead0f5] = env->getMethodID(cls, "array", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_array_381b58a8] = env->getMethodID(cls, "array", "([D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_array_879be6f8] = env->getMethodID(cls, "array", "([[D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_array_3cbb604f] = env->getMethodID(cls, "array", "(II)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_array_25e947ee] = env->getMethodID(cls, "array", "(ID)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_arrayFrom_a5c2d8f9] = env->getMethodID(cls, "arrayFrom", "([I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_arrayFrom_ccfe2d76] = env->getMethodID(cls, "arrayFrom", "([F)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_arrayFrom_381b58a8] = env->getMethodID(cls, "arrayFrom", "([D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_arrayFrom_e50533dc] = env->getMethodID(cls, "arrayFrom", "(D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_arrayFrom_9f1bde93] = env->getMethodID(cls, "arrayFrom", "(D[D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_arrayGrid_c0244e63] = env->getMethodID(cls, "arrayGrid", "(DDI)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_arrayRandom_e3ead0f5] = env->getMethodID(cls, "arrayRandom", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_arrayRange_2ab9bf4a] = env->getMethodID(cls, "arrayRange", "(DDD)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_column_e3ead0f5] = env->getMethodID(cls, "column", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_denseColumn_e3ead0f5] = env->getMethodID(cls, "denseColumn", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_denseMatrix_3cbb604f] = env->getMethodID(cls, "denseMatrix", "(II)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_denseRow_e3ead0f5] = env->getMethodID(cls, "denseRow", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_diag_381b58a8] = env->getMethodID(cls, "diag", "([D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_diag_32638cb7] = env->getMethodID(cls, "diag", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_diag_25e947ee] = env->getMethodID(cls, "diag", "(ID)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_fromFile_ae6f32f9] = env->getMethodID(cls, "fromFile", "(Ljava/lang/String;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_identity_e3ead0f5] = env->getMethodID(cls, "identity", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_list_ddaae285] = env->getMethodID(cls, "list", "(I)Lstallone/api/doubles/IDoubleList;");
          mids$[mid_list_b2944c93] = env->getMethodID(cls, "list", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleList;");
          mids$[mid_list_0b2722e8] = env->getMethodID(cls, "list", "(ID)Lstallone/api/doubles/IDoubleList;");
          mids$[mid_listFrom_40d7ca50] = env->getMethodID(cls, "listFrom", "([F)Lstallone/api/doubles/IDoubleList;");
          mids$[mid_listFrom_c4eaeedd] = env->getMethodID(cls, "listFrom", "([I)Lstallone/api/doubles/IDoubleList;");
          mids$[mid_listFrom_4c109cc2] = env->getMethodID(cls, "listFrom", "([D)Lstallone/api/doubles/IDoubleList;");
          mids$[mid_listFrom_8d6e829a] = env->getMethodID(cls, "listFrom", "(D)Lstallone/api/doubles/IDoubleList;");
          mids$[mid_listFrom_0659110f] = env->getMethodID(cls, "listFrom", "(D[D)Lstallone/api/doubles/IDoubleList;");
          mids$[mid_listRandom_ddaae285] = env->getMethodID(cls, "listRandom", "(I)Lstallone/api/doubles/IDoubleList;");
          mids$[mid_listRange_6c6f4020] = env->getMethodID(cls, "listRange", "(DDD)Lstallone/api/doubles/IDoubleList;");
          mids$[mid_matrix_ae6f32f9] = env->getMethodID(cls, "matrix", "(Ljava/lang/String;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_matrix_879be6f8] = env->getMethodID(cls, "matrix", "([[D)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_matrix_3cbb604f] = env->getMethodID(cls, "matrix", "(II)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_matrix_f1448bb0] = env->getMethodID(cls, "matrix", "(IID)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_matrixFrom_b7906b69] = env->getMethodID(cls, "matrixFrom", "([[I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_matrixFrom_d64998e6] = env->getMethodID(cls, "matrixFrom", "([[F)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_matrixReshape_0a1bc13f] = env->getMethodID(cls, "matrixReshape", "(Lstallone/api/doubles/IDoubleArray;II)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_row_e3ead0f5] = env->getMethodID(cls, "row", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_sparseColumn_e3ead0f5] = env->getMethodID(cls, "sparseColumn", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_sparseMatrix_3cbb604f] = env->getMethodID(cls, "sparseMatrix", "(II)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_sparseRow_e3ead0f5] = env->getMethodID(cls, "sparseRow", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_symmetric_32638cb7] = env->getMethodID(cls, "symmetric", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_symmetricReal_e3ead0f5] = env->getMethodID(cls, "symmetricReal", "(I)Lstallone/api/doubles/IDoubleArray;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      DoubleFactory::DoubleFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::stallone::api::doubles::IDoubleArray DoubleFactory::array(const ::java::lang::String & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_array_ae6f32f9], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::array(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_array_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::array(const JArray< jdouble > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_array_381b58a8], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::array(const JArray< JArray< jdouble > > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_array_879be6f8], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::array(jint a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_array_3cbb604f], a0, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::array(jint a0, jdouble a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_array_25e947ee], a0, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::arrayFrom(const JArray< jint > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_arrayFrom_a5c2d8f9], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::arrayFrom(const JArray< jfloat > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_arrayFrom_ccfe2d76], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::arrayFrom(const JArray< jdouble > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_arrayFrom_381b58a8], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::arrayFrom(jdouble a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_arrayFrom_e50533dc], a0));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::arrayFrom(jdouble a0, const JArray< jdouble > & a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_arrayFrom_9f1bde93], a0, a1.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::arrayGrid(jdouble a0, jdouble a1, jint a2) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_arrayGrid_c0244e63], a0, a1, a2));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::arrayRandom(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_arrayRandom_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::arrayRange(jdouble a0, jdouble a1, jdouble a2) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_arrayRange_2ab9bf4a], a0, a1, a2));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::column(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_column_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::denseColumn(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_denseColumn_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::denseMatrix(jint a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_denseMatrix_3cbb604f], a0, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::denseRow(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_denseRow_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::diag(const JArray< jdouble > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_diag_381b58a8], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::diag(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_diag_32638cb7], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::diag(jint a0, jdouble a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_diag_25e947ee], a0, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::fromFile(const ::java::lang::String & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_fromFile_ae6f32f9], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::identity(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_identity_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleList DoubleFactory::list(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleList(env->callObjectMethod(this$, mids$[mid_list_ddaae285], a0));
      }

      ::stallone::api::doubles::IDoubleList DoubleFactory::list(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::doubles::IDoubleList(env->callObjectMethod(this$, mids$[mid_list_b2944c93], a0.this$));
      }

      ::stallone::api::doubles::IDoubleList DoubleFactory::list(jint a0, jdouble a1) const
      {
        return ::stallone::api::doubles::IDoubleList(env->callObjectMethod(this$, mids$[mid_list_0b2722e8], a0, a1));
      }

      ::stallone::api::doubles::IDoubleList DoubleFactory::listFrom(const JArray< jfloat > & a0) const
      {
        return ::stallone::api::doubles::IDoubleList(env->callObjectMethod(this$, mids$[mid_listFrom_40d7ca50], a0.this$));
      }

      ::stallone::api::doubles::IDoubleList DoubleFactory::listFrom(const JArray< jint > & a0) const
      {
        return ::stallone::api::doubles::IDoubleList(env->callObjectMethod(this$, mids$[mid_listFrom_c4eaeedd], a0.this$));
      }

      ::stallone::api::doubles::IDoubleList DoubleFactory::listFrom(const JArray< jdouble > & a0) const
      {
        return ::stallone::api::doubles::IDoubleList(env->callObjectMethod(this$, mids$[mid_listFrom_4c109cc2], a0.this$));
      }

      ::stallone::api::doubles::IDoubleList DoubleFactory::listFrom(jdouble a0) const
      {
        return ::stallone::api::doubles::IDoubleList(env->callObjectMethod(this$, mids$[mid_listFrom_8d6e829a], a0));
      }

      ::stallone::api::doubles::IDoubleList DoubleFactory::listFrom(jdouble a0, const JArray< jdouble > & a1) const
      {
        return ::stallone::api::doubles::IDoubleList(env->callObjectMethod(this$, mids$[mid_listFrom_0659110f], a0, a1.this$));
      }

      ::stallone::api::doubles::IDoubleList DoubleFactory::listRandom(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleList(env->callObjectMethod(this$, mids$[mid_listRandom_ddaae285], a0));
      }

      ::stallone::api::doubles::IDoubleList DoubleFactory::listRange(jdouble a0, jdouble a1, jdouble a2) const
      {
        return ::stallone::api::doubles::IDoubleList(env->callObjectMethod(this$, mids$[mid_listRange_6c6f4020], a0, a1, a2));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::matrix(const ::java::lang::String & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_matrix_ae6f32f9], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::matrix(const JArray< JArray< jdouble > > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_matrix_879be6f8], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::matrix(jint a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_matrix_3cbb604f], a0, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::matrix(jint a0, jint a1, jdouble a2) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_matrix_f1448bb0], a0, a1, a2));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::matrixFrom(const JArray< JArray< jint > > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_matrixFrom_b7906b69], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::matrixFrom(const JArray< JArray< jfloat > > & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_matrixFrom_d64998e6], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::matrixReshape(const ::stallone::api::doubles::IDoubleArray & a0, jint a1, jint a2) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_matrixReshape_0a1bc13f], a0.this$, a1, a2));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::row(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_row_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::sparseColumn(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_sparseColumn_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::sparseMatrix(jint a0, jint a1) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_sparseMatrix_3cbb604f], a0, a1));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::sparseRow(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_sparseRow_e3ead0f5], a0));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::symmetric(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_symmetric_32638cb7], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray DoubleFactory::symmetricReal(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_symmetricReal_e3ead0f5], a0));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace doubles {
      static PyObject *t_DoubleFactory_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DoubleFactory_instance_(PyTypeObject *type, PyObject *arg);
      static int t_DoubleFactory_init_(t_DoubleFactory *self, PyObject *args, PyObject *kwds);
      static PyObject *t_DoubleFactory_array(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_arrayFrom(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_arrayGrid(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_arrayRandom(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_arrayRange(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_column(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_denseColumn(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_denseMatrix(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_denseRow(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_diag(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_fromFile(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_identity(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_list(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_listFrom(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_listRandom(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_listRange(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_matrix(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_matrixFrom(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_matrixReshape(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_row(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_sparseColumn(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_sparseMatrix(t_DoubleFactory *self, PyObject *args);
      static PyObject *t_DoubleFactory_sparseRow(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_symmetric(t_DoubleFactory *self, PyObject *arg);
      static PyObject *t_DoubleFactory_symmetricReal(t_DoubleFactory *self, PyObject *arg);

      static PyMethodDef t_DoubleFactory__methods_[] = {
        DECLARE_METHOD(t_DoubleFactory, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DoubleFactory, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DoubleFactory, array, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, arrayFrom, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, arrayGrid, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, arrayRandom, METH_O),
        DECLARE_METHOD(t_DoubleFactory, arrayRange, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, column, METH_O),
        DECLARE_METHOD(t_DoubleFactory, denseColumn, METH_O),
        DECLARE_METHOD(t_DoubleFactory, denseMatrix, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, denseRow, METH_O),
        DECLARE_METHOD(t_DoubleFactory, diag, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, fromFile, METH_O),
        DECLARE_METHOD(t_DoubleFactory, identity, METH_O),
        DECLARE_METHOD(t_DoubleFactory, list, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, listFrom, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, listRandom, METH_O),
        DECLARE_METHOD(t_DoubleFactory, listRange, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, matrix, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, matrixFrom, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, matrixReshape, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, row, METH_O),
        DECLARE_METHOD(t_DoubleFactory, sparseColumn, METH_O),
        DECLARE_METHOD(t_DoubleFactory, sparseMatrix, METH_VARARGS),
        DECLARE_METHOD(t_DoubleFactory, sparseRow, METH_O),
        DECLARE_METHOD(t_DoubleFactory, symmetric, METH_O),
        DECLARE_METHOD(t_DoubleFactory, symmetricReal, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(DoubleFactory, t_DoubleFactory, ::java::lang::Object, DoubleFactory, t_DoubleFactory_init_, 0, 0, 0, 0, 0);

      void t_DoubleFactory::install(PyObject *module)
      {
        installType(&PY_TYPE(DoubleFactory), module, "DoubleFactory", 0);
      }

      void t_DoubleFactory::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(DoubleFactory).tp_dict, "class_", make_descriptor(DoubleFactory::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(DoubleFactory).tp_dict, "wrapfn_", make_descriptor(t_DoubleFactory::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(DoubleFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_DoubleFactory_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, DoubleFactory::initializeClass, 1)))
          return NULL;
        return t_DoubleFactory::wrap_Object(DoubleFactory(((t_DoubleFactory *) arg)->object.this$));
      }
      static PyObject *t_DoubleFactory_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, DoubleFactory::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_DoubleFactory_init_(t_DoubleFactory *self, PyObject *args, PyObject *kwds)
      {
        DoubleFactory object((jobject) NULL);

        INT_CALL(object = DoubleFactory());
        self->object = object;

        return 0;
      }

      static PyObject *t_DoubleFactory_array(t_DoubleFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.array(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            jint a0;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.array(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            JArray< jdouble > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[D", &a0))
            {
              OBJ_CALL(result = self->object.array(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            JArray< JArray< jdouble > > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[[D", &a0))
            {
              OBJ_CALL(result = self->object.array(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            jint a1;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.array(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            jint a0;
            jdouble a1;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "ID", &a0, &a1))
            {
              OBJ_CALL(result = self->object.array(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "array", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_arrayFrom(t_DoubleFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            JArray< jint > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[I", &a0))
            {
              OBJ_CALL(result = self->object.arrayFrom(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            JArray< jfloat > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[F", &a0))
            {
              OBJ_CALL(result = self->object.arrayFrom(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            JArray< jdouble > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[D", &a0))
            {
              OBJ_CALL(result = self->object.arrayFrom(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            jdouble a0;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "D", &a0))
            {
              OBJ_CALL(result = self->object.arrayFrom(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jdouble a0;
            JArray< jdouble > a1((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "D[D", &a0, &a1))
            {
              OBJ_CALL(result = self->object.arrayFrom(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "arrayFrom", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_arrayGrid(t_DoubleFactory *self, PyObject *args)
      {
        jdouble a0;
        jdouble a1;
        jint a2;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "DDI", &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.arrayGrid(a0, a1, a2));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "arrayGrid", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_arrayRandom(t_DoubleFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.arrayRandom(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "arrayRandom", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_arrayRange(t_DoubleFactory *self, PyObject *args)
      {
        jdouble a0;
        jdouble a1;
        jdouble a2;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "DDD", &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.arrayRange(a0, a1, a2));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "arrayRange", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_column(t_DoubleFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.column(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "column", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_denseColumn(t_DoubleFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.denseColumn(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "denseColumn", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_denseMatrix(t_DoubleFactory *self, PyObject *args)
      {
        jint a0;
        jint a1;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.denseMatrix(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "denseMatrix", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_denseRow(t_DoubleFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.denseRow(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "denseRow", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_diag(t_DoubleFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            JArray< jdouble > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[D", &a0))
            {
              OBJ_CALL(result = self->object.diag(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.diag(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            jdouble a1;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "ID", &a0, &a1))
            {
              OBJ_CALL(result = self->object.diag(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "diag", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_fromFile(t_DoubleFactory *self, PyObject *arg)
      {
        ::java::lang::String a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "s", &a0))
        {
          OBJ_CALL(result = self->object.fromFile(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "fromFile", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_identity(t_DoubleFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.identity(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "identity", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_list(t_DoubleFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::stallone::api::doubles::IDoubleList result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.list(a0));
              return ::stallone::api::doubles::t_IDoubleList::wrap_Object(result);
            }
          }
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleList result((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.list(a0));
              return ::stallone::api::doubles::t_IDoubleList::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            jdouble a1;
            ::stallone::api::doubles::IDoubleList result((jobject) NULL);

            if (!parseArgs(args, "ID", &a0, &a1))
            {
              OBJ_CALL(result = self->object.list(a0, a1));
              return ::stallone::api::doubles::t_IDoubleList::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "list", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_listFrom(t_DoubleFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            JArray< jfloat > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleList result((jobject) NULL);

            if (!parseArgs(args, "[F", &a0))
            {
              OBJ_CALL(result = self->object.listFrom(a0));
              return ::stallone::api::doubles::t_IDoubleList::wrap_Object(result);
            }
          }
          {
            JArray< jint > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleList result((jobject) NULL);

            if (!parseArgs(args, "[I", &a0))
            {
              OBJ_CALL(result = self->object.listFrom(a0));
              return ::stallone::api::doubles::t_IDoubleList::wrap_Object(result);
            }
          }
          {
            JArray< jdouble > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleList result((jobject) NULL);

            if (!parseArgs(args, "[D", &a0))
            {
              OBJ_CALL(result = self->object.listFrom(a0));
              return ::stallone::api::doubles::t_IDoubleList::wrap_Object(result);
            }
          }
          {
            jdouble a0;
            ::stallone::api::doubles::IDoubleList result((jobject) NULL);

            if (!parseArgs(args, "D", &a0))
            {
              OBJ_CALL(result = self->object.listFrom(a0));
              return ::stallone::api::doubles::t_IDoubleList::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jdouble a0;
            JArray< jdouble > a1((jobject) NULL);
            ::stallone::api::doubles::IDoubleList result((jobject) NULL);

            if (!parseArgs(args, "D[D", &a0, &a1))
            {
              OBJ_CALL(result = self->object.listFrom(a0, a1));
              return ::stallone::api::doubles::t_IDoubleList::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "listFrom", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_listRandom(t_DoubleFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleList result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.listRandom(a0));
          return ::stallone::api::doubles::t_IDoubleList::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "listRandom", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_listRange(t_DoubleFactory *self, PyObject *args)
      {
        jdouble a0;
        jdouble a1;
        jdouble a2;
        ::stallone::api::doubles::IDoubleList result((jobject) NULL);

        if (!parseArgs(args, "DDD", &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.listRange(a0, a1, a2));
          return ::stallone::api::doubles::t_IDoubleList::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "listRange", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_matrix(t_DoubleFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.matrix(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            JArray< JArray< jdouble > > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[[D", &a0))
            {
              OBJ_CALL(result = self->object.matrix(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            jint a1;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.matrix(a0, a1));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          break;
         case 3:
          {
            jint a0;
            jint a1;
            jdouble a2;
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "IID", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.matrix(a0, a1, a2));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "matrix", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_matrixFrom(t_DoubleFactory *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            JArray< JArray< jint > > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[[I", &a0))
            {
              OBJ_CALL(result = self->object.matrixFrom(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
          {
            JArray< JArray< jfloat > > a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

            if (!parseArgs(args, "[[F", &a0))
            {
              OBJ_CALL(result = self->object.matrixFrom(a0));
              return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "matrixFrom", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_matrixReshape(t_DoubleFactory *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint a1;
        jint a2;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "kII", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.matrixReshape(a0, a1, a2));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "matrixReshape", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_row(t_DoubleFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.row(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "row", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_sparseColumn(t_DoubleFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.sparseColumn(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "sparseColumn", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_sparseMatrix(t_DoubleFactory *self, PyObject *args)
      {
        jint a0;
        jint a1;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.sparseMatrix(a0, a1));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "sparseMatrix", args);
        return NULL;
      }

      static PyObject *t_DoubleFactory_sparseRow(t_DoubleFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.sparseRow(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "sparseRow", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_symmetric(t_DoubleFactory *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.symmetric(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "symmetric", arg);
        return NULL;
      }

      static PyObject *t_DoubleFactory_symmetricReal(t_DoubleFactory *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.symmetricReal(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "symmetricReal", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/algebra/AlgebraFactory$LinearSystemEnum.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace algebra {

      ::java::lang::Class *AlgebraFactory$LinearSystemEnum::class$ = NULL;
      jmethodID *AlgebraFactory$LinearSystemEnum::mids$ = NULL;
      bool AlgebraFactory$LinearSystemEnum::live$ = false;
      AlgebraFactory$LinearSystemEnum *AlgebraFactory$LinearSystemEnum::DENSE_QR = NULL;
      AlgebraFactory$LinearSystemEnum *AlgebraFactory$LinearSystemEnum::SPARSE_MTJ_BiCG = NULL;
      AlgebraFactory$LinearSystemEnum *AlgebraFactory$LinearSystemEnum::SPARSE_MTJ_CG = NULL;

      jclass AlgebraFactory$LinearSystemEnum::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/algebra/AlgebraFactory$LinearSystemEnum");

          mids$ = new jmethodID[max_mid];
          mids$[mid_isDense_54c6a16a] = env->getMethodID(cls, "isDense", "()Z");
          mids$[mid_valueOf_ac6d5092] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lstallone/api/algebra/AlgebraFactory$LinearSystemEnum;");
          mids$[mid_values_60249fb8] = env->getStaticMethodID(cls, "values", "()[Lstallone/api/algebra/AlgebraFactory$LinearSystemEnum;");

          class$ = (::java::lang::Class *) new JObject(cls);
          cls = (jclass) class$->this$;

          DENSE_QR = new AlgebraFactory$LinearSystemEnum(env->getStaticObjectField(cls, "DENSE_QR", "Lstallone/api/algebra/AlgebraFactory$LinearSystemEnum;"));
          SPARSE_MTJ_BiCG = new AlgebraFactory$LinearSystemEnum(env->getStaticObjectField(cls, "SPARSE_MTJ_BiCG", "Lstallone/api/algebra/AlgebraFactory$LinearSystemEnum;"));
          SPARSE_MTJ_CG = new AlgebraFactory$LinearSystemEnum(env->getStaticObjectField(cls, "SPARSE_MTJ_CG", "Lstallone/api/algebra/AlgebraFactory$LinearSystemEnum;"));
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jboolean AlgebraFactory$LinearSystemEnum::isDense() const
      {
        return env->callBooleanMethod(this$, mids$[mid_isDense_54c6a16a]);
      }

      AlgebraFactory$LinearSystemEnum AlgebraFactory$LinearSystemEnum::valueOf(const ::java::lang::String & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return AlgebraFactory$LinearSystemEnum(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ac6d5092], a0.this$));
      }

      JArray< AlgebraFactory$LinearSystemEnum > AlgebraFactory$LinearSystemEnum::values()
      {
        jclass cls = env->getClass(initializeClass);
        return JArray< AlgebraFactory$LinearSystemEnum >(env->callStaticObjectMethod(cls, mids$[mid_values_60249fb8]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace algebra {
      static PyObject *t_AlgebraFactory$LinearSystemEnum_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_AlgebraFactory$LinearSystemEnum_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_AlgebraFactory$LinearSystemEnum_isDense(t_AlgebraFactory$LinearSystemEnum *self);
      static PyObject *t_AlgebraFactory$LinearSystemEnum_valueOf(PyTypeObject *type, PyObject *args);
      static PyObject *t_AlgebraFactory$LinearSystemEnum_values(PyTypeObject *type);
      static PyObject *t_AlgebraFactory$LinearSystemEnum_get__dense(t_AlgebraFactory$LinearSystemEnum *self, void *data);
      static PyGetSetDef t_AlgebraFactory$LinearSystemEnum__fields_[] = {
        DECLARE_GET_FIELD(t_AlgebraFactory$LinearSystemEnum, dense),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_AlgebraFactory$LinearSystemEnum__methods_[] = {
        DECLARE_METHOD(t_AlgebraFactory$LinearSystemEnum, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_AlgebraFactory$LinearSystemEnum, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_AlgebraFactory$LinearSystemEnum, isDense, METH_NOARGS),
        DECLARE_METHOD(t_AlgebraFactory$LinearSystemEnum, valueOf, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_AlgebraFactory$LinearSystemEnum, values, METH_NOARGS | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(AlgebraFactory$LinearSystemEnum, t_AlgebraFactory$LinearSystemEnum, ::java::lang::Enum, AlgebraFactory$LinearSystemEnum, abstract_init, 0, 0, t_AlgebraFactory$LinearSystemEnum__fields_, 0, 0);

      void t_AlgebraFactory$LinearSystemEnum::install(PyObject *module)
      {
        installType(&PY_TYPE(AlgebraFactory$LinearSystemEnum), module, "AlgebraFactory$LinearSystemEnum", 0);
      }

      void t_AlgebraFactory$LinearSystemEnum::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$LinearSystemEnum).tp_dict, "class_", make_descriptor(AlgebraFactory$LinearSystemEnum::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$LinearSystemEnum).tp_dict, "wrapfn_", make_descriptor(t_AlgebraFactory$LinearSystemEnum::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$LinearSystemEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        env->getClass(AlgebraFactory$LinearSystemEnum::initializeClass);
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$LinearSystemEnum).tp_dict, "DENSE_QR", make_descriptor(t_AlgebraFactory$LinearSystemEnum::wrap_Object(*AlgebraFactory$LinearSystemEnum::DENSE_QR)));
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$LinearSystemEnum).tp_dict, "SPARSE_MTJ_BiCG", make_descriptor(t_AlgebraFactory$LinearSystemEnum::wrap_Object(*AlgebraFactory$LinearSystemEnum::SPARSE_MTJ_BiCG)));
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$LinearSystemEnum).tp_dict, "SPARSE_MTJ_CG", make_descriptor(t_AlgebraFactory$LinearSystemEnum::wrap_Object(*AlgebraFactory$LinearSystemEnum::SPARSE_MTJ_CG)));
      }

      static PyObject *t_AlgebraFactory$LinearSystemEnum_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, AlgebraFactory$LinearSystemEnum::initializeClass, 1)))
          return NULL;
        return t_AlgebraFactory$LinearSystemEnum::wrap_Object(AlgebraFactory$LinearSystemEnum(((t_AlgebraFactory$LinearSystemEnum *) arg)->object.this$));
      }
      static PyObject *t_AlgebraFactory$LinearSystemEnum_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, AlgebraFactory$LinearSystemEnum::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_AlgebraFactory$LinearSystemEnum_isDense(t_AlgebraFactory$LinearSystemEnum *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.isDense());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_AlgebraFactory$LinearSystemEnum_valueOf(PyTypeObject *type, PyObject *args)
      {
        ::java::lang::String a0((jobject) NULL);
        AlgebraFactory$LinearSystemEnum result((jobject) NULL);

        if (!parseArgs(args, "s", &a0))
        {
          OBJ_CALL(result = ::stallone::api::algebra::AlgebraFactory$LinearSystemEnum::valueOf(a0));
          return t_AlgebraFactory$LinearSystemEnum::wrap_Object(result);
        }

        return callSuper(type, "valueOf", args, 2);
      }

      static PyObject *t_AlgebraFactory$LinearSystemEnum_values(PyTypeObject *type)
      {
        JArray< AlgebraFactory$LinearSystemEnum > result((jobject) NULL);
        OBJ_CALL(result = ::stallone::api::algebra::AlgebraFactory$LinearSystemEnum::values());
        return JArray<jobject>(result.this$).wrap(t_AlgebraFactory$LinearSystemEnum::wrap_jobject);
      }

      static PyObject *t_AlgebraFactory$LinearSystemEnum_get__dense(t_AlgebraFactory$LinearSystemEnum *self, void *data)
      {
        jboolean value;
        OBJ_CALL(value = self->object.isDense());
        Py_RETURN_BOOL(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/strings/Strings.h"
#include "stallone/api/strings/StringUtilities.h"
#include "stallone/api/strings/StringFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace strings {

      ::java::lang::Class *Strings::class$ = NULL;
      jmethodID *Strings::mids$ = NULL;
      bool Strings::live$ = false;
      ::stallone::api::strings::StringFactory *Strings::create = NULL;
      ::stallone::api::strings::StringUtilities *Strings::util = NULL;

      jclass Strings::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/strings/Strings");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          cls = (jclass) class$->this$;

          create = new ::stallone::api::strings::StringFactory(env->getStaticObjectField(cls, "create", "Lstallone/api/strings/StringFactory;"));
          util = new ::stallone::api::strings::StringUtilities(env->getStaticObjectField(cls, "util", "Lstallone/api/strings/StringUtilities;"));
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Strings::Strings() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace strings {
      static PyObject *t_Strings_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Strings_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Strings_init_(t_Strings *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Strings__methods_[] = {
        DECLARE_METHOD(t_Strings, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Strings, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Strings, t_Strings, ::java::lang::Object, Strings, t_Strings_init_, 0, 0, 0, 0, 0);

      void t_Strings::install(PyObject *module)
      {
        installType(&PY_TYPE(Strings), module, "Strings", 0);
      }

      void t_Strings::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Strings).tp_dict, "class_", make_descriptor(Strings::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Strings).tp_dict, "wrapfn_", make_descriptor(t_Strings::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Strings).tp_dict, "boxfn_", make_descriptor(boxObject));
        env->getClass(Strings::initializeClass);
        PyDict_SetItemString(PY_TYPE(Strings).tp_dict, "create", make_descriptor(::stallone::api::strings::t_StringFactory::wrap_Object(*Strings::create)));
        PyDict_SetItemString(PY_TYPE(Strings).tp_dict, "util", make_descriptor(::stallone::api::strings::t_StringUtilities::wrap_Object(*Strings::util)));
      }

      static PyObject *t_Strings_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Strings::initializeClass, 1)))
          return NULL;
        return t_Strings::wrap_Object(Strings(((t_Strings *) arg)->object.this$));
      }
      static PyObject *t_Strings_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Strings::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Strings_init_(t_Strings *self, PyObject *args, PyObject *kwds)
      {
        Strings object((jobject) NULL);

        INT_CALL(object = Strings());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/ints/IIntElement.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace ints {

      ::java::lang::Class *IIntElement::class$ = NULL;
      jmethodID *IIntElement::mids$ = NULL;
      bool IIntElement::live$ = false;

      jclass IIntElement::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/ints/IIntElement");

          mids$ = new jmethodID[max_mid];
          mids$[mid_column_54c6a179] = env->getMethodID(cls, "column", "()I");
          mids$[mid_get_54c6a179] = env->getMethodID(cls, "get", "()I");
          mids$[mid_index_54c6a179] = env->getMethodID(cls, "index", "()I");
          mids$[mid_row_54c6a179] = env->getMethodID(cls, "row", "()I");
          mids$[mid_set_39c7bd3c] = env->getMethodID(cls, "set", "(I)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jint IIntElement::column() const
      {
        return env->callIntMethod(this$, mids$[mid_column_54c6a179]);
      }

      jint IIntElement::get() const
      {
        return env->callIntMethod(this$, mids$[mid_get_54c6a179]);
      }

      jint IIntElement::index() const
      {
        return env->callIntMethod(this$, mids$[mid_index_54c6a179]);
      }

      jint IIntElement::row() const
      {
        return env->callIntMethod(this$, mids$[mid_row_54c6a179]);
      }

      void IIntElement::set(jint a0) const
      {
        env->callVoidMethod(this$, mids$[mid_set_39c7bd3c], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace ints {
      static PyObject *t_IIntElement_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntElement_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntElement_column(t_IIntElement *self);
      static PyObject *t_IIntElement_get(t_IIntElement *self);
      static PyObject *t_IIntElement_index(t_IIntElement *self);
      static PyObject *t_IIntElement_row(t_IIntElement *self);
      static PyObject *t_IIntElement_set(t_IIntElement *self, PyObject *arg);

      static PyMethodDef t_IIntElement__methods_[] = {
        DECLARE_METHOD(t_IIntElement, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntElement, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntElement, column, METH_NOARGS),
        DECLARE_METHOD(t_IIntElement, get, METH_NOARGS),
        DECLARE_METHOD(t_IIntElement, index, METH_NOARGS),
        DECLARE_METHOD(t_IIntElement, row, METH_NOARGS),
        DECLARE_METHOD(t_IIntElement, set, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IIntElement, t_IIntElement, ::java::lang::Object, IIntElement, abstract_init, 0, 0, 0, 0, 0);

      void t_IIntElement::install(PyObject *module)
      {
        installType(&PY_TYPE(IIntElement), module, "IIntElement", 0);
      }

      void t_IIntElement::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IIntElement).tp_dict, "class_", make_descriptor(IIntElement::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IIntElement).tp_dict, "wrapfn_", make_descriptor(t_IIntElement::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IIntElement).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IIntElement_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IIntElement::initializeClass, 1)))
          return NULL;
        return t_IIntElement::wrap_Object(IIntElement(((t_IIntElement *) arg)->object.this$));
      }
      static PyObject *t_IIntElement_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IIntElement::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IIntElement_column(t_IIntElement *self)
      {
        jint result;
        OBJ_CALL(result = self->object.column());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntElement_get(t_IIntElement *self)
      {
        jint result;
        OBJ_CALL(result = self->object.get());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntElement_index(t_IIntElement *self)
      {
        jint result;
        OBJ_CALL(result = self->object.index());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntElement_row(t_IIntElement *self)
      {
        jint result;
        OBJ_CALL(result = self->object.row());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntElement_set(t_IIntElement *self, PyObject *arg)
      {
        jint a0;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(self->object.set(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "set", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/complex/ComplexUtilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace complex {

      ::java::lang::Class *ComplexUtilities::class$ = NULL;
      jmethodID *ComplexUtilities::mids$ = NULL;
      bool ComplexUtilities::live$ = false;

      jclass ComplexUtilities::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/complex/ComplexUtilities");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ComplexUtilities::ComplexUtilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace complex {
      static PyObject *t_ComplexUtilities_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ComplexUtilities_instance_(PyTypeObject *type, PyObject *arg);
      static int t_ComplexUtilities_init_(t_ComplexUtilities *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_ComplexUtilities__methods_[] = {
        DECLARE_METHOD(t_ComplexUtilities, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ComplexUtilities, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ComplexUtilities, t_ComplexUtilities, ::java::lang::Object, ComplexUtilities, t_ComplexUtilities_init_, 0, 0, 0, 0, 0);

      void t_ComplexUtilities::install(PyObject *module)
      {
        installType(&PY_TYPE(ComplexUtilities), module, "ComplexUtilities", 0);
      }

      void t_ComplexUtilities::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ComplexUtilities).tp_dict, "class_", make_descriptor(ComplexUtilities::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ComplexUtilities).tp_dict, "wrapfn_", make_descriptor(t_ComplexUtilities::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ComplexUtilities).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ComplexUtilities_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ComplexUtilities::initializeClass, 1)))
          return NULL;
        return t_ComplexUtilities::wrap_Object(ComplexUtilities(((t_ComplexUtilities *) arg)->object.this$));
      }
      static PyObject *t_ComplexUtilities_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ComplexUtilities::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_ComplexUtilities_init_(t_ComplexUtilities *self, PyObject *args, PyObject *kwds)
      {
        ComplexUtilities object((jobject) NULL);

        INT_CALL(object = ComplexUtilities());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/cluster/IClustering.h"
#include "stallone/api/ints/IIntArray.h"
#include "stallone/api/doubles/IMetric.h"
#include "stallone/api/datasequence/IDataSequence.h"
#include "java/lang/Iterable.h"
#include "java/util/Iterator.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace cluster {

      ::java::lang::Class *IClustering::class$ = NULL;
      jmethodID *IClustering::mids$ = NULL;
      bool IClustering::live$ = false;

      jclass IClustering::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/cluster/IClustering");

          mids$ = new jmethodID[max_mid];
          mids$[mid_clusterCenterIterator_40858c90] = env->getMethodID(cls, "clusterCenterIterator", "()Ljava/util/Iterator;");
          mids$[mid_getClusterAssignment_69a9969d] = env->getMethodID(cls, "getClusterAssignment", "()Lstallone/api/discretization/IDiscretization;");
          mids$[mid_getClusterCenters_26787975] = env->getMethodID(cls, "getClusterCenters", "()Lstallone/api/datasequence/IDataSequence;");
          mids$[mid_getClusterIndexes_4ac77731] = env->getMethodID(cls, "getClusterIndexes", "()Lstallone/api/ints/IIntArray;");
          mids$[mid_getNumberOfClusters_54c6a179] = env->getMethodID(cls, "getNumberOfClusters", "()I");
          mids$[mid_perform_54c6a166] = env->getMethodID(cls, "perform", "()V");
          mids$[mid_setClusterInput_d7ef70c8] = env->getMethodID(cls, "setClusterInput", "(Lstallone/api/datasequence/IDataSequence;)V");
          mids$[mid_setClusterInput_ae885829] = env->getMethodID(cls, "setClusterInput", "(Ljava/lang/Iterable;I)V");
          mids$[mid_setMetric_9f46b3d3] = env->getMethodID(cls, "setMetric", "(Lstallone/api/doubles/IMetric;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::util::Iterator IClustering::clusterCenterIterator() const
      {
        return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_clusterCenterIterator_40858c90]));
      }

      ::stallone::api::discretization::IDiscretization IClustering::getClusterAssignment() const
      {
        return ::stallone::api::discretization::IDiscretization(env->callObjectMethod(this$, mids$[mid_getClusterAssignment_69a9969d]));
      }

      ::stallone::api::datasequence::IDataSequence IClustering::getClusterCenters() const
      {
        return ::stallone::api::datasequence::IDataSequence(env->callObjectMethod(this$, mids$[mid_getClusterCenters_26787975]));
      }

      ::stallone::api::ints::IIntArray IClustering::getClusterIndexes() const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_getClusterIndexes_4ac77731]));
      }

      jint IClustering::getNumberOfClusters() const
      {
        return env->callIntMethod(this$, mids$[mid_getNumberOfClusters_54c6a179]);
      }

      void IClustering::perform() const
      {
        env->callVoidMethod(this$, mids$[mid_perform_54c6a166]);
      }

      void IClustering::setClusterInput(const ::stallone::api::datasequence::IDataSequence & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setClusterInput_d7ef70c8], a0.this$);
      }

      void IClustering::setClusterInput(const ::java::lang::Iterable & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setClusterInput_ae885829], a0.this$, a1);
      }

      void IClustering::setMetric(const ::stallone::api::doubles::IMetric & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setMetric_9f46b3d3], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace cluster {
      static PyObject *t_IClustering_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IClustering_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IClustering_clusterCenterIterator(t_IClustering *self);
      static PyObject *t_IClustering_getClusterAssignment(t_IClustering *self);
      static PyObject *t_IClustering_getClusterCenters(t_IClustering *self);
      static PyObject *t_IClustering_getClusterIndexes(t_IClustering *self);
      static PyObject *t_IClustering_getNumberOfClusters(t_IClustering *self);
      static PyObject *t_IClustering_perform(t_IClustering *self);
      static PyObject *t_IClustering_setClusterInput(t_IClustering *self, PyObject *args);
      static PyObject *t_IClustering_setMetric(t_IClustering *self, PyObject *arg);
      static PyObject *t_IClustering_get__clusterAssignment(t_IClustering *self, void *data);
      static PyObject *t_IClustering_get__clusterCenters(t_IClustering *self, void *data);
      static PyObject *t_IClustering_get__clusterIndexes(t_IClustering *self, void *data);
      static int t_IClustering_set__clusterInput(t_IClustering *self, PyObject *arg, void *data);
      static int t_IClustering_set__metric(t_IClustering *self, PyObject *arg, void *data);
      static PyObject *t_IClustering_get__numberOfClusters(t_IClustering *self, void *data);
      static PyGetSetDef t_IClustering__fields_[] = {
        DECLARE_GET_FIELD(t_IClustering, clusterAssignment),
        DECLARE_GET_FIELD(t_IClustering, clusterCenters),
        DECLARE_GET_FIELD(t_IClustering, clusterIndexes),
        DECLARE_SET_FIELD(t_IClustering, clusterInput),
        DECLARE_SET_FIELD(t_IClustering, metric),
        DECLARE_GET_FIELD(t_IClustering, numberOfClusters),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IClustering__methods_[] = {
        DECLARE_METHOD(t_IClustering, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IClustering, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IClustering, clusterCenterIterator, METH_NOARGS),
        DECLARE_METHOD(t_IClustering, getClusterAssignment, METH_NOARGS),
        DECLARE_METHOD(t_IClustering, getClusterCenters, METH_NOARGS),
        DECLARE_METHOD(t_IClustering, getClusterIndexes, METH_NOARGS),
        DECLARE_METHOD(t_IClustering, getNumberOfClusters, METH_NOARGS),
        DECLARE_METHOD(t_IClustering, perform, METH_NOARGS),
        DECLARE_METHOD(t_IClustering, setClusterInput, METH_VARARGS),
        DECLARE_METHOD(t_IClustering, setMetric, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IClustering, t_IClustering, ::stallone::api::discretization::IDiscretization, IClustering, abstract_init, 0, 0, t_IClustering__fields_, 0, 0);

      void t_IClustering::install(PyObject *module)
      {
        installType(&PY_TYPE(IClustering), module, "IClustering", 0);
      }

      void t_IClustering::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IClustering).tp_dict, "class_", make_descriptor(IClustering::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IClustering).tp_dict, "wrapfn_", make_descriptor(t_IClustering::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IClustering).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IClustering_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IClustering::initializeClass, 1)))
          return NULL;
        return t_IClustering::wrap_Object(IClustering(((t_IClustering *) arg)->object.this$));
      }
      static PyObject *t_IClustering_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IClustering::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IClustering_clusterCenterIterator(t_IClustering *self)
      {
        ::java::util::Iterator result((jobject) NULL);
        OBJ_CALL(result = self->object.clusterCenterIterator());
        return ::java::util::t_Iterator::wrap_Object(result, &::stallone::api::doubles::PY_TYPE(IDoubleArray));
      }

      static PyObject *t_IClustering_getClusterAssignment(t_IClustering *self)
      {
        ::stallone::api::discretization::IDiscretization result((jobject) NULL);
        OBJ_CALL(result = self->object.getClusterAssignment());
        return ::stallone::api::discretization::t_IDiscretization::wrap_Object(result);
      }

      static PyObject *t_IClustering_getClusterCenters(t_IClustering *self)
      {
        ::stallone::api::datasequence::IDataSequence result((jobject) NULL);
        OBJ_CALL(result = self->object.getClusterCenters());
        return ::stallone::api::datasequence::t_IDataSequence::wrap_Object(result);
      }

      static PyObject *t_IClustering_getClusterIndexes(t_IClustering *self)
      {
        ::stallone::api::ints::IIntArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getClusterIndexes());
        return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
      }

      static PyObject *t_IClustering_getNumberOfClusters(t_IClustering *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getNumberOfClusters());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IClustering_perform(t_IClustering *self)
      {
        OBJ_CALL(self->object.perform());
        Py_RETURN_NONE;
      }

      static PyObject *t_IClustering_setClusterInput(t_IClustering *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::stallone::api::datasequence::IDataSequence a0((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::datasequence::IDataSequence::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setClusterInput(a0));
              Py_RETURN_NONE;
            }
          }
          break;
         case 2:
          {
            ::java::lang::Iterable a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;

            if (!parseArgs(args, "KI", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
            {
              OBJ_CALL(self->object.setClusterInput(a0, a1));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "setClusterInput", args);
        return NULL;
      }

      static PyObject *t_IClustering_setMetric(t_IClustering *self, PyObject *arg)
      {
        ::stallone::api::doubles::IMetric a0((jobject) NULL);
        PyTypeObject **p0;

        if (!parseArg(arg, "K", ::stallone::api::doubles::IMetric::initializeClass, &a0, &p0, ::stallone::api::doubles::t_IMetric::parameters_))
        {
          OBJ_CALL(self->object.setMetric(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setMetric", arg);
        return NULL;
      }

      static PyObject *t_IClustering_get__clusterAssignment(t_IClustering *self, void *data)
      {
        ::stallone::api::discretization::IDiscretization value((jobject) NULL);
        OBJ_CALL(value = self->object.getClusterAssignment());
        return ::stallone::api::discretization::t_IDiscretization::wrap_Object(value);
      }

      static PyObject *t_IClustering_get__clusterCenters(t_IClustering *self, void *data)
      {
        ::stallone::api::datasequence::IDataSequence value((jobject) NULL);
        OBJ_CALL(value = self->object.getClusterCenters());
        return ::stallone::api::datasequence::t_IDataSequence::wrap_Object(value);
      }

      static PyObject *t_IClustering_get__clusterIndexes(t_IClustering *self, void *data)
      {
        ::stallone::api::ints::IIntArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getClusterIndexes());
        return ::stallone::api::ints::t_IIntArray::wrap_Object(value);
      }

      static int t_IClustering_set__clusterInput(t_IClustering *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::datasequence::IDataSequence value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::datasequence::IDataSequence::initializeClass, &value))
          {
            INT_CALL(self->object.setClusterInput(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "clusterInput", arg);
        return -1;
      }

      static int t_IClustering_set__metric(t_IClustering *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IMetric value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IMetric::initializeClass, &value))
          {
            INT_CALL(self->object.setMetric(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "metric", arg);
        return -1;
      }

      static PyObject *t_IClustering_get__numberOfClusters(t_IClustering *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getNumberOfClusters());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/ints/IIntIterator.h"
#include "stallone/api/ints/IIntElement.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace ints {

      ::java::lang::Class *IIntIterator::class$ = NULL;
      jmethodID *IIntIterator::mids$ = NULL;
      bool IIntIterator::live$ = false;

      jclass IIntIterator::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/ints/IIntIterator");

          mids$ = new jmethodID[max_mid];
          mids$[mid_advance_54c6a166] = env->getMethodID(cls, "advance", "()V");
          mids$[mid_column_54c6a179] = env->getMethodID(cls, "column", "()I");
          mids$[mid_get_54c6a179] = env->getMethodID(cls, "get", "()I");
          mids$[mid_getIndex_54c6a179] = env->getMethodID(cls, "getIndex", "()I");
          mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
          mids$[mid_next_b8c6f70a] = env->getMethodID(cls, "next", "()Lstallone/api/ints/IIntElement;");
          mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
          mids$[mid_row_54c6a179] = env->getMethodID(cls, "row", "()I");
          mids$[mid_set_39c7bd3c] = env->getMethodID(cls, "set", "(I)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void IIntIterator::advance() const
      {
        env->callVoidMethod(this$, mids$[mid_advance_54c6a166]);
      }

      jint IIntIterator::column() const
      {
        return env->callIntMethod(this$, mids$[mid_column_54c6a179]);
      }

      jint IIntIterator::get() const
      {
        return env->callIntMethod(this$, mids$[mid_get_54c6a179]);
      }

      jint IIntIterator::getIndex() const
      {
        return env->callIntMethod(this$, mids$[mid_getIndex_54c6a179]);
      }

      jboolean IIntIterator::hasNext() const
      {
        return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
      }

      ::stallone::api::ints::IIntElement IIntIterator::next() const
      {
        return ::stallone::api::ints::IIntElement(env->callObjectMethod(this$, mids$[mid_next_b8c6f70a]));
      }

      void IIntIterator::reset() const
      {
        env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
      }

      jint IIntIterator::row() const
      {
        return env->callIntMethod(this$, mids$[mid_row_54c6a179]);
      }

      void IIntIterator::set(jint a0) const
      {
        env->callVoidMethod(this$, mids$[mid_set_39c7bd3c], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace ints {
      static PyObject *t_IIntIterator_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntIterator_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntIterator_advance(t_IIntIterator *self);
      static PyObject *t_IIntIterator_column(t_IIntIterator *self);
      static PyObject *t_IIntIterator_get(t_IIntIterator *self);
      static PyObject *t_IIntIterator_getIndex(t_IIntIterator *self);
      static PyObject *t_IIntIterator_hasNext(t_IIntIterator *self, PyObject *args);
      static PyObject *t_IIntIterator_next(t_IIntIterator *self, PyObject *args);
      static PyObject *t_IIntIterator_reset(t_IIntIterator *self);
      static PyObject *t_IIntIterator_row(t_IIntIterator *self);
      static PyObject *t_IIntIterator_set(t_IIntIterator *self, PyObject *arg);
      static PyObject *t_IIntIterator_get__index(t_IIntIterator *self, void *data);
      static PyGetSetDef t_IIntIterator__fields_[] = {
        DECLARE_GET_FIELD(t_IIntIterator, index),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IIntIterator__methods_[] = {
        DECLARE_METHOD(t_IIntIterator, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntIterator, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntIterator, advance, METH_NOARGS),
        DECLARE_METHOD(t_IIntIterator, column, METH_NOARGS),
        DECLARE_METHOD(t_IIntIterator, get, METH_NOARGS),
        DECLARE_METHOD(t_IIntIterator, getIndex, METH_NOARGS),
        DECLARE_METHOD(t_IIntIterator, hasNext, METH_VARARGS),
        DECLARE_METHOD(t_IIntIterator, next, METH_VARARGS),
        DECLARE_METHOD(t_IIntIterator, reset, METH_NOARGS),
        DECLARE_METHOD(t_IIntIterator, row, METH_NOARGS),
        DECLARE_METHOD(t_IIntIterator, set, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IIntIterator, t_IIntIterator, ::java::util::Iterator, IIntIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_iterator_next< ::java::util::t_Iterator,::stallone::api::ints::t_IIntElement >), t_IIntIterator__fields_, 0, 0);

      void t_IIntIterator::install(PyObject *module)
      {
        installType(&PY_TYPE(IIntIterator), module, "IIntIterator", 0);
      }

      void t_IIntIterator::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IIntIterator).tp_dict, "class_", make_descriptor(IIntIterator::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IIntIterator).tp_dict, "wrapfn_", make_descriptor(t_IIntIterator::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IIntIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IIntIterator_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IIntIterator::initializeClass, 1)))
          return NULL;
        return t_IIntIterator::wrap_Object(IIntIterator(((t_IIntIterator *) arg)->object.this$));
      }
      static PyObject *t_IIntIterator_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IIntIterator::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IIntIterator_advance(t_IIntIterator *self)
      {
        OBJ_CALL(self->object.advance());
        Py_RETURN_NONE;
      }

      static PyObject *t_IIntIterator_column(t_IIntIterator *self)
      {
        jint result;
        OBJ_CALL(result = self->object.column());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntIterator_get(t_IIntIterator *self)
      {
        jint result;
        OBJ_CALL(result = self->object.get());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntIterator_getIndex(t_IIntIterator *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getIndex());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntIterator_hasNext(t_IIntIterator *self, PyObject *args)
      {
        jboolean result;

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        return callSuper(&PY_TYPE(IIntIterator), (PyObject *) self, "hasNext", args, 2);
      }

      static PyObject *t_IIntIterator_next(t_IIntIterator *self, PyObject *args)
      {
        ::stallone::api::ints::IIntElement result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.next());
          return ::stallone::api::ints::t_IIntElement::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(IIntIterator), (PyObject *) self, "next", args, 2);
      }

      static PyObject *t_IIntIterator_reset(t_IIntIterator *self)
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      static PyObject *t_IIntIterator_row(t_IIntIterator *self)
      {
        jint result;
        OBJ_CALL(result = self->object.row());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntIterator_set(t_IIntIterator *self, PyObject *arg)
      {
        jint a0;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(self->object.set(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "set", arg);
        return NULL;
      }

      static PyObject *t_IIntIterator_get__index(t_IIntIterator *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getIndex());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/doubles/IDoubleIterator.h"
#include "stallone/api/doubles/IDoubleElement.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace doubles {

      ::java::lang::Class *IDoubleIterator::class$ = NULL;
      jmethodID *IDoubleIterator::mids$ = NULL;
      bool IDoubleIterator::live$ = false;

      jclass IDoubleIterator::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/doubles/IDoubleIterator");

          mids$ = new jmethodID[max_mid];
          mids$[mid_advance_54c6a166] = env->getMethodID(cls, "advance", "()V");
          mids$[mid_column_54c6a179] = env->getMethodID(cls, "column", "()I");
          mids$[mid_get_54c6a174] = env->getMethodID(cls, "get", "()D");
          mids$[mid_getIndex_54c6a179] = env->getMethodID(cls, "getIndex", "()I");
          mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
          mids$[mid_next_7098f674] = env->getMethodID(cls, "next", "()Lstallone/api/doubles/IDoubleElement;");
          mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
          mids$[mid_row_54c6a179] = env->getMethodID(cls, "row", "()I");
          mids$[mid_set_5d1c7645] = env->getMethodID(cls, "set", "(D)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void IDoubleIterator::advance() const
      {
        env->callVoidMethod(this$, mids$[mid_advance_54c6a166]);
      }

      jint IDoubleIterator::column() const
      {
        return env->callIntMethod(this$, mids$[mid_column_54c6a179]);
      }

      jdouble IDoubleIterator::get() const
      {
        return env->callDoubleMethod(this$, mids$[mid_get_54c6a174]);
      }

      jint IDoubleIterator::getIndex() const
      {
        return env->callIntMethod(this$, mids$[mid_getIndex_54c6a179]);
      }

      jboolean IDoubleIterator::hasNext() const
      {
        return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
      }

      ::stallone::api::doubles::IDoubleElement IDoubleIterator::next() const
      {
        return ::stallone::api::doubles::IDoubleElement(env->callObjectMethod(this$, mids$[mid_next_7098f674]));
      }

      void IDoubleIterator::reset() const
      {
        env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
      }

      jint IDoubleIterator::row() const
      {
        return env->callIntMethod(this$, mids$[mid_row_54c6a179]);
      }

      void IDoubleIterator::set(jdouble a0) const
      {
        env->callVoidMethod(this$, mids$[mid_set_5d1c7645], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace doubles {
      static PyObject *t_IDoubleIterator_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDoubleIterator_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDoubleIterator_advance(t_IDoubleIterator *self);
      static PyObject *t_IDoubleIterator_column(t_IDoubleIterator *self);
      static PyObject *t_IDoubleIterator_get(t_IDoubleIterator *self);
      static PyObject *t_IDoubleIterator_getIndex(t_IDoubleIterator *self);
      static PyObject *t_IDoubleIterator_hasNext(t_IDoubleIterator *self, PyObject *args);
      static PyObject *t_IDoubleIterator_next(t_IDoubleIterator *self, PyObject *args);
      static PyObject *t_IDoubleIterator_reset(t_IDoubleIterator *self);
      static PyObject *t_IDoubleIterator_row(t_IDoubleIterator *self);
      static PyObject *t_IDoubleIterator_set(t_IDoubleIterator *self, PyObject *arg);
      static PyObject *t_IDoubleIterator_get__index(t_IDoubleIterator *self, void *data);
      static PyGetSetDef t_IDoubleIterator__fields_[] = {
        DECLARE_GET_FIELD(t_IDoubleIterator, index),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IDoubleIterator__methods_[] = {
        DECLARE_METHOD(t_IDoubleIterator, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDoubleIterator, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDoubleIterator, advance, METH_NOARGS),
        DECLARE_METHOD(t_IDoubleIterator, column, METH_NOARGS),
        DECLARE_METHOD(t_IDoubleIterator, get, METH_NOARGS),
        DECLARE_METHOD(t_IDoubleIterator, getIndex, METH_NOARGS),
        DECLARE_METHOD(t_IDoubleIterator, hasNext, METH_VARARGS),
        DECLARE_METHOD(t_IDoubleIterator, next, METH_VARARGS),
        DECLARE_METHOD(t_IDoubleIterator, reset, METH_NOARGS),
        DECLARE_METHOD(t_IDoubleIterator, row, METH_NOARGS),
        DECLARE_METHOD(t_IDoubleIterator, set, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IDoubleIterator, t_IDoubleIterator, ::java::util::Iterator, IDoubleIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_iterator_next< ::java::util::t_Iterator,::stallone::api::doubles::t_IDoubleElement >), t_IDoubleIterator__fields_, 0, 0);

      void t_IDoubleIterator::install(PyObject *module)
      {
        installType(&PY_TYPE(IDoubleIterator), module, "IDoubleIterator", 0);
      }

      void t_IDoubleIterator::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IDoubleIterator).tp_dict, "class_", make_descriptor(IDoubleIterator::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IDoubleIterator).tp_dict, "wrapfn_", make_descriptor(t_IDoubleIterator::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IDoubleIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IDoubleIterator_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IDoubleIterator::initializeClass, 1)))
          return NULL;
        return t_IDoubleIterator::wrap_Object(IDoubleIterator(((t_IDoubleIterator *) arg)->object.this$));
      }
      static PyObject *t_IDoubleIterator_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IDoubleIterator::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IDoubleIterator_advance(t_IDoubleIterator *self)
      {
        OBJ_CALL(self->object.advance());
        Py_RETURN_NONE;
      }

      static PyObject *t_IDoubleIterator_column(t_IDoubleIterator *self)
      {
        jint result;
        OBJ_CALL(result = self->object.column());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IDoubleIterator_get(t_IDoubleIterator *self)
      {
        jdouble result;
        OBJ_CALL(result = self->object.get());
        return PyFloat_FromDouble((double) result);
      }

      static PyObject *t_IDoubleIterator_getIndex(t_IDoubleIterator *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getIndex());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IDoubleIterator_hasNext(t_IDoubleIterator *self, PyObject *args)
      {
        jboolean result;

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        return callSuper(&PY_TYPE(IDoubleIterator), (PyObject *) self, "hasNext", args, 2);
      }

      static PyObject *t_IDoubleIterator_next(t_IDoubleIterator *self, PyObject *args)
      {
        ::stallone::api::doubles::IDoubleElement result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.next());
          return ::stallone::api::doubles::t_IDoubleElement::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(IDoubleIterator), (PyObject *) self, "next", args, 2);
      }

      static PyObject *t_IDoubleIterator_reset(t_IDoubleIterator *self)
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      static PyObject *t_IDoubleIterator_row(t_IDoubleIterator *self)
      {
        jint result;
        OBJ_CALL(result = self->object.row());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IDoubleIterator_set(t_IDoubleIterator *self, PyObject *arg)
      {
        jdouble a0;

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(self->object.set(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "set", arg);
        return NULL;
      }

      static PyObject *t_IDoubleIterator_get__index(t_IDoubleIterator *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getIndex());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/function/IParametricFunction.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/ICopyable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace function {

      ::java::lang::Class *IParametricFunction::class$ = NULL;
      jmethodID *IParametricFunction::mids$ = NULL;
      bool IParametricFunction::live$ = false;

      jclass IParametricFunction::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/function/IParametricFunction");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getParameters_1d53e353] = env->getMethodID(cls, "getParameters", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_setParameters_0253084a] = env->getMethodID(cls, "setParameters", "(Lstallone/api/doubles/IDoubleArray;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::stallone::api::doubles::IDoubleArray IParametricFunction::getParameters() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getParameters_1d53e353]));
      }

      void IParametricFunction::setParameters(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setParameters_0253084a], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace function {
      static PyObject *t_IParametricFunction_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IParametricFunction_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IParametricFunction_getParameters(t_IParametricFunction *self);
      static PyObject *t_IParametricFunction_setParameters(t_IParametricFunction *self, PyObject *arg);
      static PyObject *t_IParametricFunction_get__parameters(t_IParametricFunction *self, void *data);
      static int t_IParametricFunction_set__parameters(t_IParametricFunction *self, PyObject *arg, void *data);
      static PyGetSetDef t_IParametricFunction__fields_[] = {
        DECLARE_GETSET_FIELD(t_IParametricFunction, parameters),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IParametricFunction__methods_[] = {
        DECLARE_METHOD(t_IParametricFunction, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IParametricFunction, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IParametricFunction, getParameters, METH_NOARGS),
        DECLARE_METHOD(t_IParametricFunction, setParameters, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IParametricFunction, t_IParametricFunction, ::stallone::api::function::IFunction, IParametricFunction, abstract_init, 0, 0, t_IParametricFunction__fields_, 0, 0);

      void t_IParametricFunction::install(PyObject *module)
      {
        installType(&PY_TYPE(IParametricFunction), module, "IParametricFunction", 0);
      }

      void t_IParametricFunction::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IParametricFunction).tp_dict, "class_", make_descriptor(IParametricFunction::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IParametricFunction).tp_dict, "wrapfn_", make_descriptor(t_IParametricFunction::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IParametricFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IParametricFunction_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IParametricFunction::initializeClass, 1)))
          return NULL;
        return t_IParametricFunction::wrap_Object(IParametricFunction(((t_IParametricFunction *) arg)->object.this$));
      }
      static PyObject *t_IParametricFunction_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IParametricFunction::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IParametricFunction_getParameters(t_IParametricFunction *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getParameters());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_IParametricFunction_setParameters(t_IParametricFunction *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setParameters(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setParameters", arg);
        return NULL;
      }

      static PyObject *t_IParametricFunction_get__parameters(t_IParametricFunction *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getParameters());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }
      static int t_IParametricFunction_set__parameters(t_IParametricFunction *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &value))
          {
            INT_CALL(self->object.setParameters(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "parameters", arg);
        return -1;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/dynamics/DynamicsFactory.h"
#include "stallone/dynamics/IIntegratorThermostatted.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/potential/IEnergyModel.h"
#include "stallone/dynamics/IIntegrator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace dynamics {

      ::java::lang::Class *DynamicsFactory::class$ = NULL;
      jmethodID *DynamicsFactory::mids$ = NULL;
      bool DynamicsFactory::live$ = false;

      jclass DynamicsFactory::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/dynamics/DynamicsFactory");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_brownianDynamicsEuler_8f27988a] = env->getMethodID(cls, "brownianDynamicsEuler", "(Lstallone/api/potential/IEnergyModel;Lstallone/api/doubles/IDoubleArray;DDD)Lstallone/dynamics/IIntegratorThermostatted;");
          mids$[mid_langevinLeapFrog_8f27988a] = env->getMethodID(cls, "langevinLeapFrog", "(Lstallone/api/potential/IEnergyModel;Lstallone/api/doubles/IDoubleArray;DDD)Lstallone/dynamics/IIntegratorThermostatted;");
          mids$[mid_velocityVerlet_1d40a0c7] = env->getMethodID(cls, "velocityVerlet", "(Lstallone/api/potential/IEnergyModel;Lstallone/api/doubles/IDoubleArray;D)Lstallone/dynamics/IIntegrator;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      DynamicsFactory::DynamicsFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::stallone::dynamics::IIntegratorThermostatted DynamicsFactory::brownianDynamicsEuler(const ::stallone::api::potential::IEnergyModel & a0, const ::stallone::api::doubles::IDoubleArray & a1, jdouble a2, jdouble a3, jdouble a4) const
      {
        return ::stallone::dynamics::IIntegratorThermostatted(env->callObjectMethod(this$, mids$[mid_brownianDynamicsEuler_8f27988a], a0.this$, a1.this$, a2, a3, a4));
      }

      ::stallone::dynamics::IIntegratorThermostatted DynamicsFactory::langevinLeapFrog(const ::stallone::api::potential::IEnergyModel & a0, const ::stallone::api::doubles::IDoubleArray & a1, jdouble a2, jdouble a3, jdouble a4) const
      {
        return ::stallone::dynamics::IIntegratorThermostatted(env->callObjectMethod(this$, mids$[mid_langevinLeapFrog_8f27988a], a0.this$, a1.this$, a2, a3, a4));
      }

      ::stallone::dynamics::IIntegrator DynamicsFactory::velocityVerlet(const ::stallone::api::potential::IEnergyModel & a0, const ::stallone::api::doubles::IDoubleArray & a1, jdouble a2) const
      {
        return ::stallone::dynamics::IIntegrator(env->callObjectMethod(this$, mids$[mid_velocityVerlet_1d40a0c7], a0.this$, a1.this$, a2));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace dynamics {
      static PyObject *t_DynamicsFactory_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DynamicsFactory_instance_(PyTypeObject *type, PyObject *arg);
      static int t_DynamicsFactory_init_(t_DynamicsFactory *self, PyObject *args, PyObject *kwds);
      static PyObject *t_DynamicsFactory_brownianDynamicsEuler(t_DynamicsFactory *self, PyObject *args);
      static PyObject *t_DynamicsFactory_langevinLeapFrog(t_DynamicsFactory *self, PyObject *args);
      static PyObject *t_DynamicsFactory_velocityVerlet(t_DynamicsFactory *self, PyObject *args);

      static PyMethodDef t_DynamicsFactory__methods_[] = {
        DECLARE_METHOD(t_DynamicsFactory, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DynamicsFactory, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DynamicsFactory, brownianDynamicsEuler, METH_VARARGS),
        DECLARE_METHOD(t_DynamicsFactory, langevinLeapFrog, METH_VARARGS),
        DECLARE_METHOD(t_DynamicsFactory, velocityVerlet, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(DynamicsFactory, t_DynamicsFactory, ::java::lang::Object, DynamicsFactory, t_DynamicsFactory_init_, 0, 0, 0, 0, 0);

      void t_DynamicsFactory::install(PyObject *module)
      {
        installType(&PY_TYPE(DynamicsFactory), module, "DynamicsFactory", 0);
      }

      void t_DynamicsFactory::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(DynamicsFactory).tp_dict, "class_", make_descriptor(DynamicsFactory::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(DynamicsFactory).tp_dict, "wrapfn_", make_descriptor(t_DynamicsFactory::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(DynamicsFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_DynamicsFactory_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, DynamicsFactory::initializeClass, 1)))
          return NULL;
        return t_DynamicsFactory::wrap_Object(DynamicsFactory(((t_DynamicsFactory *) arg)->object.this$));
      }
      static PyObject *t_DynamicsFactory_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, DynamicsFactory::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_DynamicsFactory_init_(t_DynamicsFactory *self, PyObject *args, PyObject *kwds)
      {
        DynamicsFactory object((jobject) NULL);

        INT_CALL(object = DynamicsFactory());
        self->object = object;

        return 0;
      }

      static PyObject *t_DynamicsFactory_brownianDynamicsEuler(t_DynamicsFactory *self, PyObject *args)
      {
        ::stallone::api::potential::IEnergyModel a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        jdouble a2;
        jdouble a3;
        jdouble a4;
        ::stallone::dynamics::IIntegratorThermostatted result((jobject) NULL);

        if (!parseArgs(args, "kkDDD", ::stallone::api::potential::IEnergyModel::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2, &a3, &a4))
        {
          OBJ_CALL(result = self->object.brownianDynamicsEuler(a0, a1, a2, a3, a4));
          return ::stallone::dynamics::t_IIntegratorThermostatted::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "brownianDynamicsEuler", args);
        return NULL;
      }

      static PyObject *t_DynamicsFactory_langevinLeapFrog(t_DynamicsFactory *self, PyObject *args)
      {
        ::stallone::api::potential::IEnergyModel a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        jdouble a2;
        jdouble a3;
        jdouble a4;
        ::stallone::dynamics::IIntegratorThermostatted result((jobject) NULL);

        if (!parseArgs(args, "kkDDD", ::stallone::api::potential::IEnergyModel::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2, &a3, &a4))
        {
          OBJ_CALL(result = self->object.langevinLeapFrog(a0, a1, a2, a3, a4));
          return ::stallone::dynamics::t_IIntegratorThermostatted::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "langevinLeapFrog", args);
        return NULL;
      }

      static PyObject *t_DynamicsFactory_velocityVerlet(t_DynamicsFactory *self, PyObject *args)
      {
        ::stallone::api::potential::IEnergyModel a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);
        jdouble a2;
        ::stallone::dynamics::IIntegrator result((jobject) NULL);

        if (!parseArgs(args, "kkD", ::stallone::api::potential::IEnergyModel::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.velocityVerlet(a0, a1, a2));
          return ::stallone::dynamics::t_IIntegrator::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "velocityVerlet", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/mc/ICountMatrixEstimator.h"
#include "stallone/api/ints/IIntArray.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Iterable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace mc {

      ::java::lang::Class *ICountMatrixEstimator::class$ = NULL;
      jmethodID *ICountMatrixEstimator::mids$ = NULL;
      bool ICountMatrixEstimator::live$ = false;

      jclass ICountMatrixEstimator::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/mc/ICountMatrixEstimator");

          mids$ = new jmethodID[max_mid];
          mids$[mid_addInput_059aa494] = env->getMethodID(cls, "addInput", "(Lstallone/api/ints/IIntArray;)V");
          mids$[mid_addInput_d1cac205] = env->getMethodID(cls, "addInput", "(Ljava/lang/Iterable;)V");
          mids$[mid_estimate_1d53e353] = env->getMethodID(cls, "estimate", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getCountMatrix_1d53e353] = env->getMethodID(cls, "getCountMatrix", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_setLag_39c7bd3c] = env->getMethodID(cls, "setLag", "(I)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void ICountMatrixEstimator::addInput(const ::stallone::api::ints::IIntArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_addInput_059aa494], a0.this$);
      }

      void ICountMatrixEstimator::addInput(const ::java::lang::Iterable & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_addInput_d1cac205], a0.this$);
      }

      ::stallone::api::doubles::IDoubleArray ICountMatrixEstimator::estimate() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_estimate_1d53e353]));
      }

      ::stallone::api::doubles::IDoubleArray ICountMatrixEstimator::getCountMatrix() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getCountMatrix_1d53e353]));
      }

      void ICountMatrixEstimator::setLag(jint a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setLag_39c7bd3c], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace mc {
      static PyObject *t_ICountMatrixEstimator_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ICountMatrixEstimator_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ICountMatrixEstimator_addInput(t_ICountMatrixEstimator *self, PyObject *args);
      static PyObject *t_ICountMatrixEstimator_estimate(t_ICountMatrixEstimator *self);
      static PyObject *t_ICountMatrixEstimator_getCountMatrix(t_ICountMatrixEstimator *self);
      static PyObject *t_ICountMatrixEstimator_setLag(t_ICountMatrixEstimator *self, PyObject *arg);
      static PyObject *t_ICountMatrixEstimator_get__countMatrix(t_ICountMatrixEstimator *self, void *data);
      static int t_ICountMatrixEstimator_set__lag(t_ICountMatrixEstimator *self, PyObject *arg, void *data);
      static PyGetSetDef t_ICountMatrixEstimator__fields_[] = {
        DECLARE_GET_FIELD(t_ICountMatrixEstimator, countMatrix),
        DECLARE_SET_FIELD(t_ICountMatrixEstimator, lag),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_ICountMatrixEstimator__methods_[] = {
        DECLARE_METHOD(t_ICountMatrixEstimator, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ICountMatrixEstimator, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ICountMatrixEstimator, addInput, METH_VARARGS),
        DECLARE_METHOD(t_ICountMatrixEstimator, estimate, METH_NOARGS),
        DECLARE_METHOD(t_ICountMatrixEstimator, getCountMatrix, METH_NOARGS),
        DECLARE_METHOD(t_ICountMatrixEstimator, setLag, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ICountMatrixEstimator, t_ICountMatrixEstimator, ::java::lang::Object, ICountMatrixEstimator, abstract_init, 0, 0, t_ICountMatrixEstimator__fields_, 0, 0);

      void t_ICountMatrixEstimator::install(PyObject *module)
      {
        installType(&PY_TYPE(ICountMatrixEstimator), module, "ICountMatrixEstimator", 0);
      }

      void t_ICountMatrixEstimator::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ICountMatrixEstimator).tp_dict, "class_", make_descriptor(ICountMatrixEstimator::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ICountMatrixEstimator).tp_dict, "wrapfn_", make_descriptor(t_ICountMatrixEstimator::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ICountMatrixEstimator).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ICountMatrixEstimator_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ICountMatrixEstimator::initializeClass, 1)))
          return NULL;
        return t_ICountMatrixEstimator::wrap_Object(ICountMatrixEstimator(((t_ICountMatrixEstimator *) arg)->object.this$));
      }
      static PyObject *t_ICountMatrixEstimator_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ICountMatrixEstimator::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_ICountMatrixEstimator_addInput(t_ICountMatrixEstimator *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::stallone::api::ints::IIntArray a0((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::ints::IIntArray::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addInput(a0));
              Py_RETURN_NONE;
            }
          }
          {
            ::java::lang::Iterable a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
            {
              OBJ_CALL(self->object.addInput(a0));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "addInput", args);
        return NULL;
      }

      static PyObject *t_ICountMatrixEstimator_estimate(t_ICountMatrixEstimator *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.estimate());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_ICountMatrixEstimator_getCountMatrix(t_ICountMatrixEstimator *self)
      {
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getCountMatrix());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      static PyObject *t_ICountMatrixEstimator_setLag(t_ICountMatrixEstimator *self, PyObject *arg)
      {
        jint a0;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(self->object.setLag(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setLag", arg);
        return NULL;
      }

      static PyObject *t_ICountMatrixEstimator_get__countMatrix(t_ICountMatrixEstimator *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getCountMatrix());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }

      static int t_ICountMatrixEstimator_set__lag(t_ICountMatrixEstimator *self, PyObject *arg, void *data)
      {
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object.setLag(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "lag", arg);
        return -1;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/algebra/IEigenvalueDecomposition.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "stallone/api/complex/IComplexArray.h"
#include "stallone/api/algebra/IComplexNumber.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace algebra {

      ::java::lang::Class *IEigenvalueDecomposition::class$ = NULL;
      jmethodID *IEigenvalueDecomposition::mids$ = NULL;
      bool IEigenvalueDecomposition::live$ = false;

      jclass IEigenvalueDecomposition::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/algebra/IEigenvalueDecomposition");

          mids$ = new jmethodID[max_mid];
          mids$[mid_D_d54418bb] = env->getMethodID(cls, "D", "()Lstallone/api/complex/IComplexArray;");
          mids$[mid_L_d54418bb] = env->getMethodID(cls, "L", "()Lstallone/api/complex/IComplexArray;");
          mids$[mid_R_d54418bb] = env->getMethodID(cls, "R", "()Lstallone/api/complex/IComplexArray;");
          mids$[mid_availableEigenpairs_54c6a179] = env->getMethodID(cls, "availableEigenpairs", "()I");
          mids$[mid_fullRank_54c6a179] = env->getMethodID(cls, "fullRank", "()I");
          mids$[mid_getDiagonalMatrix_d54418bb] = env->getMethodID(cls, "getDiagonalMatrix", "()Lstallone/api/complex/IComplexArray;");
          mids$[mid_getEval_d54418bb] = env->getMethodID(cls, "getEval", "()Lstallone/api/complex/IComplexArray;");
          mids$[mid_getEval_3219f116] = env->getMethodID(cls, "getEval", "(I)Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_getEvalIm_1d53e353] = env->getMethodID(cls, "getEvalIm", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getEvalIm_39c7bd2e] = env->getMethodID(cls, "getEvalIm", "(I)D");
          mids$[mid_getEvalNorm_1d53e353] = env->getMethodID(cls, "getEvalNorm", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getEvalNorm_39c7bd2e] = env->getMethodID(cls, "getEvalNorm", "(I)D");
          mids$[mid_getEvalRe_1d53e353] = env->getMethodID(cls, "getEvalRe", "()Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getEvalRe_39c7bd2e] = env->getMethodID(cls, "getEvalRe", "(I)D");
          mids$[mid_getLeftEigenvector_f6210079] = env->getMethodID(cls, "getLeftEigenvector", "(I)Lstallone/api/complex/IComplexArray;");
          mids$[mid_getLeftEigenvectorMatrix_d54418bb] = env->getMethodID(cls, "getLeftEigenvectorMatrix", "()Lstallone/api/complex/IComplexArray;");
          mids$[mid_getRightEigenvector_f6210079] = env->getMethodID(cls, "getRightEigenvector", "(I)Lstallone/api/complex/IComplexArray;");
          mids$[mid_getRightEigenvectorMatrix_d54418bb] = env->getMethodID(cls, "getRightEigenvectorMatrix", "()Lstallone/api/complex/IComplexArray;");
          mids$[mid_hasLeftEigenvectors_54c6a16a] = env->getMethodID(cls, "hasLeftEigenvectors", "()Z");
          mids$[mid_hasRightEigenvectors_54c6a16a] = env->getMethodID(cls, "hasRightEigenvectors", "()Z");
          mids$[mid_sortNormAscending_54c6a166] = env->getMethodID(cls, "sortNormAscending", "()V");
          mids$[mid_sortNormDescending_54c6a166] = env->getMethodID(cls, "sortNormDescending", "()V");
          mids$[mid_sortRealAscending_54c6a166] = env->getMethodID(cls, "sortRealAscending", "()V");
          mids$[mid_sortRealDescending_54c6a166] = env->getMethodID(cls, "sortRealDescending", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::stallone::api::complex::IComplexArray IEigenvalueDecomposition::D() const
      {
        return ::stallone::api::complex::IComplexArray(env->callObjectMethod(this$, mids$[mid_D_d54418bb]));
      }

      ::stallone::api::complex::IComplexArray IEigenvalueDecomposition::L() const
      {
        return ::stallone::api::complex::IComplexArray(env->callObjectMethod(this$, mids$[mid_L_d54418bb]));
      }

      ::stallone::api::complex::IComplexArray IEigenvalueDecomposition::R() const
      {
        return ::stallone::api::complex::IComplexArray(env->callObjectMethod(this$, mids$[mid_R_d54418bb]));
      }

      jint IEigenvalueDecomposition::availableEigenpairs() const
      {
        return env->callIntMethod(this$, mids$[mid_availableEigenpairs_54c6a179]);
      }

      jint IEigenvalueDecomposition::fullRank() const
      {
        return env->callIntMethod(this$, mids$[mid_fullRank_54c6a179]);
      }

      ::stallone::api::complex::IComplexArray IEigenvalueDecomposition::getDiagonalMatrix() const
      {
        return ::stallone::api::complex::IComplexArray(env->callObjectMethod(this$, mids$[mid_getDiagonalMatrix_d54418bb]));
      }

      ::stallone::api::complex::IComplexArray IEigenvalueDecomposition::getEval() const
      {
        return ::stallone::api::complex::IComplexArray(env->callObjectMethod(this$, mids$[mid_getEval_d54418bb]));
      }

      ::stallone::api::algebra::IComplexNumber IEigenvalueDecomposition::getEval(jint a0) const
      {
        return ::stallone::api::algebra::IComplexNumber(env->callObjectMethod(this$, mids$[mid_getEval_3219f116], a0));
      }

      ::stallone::api::doubles::IDoubleArray IEigenvalueDecomposition::getEvalIm() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getEvalIm_1d53e353]));
      }

      jdouble IEigenvalueDecomposition::getEvalIm(jint a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_getEvalIm_39c7bd2e], a0);
      }

      ::stallone::api::doubles::IDoubleArray IEigenvalueDecomposition::getEvalNorm() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getEvalNorm_1d53e353]));
      }

      jdouble IEigenvalueDecomposition::getEvalNorm(jint a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_getEvalNorm_39c7bd2e], a0);
      }

      ::stallone::api::doubles::IDoubleArray IEigenvalueDecomposition::getEvalRe() const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getEvalRe_1d53e353]));
      }

      jdouble IEigenvalueDecomposition::getEvalRe(jint a0) const
      {
        return env->callDoubleMethod(this$, mids$[mid_getEvalRe_39c7bd2e], a0);
      }

      ::stallone::api::complex::IComplexArray IEigenvalueDecomposition::getLeftEigenvector(jint a0) const
      {
        return ::stallone::api::complex::IComplexArray(env->callObjectMethod(this$, mids$[mid_getLeftEigenvector_f6210079], a0));
      }

      ::stallone::api::complex::IComplexArray IEigenvalueDecomposition::getLeftEigenvectorMatrix() const
      {
        return ::stallone::api::complex::IComplexArray(env->callObjectMethod(this$, mids$[mid_getLeftEigenvectorMatrix_d54418bb]));
      }

      ::stallone::api::complex::IComplexArray IEigenvalueDecomposition::getRightEigenvector(jint a0) const
      {
        return ::stallone::api::complex::IComplexArray(env->callObjectMethod(this$, mids$[mid_getRightEigenvector_f6210079], a0));
      }

      ::stallone::api::complex::IComplexArray IEigenvalueDecomposition::getRightEigenvectorMatrix() const
      {
        return ::stallone::api::complex::IComplexArray(env->callObjectMethod(this$, mids$[mid_getRightEigenvectorMatrix_d54418bb]));
      }

      jboolean IEigenvalueDecomposition::hasLeftEigenvectors() const
      {
        return env->callBooleanMethod(this$, mids$[mid_hasLeftEigenvectors_54c6a16a]);
      }

      jboolean IEigenvalueDecomposition::hasRightEigenvectors() const
      {
        return env->callBooleanMethod(this$, mids$[mid_hasRightEigenvectors_54c6a16a]);
      }

      void IEigenvalueDecomposition::sortNormAscending() const
      {
        env->callVoidMethod(this$, mids$[mid_sortNormAscending_54c6a166]);
      }

      void IEigenvalueDecomposition::sortNormDescending() const
      {
        env->callVoidMethod(this$, mids$[mid_sortNormDescending_54c6a166]);
      }

      void IEigenvalueDecomposition::sortRealAscending() const
      {
        env->callVoidMethod(this$, mids$[mid_sortRealAscending_54c6a166]);
      }

      void IEigenvalueDecomposition::sortRealDescending() const
      {
        env->callVoidMethod(this$, mids$[mid_sortRealDescending_54c6a166]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace algebra {
      static PyObject *t_IEigenvalueDecomposition_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IEigenvalueDecomposition_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IEigenvalueDecomposition_D(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_L(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_R(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_availableEigenpairs(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_fullRank(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_getDiagonalMatrix(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_getEval(t_IEigenvalueDecomposition *self, PyObject *args);
      static PyObject *t_IEigenvalueDecomposition_getEvalIm(t_IEigenvalueDecomposition *self, PyObject *args);
      static PyObject *t_IEigenvalueDecomposition_getEvalNorm(t_IEigenvalueDecomposition *self, PyObject *args);
      static PyObject *t_IEigenvalueDecomposition_getEvalRe(t_IEigenvalueDecomposition *self, PyObject *args);
      static PyObject *t_IEigenvalueDecomposition_getLeftEigenvector(t_IEigenvalueDecomposition *self, PyObject *arg);
      static PyObject *t_IEigenvalueDecomposition_getLeftEigenvectorMatrix(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_getRightEigenvector(t_IEigenvalueDecomposition *self, PyObject *arg);
      static PyObject *t_IEigenvalueDecomposition_getRightEigenvectorMatrix(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_hasLeftEigenvectors(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_hasRightEigenvectors(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_sortNormAscending(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_sortNormDescending(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_sortRealAscending(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_sortRealDescending(t_IEigenvalueDecomposition *self);
      static PyObject *t_IEigenvalueDecomposition_get__diagonalMatrix(t_IEigenvalueDecomposition *self, void *data);
      static PyObject *t_IEigenvalueDecomposition_get__eval(t_IEigenvalueDecomposition *self, void *data);
      static PyObject *t_IEigenvalueDecomposition_get__evalIm(t_IEigenvalueDecomposition *self, void *data);
      static PyObject *t_IEigenvalueDecomposition_get__evalNorm(t_IEigenvalueDecomposition *self, void *data);
      static PyObject *t_IEigenvalueDecomposition_get__evalRe(t_IEigenvalueDecomposition *self, void *data);
      static PyObject *t_IEigenvalueDecomposition_get__leftEigenvectorMatrix(t_IEigenvalueDecomposition *self, void *data);
      static PyObject *t_IEigenvalueDecomposition_get__rightEigenvectorMatrix(t_IEigenvalueDecomposition *self, void *data);
      static PyGetSetDef t_IEigenvalueDecomposition__fields_[] = {
        DECLARE_GET_FIELD(t_IEigenvalueDecomposition, diagonalMatrix),
        DECLARE_GET_FIELD(t_IEigenvalueDecomposition, eval),
        DECLARE_GET_FIELD(t_IEigenvalueDecomposition, evalIm),
        DECLARE_GET_FIELD(t_IEigenvalueDecomposition, evalNorm),
        DECLARE_GET_FIELD(t_IEigenvalueDecomposition, evalRe),
        DECLARE_GET_FIELD(t_IEigenvalueDecomposition, leftEigenvectorMatrix),
        DECLARE_GET_FIELD(t_IEigenvalueDecomposition, rightEigenvectorMatrix),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IEigenvalueDecomposition__methods_[] = {
        DECLARE_METHOD(t_IEigenvalueDecomposition, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, D, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, L, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, R, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, availableEigenpairs, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, fullRank, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, getDiagonalMatrix, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, getEval, METH_VARARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, getEvalIm, METH_VARARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, getEvalNorm, METH_VARARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, getEvalRe, METH_VARARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, getLeftEigenvector, METH_O),
        DECLARE_METHOD(t_IEigenvalueDecomposition, getLeftEigenvectorMatrix, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, getRightEigenvector, METH_O),
        DECLARE_METHOD(t_IEigenvalueDecomposition, getRightEigenvectorMatrix, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, hasLeftEigenvectors, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, hasRightEigenvectors, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, sortNormAscending, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, sortNormDescending, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, sortRealAscending, METH_NOARGS),
        DECLARE_METHOD(t_IEigenvalueDecomposition, sortRealDescending, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IEigenvalueDecomposition, t_IEigenvalueDecomposition, ::java::lang::Object, IEigenvalueDecomposition, abstract_init, 0, 0, t_IEigenvalueDecomposition__fields_, 0, 0);

      void t_IEigenvalueDecomposition::install(PyObject *module)
      {
        installType(&PY_TYPE(IEigenvalueDecomposition), module, "IEigenvalueDecomposition", 0);
      }

      void t_IEigenvalueDecomposition::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IEigenvalueDecomposition).tp_dict, "class_", make_descriptor(IEigenvalueDecomposition::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IEigenvalueDecomposition).tp_dict, "wrapfn_", make_descriptor(t_IEigenvalueDecomposition::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IEigenvalueDecomposition).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IEigenvalueDecomposition_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IEigenvalueDecomposition::initializeClass, 1)))
          return NULL;
        return t_IEigenvalueDecomposition::wrap_Object(IEigenvalueDecomposition(((t_IEigenvalueDecomposition *) arg)->object.this$));
      }
      static PyObject *t_IEigenvalueDecomposition_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IEigenvalueDecomposition::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IEigenvalueDecomposition_D(t_IEigenvalueDecomposition *self)
      {
        ::stallone::api::complex::IComplexArray result((jobject) NULL);
        OBJ_CALL(result = self->object.D());
        return ::stallone::api::complex::t_IComplexArray::wrap_Object(result);
      }

      static PyObject *t_IEigenvalueDecomposition_L(t_IEigenvalueDecomposition *self)
      {
        ::stallone::api::complex::IComplexArray result((jobject) NULL);
        OBJ_CALL(result = self->object.L());
        return ::stallone::api::complex::t_IComplexArray::wrap_Object(result);
      }

      static PyObject *t_IEigenvalueDecomposition_R(t_IEigenvalueDecomposition *self)
      {
        ::stallone::api::complex::IComplexArray result((jobject) NULL);
        OBJ_CALL(result = self->object.R());
        return ::stallone::api::complex::t_IComplexArray::wrap_Object(result);
      }

      static PyObject *t_IEigenvalueDecomposition_availableEigenpairs(t_IEigenvalueDecomposition *self)
      {
        jint result;
        OBJ_CALL(result = self->object.availableEigenpairs());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IEigenvalueDecomposition_fullRank(t_IEigenvalueDecomposition *self)
      {
        jint result;
        OBJ_CALL(result = self->object.fullRank());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IEigenvalueDecomposition_getDiagonalMatrix(t_IEigenvalueDecomposition *self)
      {
        ::stallone::api::complex::IComplexArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getDiagonalMatrix());
        return ::stallone::api::complex::t_IComplexArray::wrap_Object(result);
      }

      static PyObject *t_IEigenvalueDecomposition_getEval(t_IEigenvalueDecomposition *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::stallone::api::complex::IComplexArray result((jobject) NULL);
            OBJ_CALL(result = self->object.getEval());
            return ::stallone::api::complex::t_IComplexArray::wrap_Object(result);
          }
          break;
         case 1:
          {
            jint a0;
            ::stallone::api::algebra::IComplexNumber result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getEval(a0));
              return ::stallone::api::algebra::t_IComplexNumber::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "getEval", args);
        return NULL;
      }

      static PyObject *t_IEigenvalueDecomposition_getEvalIm(t_IEigenvalueDecomposition *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
            OBJ_CALL(result = self->object.getEvalIm());
            return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
          }
          break;
         case 1:
          {
            jint a0;
            jdouble result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getEvalIm(a0));
              return PyFloat_FromDouble((double) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "getEvalIm", args);
        return NULL;
      }

      static PyObject *t_IEigenvalueDecomposition_getEvalNorm(t_IEigenvalueDecomposition *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
            OBJ_CALL(result = self->object.getEvalNorm());
            return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
          }
          break;
         case 1:
          {
            jint a0;
            jdouble result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getEvalNorm(a0));
              return PyFloat_FromDouble((double) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "getEvalNorm", args);
        return NULL;
      }

      static PyObject *t_IEigenvalueDecomposition_getEvalRe(t_IEigenvalueDecomposition *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::stallone::api::doubles::IDoubleArray result((jobject) NULL);
            OBJ_CALL(result = self->object.getEvalRe());
            return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
          }
          break;
         case 1:
          {
            jint a0;
            jdouble result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getEvalRe(a0));
              return PyFloat_FromDouble((double) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "getEvalRe", args);
        return NULL;
      }

      static PyObject *t_IEigenvalueDecomposition_getLeftEigenvector(t_IEigenvalueDecomposition *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::complex::IComplexArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.getLeftEigenvector(a0));
          return ::stallone::api::complex::t_IComplexArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getLeftEigenvector", arg);
        return NULL;
      }

      static PyObject *t_IEigenvalueDecomposition_getLeftEigenvectorMatrix(t_IEigenvalueDecomposition *self)
      {
        ::stallone::api::complex::IComplexArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getLeftEigenvectorMatrix());
        return ::stallone::api::complex::t_IComplexArray::wrap_Object(result);
      }

      static PyObject *t_IEigenvalueDecomposition_getRightEigenvector(t_IEigenvalueDecomposition *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::complex::IComplexArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.getRightEigenvector(a0));
          return ::stallone::api::complex::t_IComplexArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getRightEigenvector", arg);
        return NULL;
      }

      static PyObject *t_IEigenvalueDecomposition_getRightEigenvectorMatrix(t_IEigenvalueDecomposition *self)
      {
        ::stallone::api::complex::IComplexArray result((jobject) NULL);
        OBJ_CALL(result = self->object.getRightEigenvectorMatrix());
        return ::stallone::api::complex::t_IComplexArray::wrap_Object(result);
      }

      static PyObject *t_IEigenvalueDecomposition_hasLeftEigenvectors(t_IEigenvalueDecomposition *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.hasLeftEigenvectors());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_IEigenvalueDecomposition_hasRightEigenvectors(t_IEigenvalueDecomposition *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.hasRightEigenvectors());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_IEigenvalueDecomposition_sortNormAscending(t_IEigenvalueDecomposition *self)
      {
        OBJ_CALL(self->object.sortNormAscending());
        Py_RETURN_NONE;
      }

      static PyObject *t_IEigenvalueDecomposition_sortNormDescending(t_IEigenvalueDecomposition *self)
      {
        OBJ_CALL(self->object.sortNormDescending());
        Py_RETURN_NONE;
      }

      static PyObject *t_IEigenvalueDecomposition_sortRealAscending(t_IEigenvalueDecomposition *self)
      {
        OBJ_CALL(self->object.sortRealAscending());
        Py_RETURN_NONE;
      }

      static PyObject *t_IEigenvalueDecomposition_sortRealDescending(t_IEigenvalueDecomposition *self)
      {
        OBJ_CALL(self->object.sortRealDescending());
        Py_RETURN_NONE;
      }

      static PyObject *t_IEigenvalueDecomposition_get__diagonalMatrix(t_IEigenvalueDecomposition *self, void *data)
      {
        ::stallone::api::complex::IComplexArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getDiagonalMatrix());
        return ::stallone::api::complex::t_IComplexArray::wrap_Object(value);
      }

      static PyObject *t_IEigenvalueDecomposition_get__eval(t_IEigenvalueDecomposition *self, void *data)
      {
        ::stallone::api::complex::IComplexArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getEval());
        return ::stallone::api::complex::t_IComplexArray::wrap_Object(value);
      }

      static PyObject *t_IEigenvalueDecomposition_get__evalIm(t_IEigenvalueDecomposition *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getEvalIm());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }

      static PyObject *t_IEigenvalueDecomposition_get__evalNorm(t_IEigenvalueDecomposition *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getEvalNorm());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }

      static PyObject *t_IEigenvalueDecomposition_get__evalRe(t_IEigenvalueDecomposition *self, void *data)
      {
        ::stallone::api::doubles::IDoubleArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getEvalRe());
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(value);
      }

      static PyObject *t_IEigenvalueDecomposition_get__leftEigenvectorMatrix(t_IEigenvalueDecomposition *self, void *data)
      {
        ::stallone::api::complex::IComplexArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getLeftEigenvectorMatrix());
        return ::stallone::api::complex::t_IComplexArray::wrap_Object(value);
      }

      static PyObject *t_IEigenvalueDecomposition_get__rightEigenvectorMatrix(t_IEigenvalueDecomposition *self, void *data)
      {
        ::stallone::api::complex::IComplexArray value((jobject) NULL);
        OBJ_CALL(value = self->object.getRightEigenvectorMatrix());
        return ::stallone::api::complex::t_IComplexArray::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/intsequence/IntSequence.h"
#include "stallone/api/intsequence/IntSequenceUtilities.h"
#include "stallone/api/intsequence/IntSequenceFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace intsequence {

      ::java::lang::Class *IntSequence::class$ = NULL;
      jmethodID *IntSequence::mids$ = NULL;
      bool IntSequence::live$ = false;
      ::stallone::api::intsequence::IntSequenceFactory *IntSequence::create = NULL;
      ::stallone::api::intsequence::IntSequenceUtilities *IntSequence::util = NULL;

      jclass IntSequence::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/intsequence/IntSequence");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          cls = (jclass) class$->this$;

          create = new ::stallone::api::intsequence::IntSequenceFactory(env->getStaticObjectField(cls, "create", "Lstallone/api/intsequence/IntSequenceFactory;"));
          util = new ::stallone::api::intsequence::IntSequenceUtilities(env->getStaticObjectField(cls, "util", "Lstallone/api/intsequence/IntSequenceUtilities;"));
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      IntSequence::IntSequence() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace intsequence {
      static PyObject *t_IntSequence_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IntSequence_instance_(PyTypeObject *type, PyObject *arg);
      static int t_IntSequence_init_(t_IntSequence *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_IntSequence__methods_[] = {
        DECLARE_METHOD(t_IntSequence, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IntSequence, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IntSequence, t_IntSequence, ::java::lang::Object, IntSequence, t_IntSequence_init_, 0, 0, 0, 0, 0);

      void t_IntSequence::install(PyObject *module)
      {
        installType(&PY_TYPE(IntSequence), module, "IntSequence", 0);
      }

      void t_IntSequence::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IntSequence).tp_dict, "class_", make_descriptor(IntSequence::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IntSequence).tp_dict, "wrapfn_", make_descriptor(t_IntSequence::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IntSequence).tp_dict, "boxfn_", make_descriptor(boxObject));
        env->getClass(IntSequence::initializeClass);
        PyDict_SetItemString(PY_TYPE(IntSequence).tp_dict, "create", make_descriptor(::stallone::api::intsequence::t_IntSequenceFactory::wrap_Object(*IntSequence::create)));
        PyDict_SetItemString(PY_TYPE(IntSequence).tp_dict, "util", make_descriptor(::stallone::api::intsequence::t_IntSequenceUtilities::wrap_Object(*IntSequence::util)));
      }

      static PyObject *t_IntSequence_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IntSequence::initializeClass, 1)))
          return NULL;
        return t_IntSequence::wrap_Object(IntSequence(((t_IntSequence *) arg)->object.this$));
      }
      static PyObject *t_IntSequence_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IntSequence::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_IntSequence_init_(t_IntSequence *self, PyObject *args, PyObject *kwds)
      {
        IntSequence object((jobject) NULL);

        INT_CALL(object = IntSequence());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Enumeration::class$ = NULL;
    jmethodID *Enumeration::mids$ = NULL;
    bool Enumeration::live$ = false;

    jclass Enumeration::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Enumeration");

        mids$ = new jmethodID[max_mid];
        mids$[mid_hasMoreElements_54c6a16a] = env->getMethodID(cls, "hasMoreElements", "()Z");
        mids$[mid_nextElement_846352c3] = env->getMethodID(cls, "nextElement", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Enumeration::hasMoreElements() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_54c6a16a]);
    }

    ::java::lang::Object Enumeration::nextElement() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_nextElement_846352c3]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args);
    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self);
    static PyObject *t_Enumeration_nextElement(t_Enumeration *self);
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data);
    static PyGetSetDef t_Enumeration__fields_[] = {
      DECLARE_GET_FIELD(t_Enumeration, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enumeration__methods_[] = {
      DECLARE_METHOD(t_Enumeration, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enumeration, hasMoreElements, METH_NOARGS),
      DECLARE_METHOD(t_Enumeration, nextElement, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Enumeration, t_Enumeration, ::java::lang::Object, Enumeration, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Enumeration *)) get_generic_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_Object >), t_Enumeration__fields_, 0, 0);
    PyObject *t_Enumeration::wrap_Object(const Enumeration& object, PyTypeObject *E)
    {
      PyObject *obj = t_Enumeration::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = E;
      }
      return obj;
    }

    PyObject *t_Enumeration::wrap_jobject(const jobject& object, PyTypeObject *E)
    {
      PyObject *obj = t_Enumeration::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = E;
      }
      return obj;
    }

    void t_Enumeration::install(PyObject *module)
    {
      installType(&PY_TYPE(Enumeration), module, "Enumeration", 0);
    }

    void t_Enumeration::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "class_", make_descriptor(Enumeration::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "wrapfn_", make_descriptor(t_Enumeration::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enumeration::initializeClass, 1)))
        return NULL;
      return t_Enumeration::wrap_Object(Enumeration(((t_Enumeration *) arg)->object.this$));
    }
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enumeration::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasMoreElements());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Enumeration_nextElement(t_Enumeration *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.nextElement());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/mc/sampling/ITransitionMatrixSampler.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace mc {
    namespace sampling {

      ::java::lang::Class *ITransitionMatrixSampler::class$ = NULL;
      jmethodID *ITransitionMatrixSampler::mids$ = NULL;
      bool ITransitionMatrixSampler::live$ = false;

      jclass ITransitionMatrixSampler::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/mc/sampling/ITransitionMatrixSampler");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init_0253084a] = env->getMethodID(cls, "init", "(Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_init_608d488a] = env->getMethodID(cls, "init", "(Lstallone/api/doubles/IDoubleArray;Lstallone/api/doubles/IDoubleArray;)V");
          mids$[mid_logLikelihood_54c6a174] = env->getMethodID(cls, "logLikelihood", "()D");
          mids$[mid_sample_e3ead0f5] = env->getMethodID(cls, "sample", "(I)Lstallone/api/doubles/IDoubleArray;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void ITransitionMatrixSampler::init(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_init_0253084a], a0.this$);
      }

      void ITransitionMatrixSampler::init(const ::stallone::api::doubles::IDoubleArray & a0, const ::stallone::api::doubles::IDoubleArray & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_init_608d488a], a0.this$, a1.this$);
      }

      jdouble ITransitionMatrixSampler::logLikelihood() const
      {
        return env->callDoubleMethod(this$, mids$[mid_logLikelihood_54c6a174]);
      }

      ::stallone::api::doubles::IDoubleArray ITransitionMatrixSampler::sample(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_sample_e3ead0f5], a0));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace mc {
    namespace sampling {
      static PyObject *t_ITransitionMatrixSampler_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ITransitionMatrixSampler_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ITransitionMatrixSampler_init(t_ITransitionMatrixSampler *self, PyObject *args);
      static PyObject *t_ITransitionMatrixSampler_logLikelihood(t_ITransitionMatrixSampler *self);
      static PyObject *t_ITransitionMatrixSampler_sample(t_ITransitionMatrixSampler *self, PyObject *arg);

      static PyMethodDef t_ITransitionMatrixSampler__methods_[] = {
        DECLARE_METHOD(t_ITransitionMatrixSampler, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ITransitionMatrixSampler, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ITransitionMatrixSampler, init, METH_VARARGS),
        DECLARE_METHOD(t_ITransitionMatrixSampler, logLikelihood, METH_NOARGS),
        DECLARE_METHOD(t_ITransitionMatrixSampler, sample, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ITransitionMatrixSampler, t_ITransitionMatrixSampler, ::java::lang::Object, ITransitionMatrixSampler, abstract_init, 0, 0, 0, 0, 0);

      void t_ITransitionMatrixSampler::install(PyObject *module)
      {
        installType(&PY_TYPE(ITransitionMatrixSampler), module, "ITransitionMatrixSampler", 0);
      }

      void t_ITransitionMatrixSampler::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ITransitionMatrixSampler).tp_dict, "class_", make_descriptor(ITransitionMatrixSampler::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ITransitionMatrixSampler).tp_dict, "wrapfn_", make_descriptor(t_ITransitionMatrixSampler::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ITransitionMatrixSampler).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ITransitionMatrixSampler_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ITransitionMatrixSampler::initializeClass, 1)))
          return NULL;
        return t_ITransitionMatrixSampler::wrap_Object(ITransitionMatrixSampler(((t_ITransitionMatrixSampler *) arg)->object.this$));
      }
      static PyObject *t_ITransitionMatrixSampler_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ITransitionMatrixSampler::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_ITransitionMatrixSampler_init(t_ITransitionMatrixSampler *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

            if (!parseArgs(args, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }
          }
          break;
         case 2:
          {
            ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
            ::stallone::api::doubles::IDoubleArray a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::stallone::api::doubles::IDoubleArray::initializeClass, ::stallone::api::doubles::IDoubleArray::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.init(a0, a1));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "init", args);
        return NULL;
      }

      static PyObject *t_ITransitionMatrixSampler_logLikelihood(t_ITransitionMatrixSampler *self)
      {
        jdouble result;
        OBJ_CALL(result = self->object.logLikelihood());
        return PyFloat_FromDouble((double) result);
      }

      static PyObject *t_ITransitionMatrixSampler_sample(t_ITransitionMatrixSampler *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.sample(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "sample", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/doubles/AbstractDoubleArray.h"
#include "stallone/api/doubles/IDoubleIterator.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace doubles {

    ::java::lang::Class *AbstractDoubleArray::class$ = NULL;
    jmethodID *AbstractDoubleArray::mids$ = NULL;
    bool AbstractDoubleArray::live$ = false;

    jclass AbstractDoubleArray::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("stallone/doubles/AbstractDoubleArray");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_copyFrom_0253084a] = env->getMethodID(cls, "copyFrom", "(Lstallone/api/doubles/IDoubleArray;)V");
        mids$[mid_copyInto_0253084a] = env->getMethodID(cls, "copyInto", "(Lstallone/api/doubles/IDoubleArray;)V");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get_39c7bd2e] = env->getMethodID(cls, "get", "(I)D");
        mids$[mid_getArray_dab10e78] = env->getMethodID(cls, "getArray", "()[D");
        mids$[mid_getColumn_b4292e9e] = env->getMethodID(cls, "getColumn", "(I)[D");
        mids$[mid_getRow_b4292e9e] = env->getMethodID(cls, "getRow", "(I)[D");
        mids$[mid_getTable_b9d949a8] = env->getMethodID(cls, "getTable", "()[[D");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_iterator_c2219c49] = env->getMethodID(cls, "iterator", "()Lstallone/api/doubles/IDoubleIterator;");
        mids$[mid_nonzeroIterator_c2219c49] = env->getMethodID(cls, "nonzeroIterator", "()Lstallone/api/doubles/IDoubleIterator;");
        mids$[mid_order_54c6a179] = env->getMethodID(cls, "order", "()I");
        mids$[mid_set_5aa51c57] = env->getMethodID(cls, "set", "(ID)V");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_view_1259a6af] = env->getMethodID(cls, "view", "([I[I)Lstallone/api/doubles/IDoubleArray;");
        mids$[mid_viewBlock_6662d773] = env->getMethodID(cls, "viewBlock", "(IIII)Lstallone/api/doubles/IDoubleArray;");
        mids$[mid_viewColumn_e3ead0f5] = env->getMethodID(cls, "viewColumn", "(I)Lstallone/api/doubles/IDoubleArray;");
        mids$[mid_viewRow_e3ead0f5] = env->getMethodID(cls, "viewRow", "(I)Lstallone/api/doubles/IDoubleArray;");
        mids$[mid_zero_54c6a166] = env->getMethodID(cls, "zero", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    AbstractDoubleArray::AbstractDoubleArray() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    void AbstractDoubleArray::copyFrom(const ::stallone::api::doubles::IDoubleArray & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_copyFrom_0253084a], a0.this$);
    }

    void AbstractDoubleArray::copyInto(const ::stallone::api::doubles::IDoubleArray & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_copyInto_0253084a], a0.this$);
    }

    jboolean AbstractDoubleArray::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jdouble AbstractDoubleArray::get(jint a0) const
    {
      return env->callDoubleMethod(this$, mids$[mid_get_39c7bd2e], a0);
    }

    JArray< jdouble > AbstractDoubleArray::getArray() const
    {
      return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e78]));
    }

    JArray< jdouble > AbstractDoubleArray::getColumn(jint a0) const
    {
      return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getColumn_b4292e9e], a0));
    }

    JArray< jdouble > AbstractDoubleArray::getRow(jint a0) const
    {
      return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getRow_b4292e9e], a0));
    }

    JArray< JArray< jdouble > > AbstractDoubleArray::getTable() const
    {
      return JArray< JArray< jdouble > >(env->callObjectMethod(this$, mids$[mid_getTable_b9d949a8]));
    }

    jint AbstractDoubleArray::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    ::stallone::api::doubles::IDoubleIterator AbstractDoubleArray::iterator() const
    {
      return ::stallone::api::doubles::IDoubleIterator(env->callObjectMethod(this$, mids$[mid_iterator_c2219c49]));
    }

    ::stallone::api::doubles::IDoubleIterator AbstractDoubleArray::nonzeroIterator() const
    {
      return ::stallone::api::doubles::IDoubleIterator(env->callObjectMethod(this$, mids$[mid_nonzeroIterator_c2219c49]));
    }

    jint AbstractDoubleArray::order() const
    {
      return env->callIntMethod(this$, mids$[mid_order_54c6a179]);
    }

    void AbstractDoubleArray::set(jint a0, jdouble a1) const
    {
      env->callVoidMethod(this$, mids$[mid_set_5aa51c57], a0, a1);
    }

    jint AbstractDoubleArray::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::lang::String AbstractDoubleArray::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::stallone::api::doubles::IDoubleArray AbstractDoubleArray::view(const JArray< jint > & a0, const JArray< jint > & a1) const
    {
      return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_view_1259a6af], a0.this$, a1.this$));
    }

    ::stallone::api::doubles::IDoubleArray AbstractDoubleArray::viewBlock(jint a0, jint a1, jint a2, jint a3) const
    {
      return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_viewBlock_6662d773], a0, a1, a2, a3));
    }

    ::stallone::api::doubles::IDoubleArray AbstractDoubleArray::viewColumn(jint a0) const
    {
      return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_viewColumn_e3ead0f5], a0));
    }

    ::stallone::api::doubles::IDoubleArray AbstractDoubleArray::viewRow(jint a0) const
    {
      return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_viewRow_e3ead0f5], a0));
    }

    void AbstractDoubleArray::zero() const
    {
      env->callVoidMethod(this$, mids$[mid_zero_54c6a166]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace doubles {
    static PyObject *t_AbstractDoubleArray_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractDoubleArray_instance_(PyTypeObject *type, PyObject *arg);
    static int t_AbstractDoubleArray_init_(t_AbstractDoubleArray *self, PyObject *args, PyObject *kwds);
    static PyObject *t_AbstractDoubleArray_copyFrom(t_AbstractDoubleArray *self, PyObject *arg);
    static PyObject *t_AbstractDoubleArray_copyInto(t_AbstractDoubleArray *self, PyObject *arg);
    static PyObject *t_AbstractDoubleArray_equals(t_AbstractDoubleArray *self, PyObject *args);
    static PyObject *t_AbstractDoubleArray_get(t_AbstractDoubleArray *self, PyObject *arg);
    static PyObject *t_AbstractDoubleArray_getArray(t_AbstractDoubleArray *self);
    static PyObject *t_AbstractDoubleArray_getColumn(t_AbstractDoubleArray *self, PyObject *arg);
    static PyObject *t_AbstractDoubleArray_getRow(t_AbstractDoubleArray *self, PyObject *arg);
    static PyObject *t_AbstractDoubleArray_getTable(t_AbstractDoubleArray *self);
    static PyObject *t_AbstractDoubleArray_hashCode(t_AbstractDoubleArray *self, PyObject *args);
    static PyObject *t_AbstractDoubleArray_iterator(t_AbstractDoubleArray *self);
    static PyObject *t_AbstractDoubleArray_nonzeroIterator(t_AbstractDoubleArray *self);
    static PyObject *t_AbstractDoubleArray_order(t_AbstractDoubleArray *self);
    static PyObject *t_AbstractDoubleArray_set(t_AbstractDoubleArray *self, PyObject *args);
    static PyObject *t_AbstractDoubleArray_size(t_AbstractDoubleArray *self);
    static PyObject *t_AbstractDoubleArray_toString(t_AbstractDoubleArray *self, PyObject *args);
    static PyObject *t_AbstractDoubleArray_view(t_AbstractDoubleArray *self, PyObject *args);
    static PyObject *t_AbstractDoubleArray_viewBlock(t_AbstractDoubleArray *self, PyObject *args);
    static PyObject *t_AbstractDoubleArray_viewColumn(t_AbstractDoubleArray *self, PyObject *arg);
    static PyObject *t_AbstractDoubleArray_viewRow(t_AbstractDoubleArray *self, PyObject *arg);
    static PyObject *t_AbstractDoubleArray_zero(t_AbstractDoubleArray *self);
    static PyObject *t_AbstractDoubleArray_get__array(t_AbstractDoubleArray *self, void *data);
    static PyObject *t_AbstractDoubleArray_get__table(t_AbstractDoubleArray *self, void *data);
    static PyGetSetDef t_AbstractDoubleArray__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractDoubleArray, array),
      DECLARE_GET_FIELD(t_AbstractDoubleArray, table),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractDoubleArray__methods_[] = {
      DECLARE_METHOD(t_AbstractDoubleArray, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractDoubleArray, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractDoubleArray, copyFrom, METH_O),
      DECLARE_METHOD(t_AbstractDoubleArray, copyInto, METH_O),
      DECLARE_METHOD(t_AbstractDoubleArray, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, get, METH_O),
      DECLARE_METHOD(t_AbstractDoubleArray, getArray, METH_NOARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, getColumn, METH_O),
      DECLARE_METHOD(t_AbstractDoubleArray, getRow, METH_O),
      DECLARE_METHOD(t_AbstractDoubleArray, getTable, METH_NOARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, iterator, METH_NOARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, nonzeroIterator, METH_NOARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, order, METH_NOARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, set, METH_VARARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, toString, METH_VARARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, view, METH_VARARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, viewBlock, METH_VARARGS),
      DECLARE_METHOD(t_AbstractDoubleArray, viewColumn, METH_O),
      DECLARE_METHOD(t_AbstractDoubleArray, viewRow, METH_O),
      DECLARE_METHOD(t_AbstractDoubleArray, zero, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractDoubleArray, t_AbstractDoubleArray, ::java::lang::Object, AbstractDoubleArray, t_AbstractDoubleArray_init_, ((PyObject *(*)(t_AbstractDoubleArray *)) get_iterator< t_AbstractDoubleArray >), 0, t_AbstractDoubleArray__fields_, 0, 0);

    void t_AbstractDoubleArray::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractDoubleArray), module, "AbstractDoubleArray", 0);
    }

    void t_AbstractDoubleArray::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractDoubleArray).tp_dict, "class_", make_descriptor(AbstractDoubleArray::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractDoubleArray).tp_dict, "wrapfn_", make_descriptor(t_AbstractDoubleArray::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractDoubleArray).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractDoubleArray_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractDoubleArray::initializeClass, 1)))
        return NULL;
      return t_AbstractDoubleArray::wrap_Object(AbstractDoubleArray(((t_AbstractDoubleArray *) arg)->object.this$));
    }
    static PyObject *t_AbstractDoubleArray_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractDoubleArray::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_AbstractDoubleArray_init_(t_AbstractDoubleArray *self, PyObject *args, PyObject *kwds)
    {
      AbstractDoubleArray object((jobject) NULL);

      INT_CALL(object = AbstractDoubleArray());
      self->object = object;

      return 0;
    }

    static PyObject *t_AbstractDoubleArray_copyFrom(t_AbstractDoubleArray *self, PyObject *arg)
    {
      ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

      if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
      {
        OBJ_CALL(self->object.copyFrom(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
      return NULL;
    }

    static PyObject *t_AbstractDoubleArray_copyInto(t_AbstractDoubleArray *self, PyObject *arg)
    {
      ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);

      if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
      {
        OBJ_CALL(self->object.copyInto(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "copyInto", arg);
      return NULL;
    }

    static PyObject *t_AbstractDoubleArray_equals(t_AbstractDoubleArray *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractDoubleArray), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractDoubleArray_get(t_AbstractDoubleArray *self, PyObject *arg)
    {
      jint a0;
      jdouble result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError((PyObject *) self, "get", arg);
      return NULL;
    }

    static PyObject *t_AbstractDoubleArray_getArray(t_AbstractDoubleArray *self)
    {
      JArray< jdouble > result((jobject) NULL);
      OBJ_CALL(result = self->object.getArray());
      return result.wrap();
    }

    static PyObject *t_AbstractDoubleArray_getColumn(t_AbstractDoubleArray *self, PyObject *arg)
    {
      jint a0;
      JArray< jdouble > result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.getColumn(a0));
        return result.wrap();
      }

      PyErr_SetArgsError((PyObject *) self, "getColumn", arg);
      return NULL;
    }

    static PyObject *t_AbstractDoubleArray_getRow(t_AbstractDoubleArray *self, PyObject *arg)
    {
      jint a0;
      JArray< jdouble > result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.getRow(a0));
        return result.wrap();
      }

      PyErr_SetArgsError((PyObject *) self, "getRow", arg);
      return NULL;
    }

    static PyObject *t_AbstractDoubleArray_getTable(t_AbstractDoubleArray *self)
    {
      JArray< JArray< jdouble > > result((jobject) NULL);
      OBJ_CALL(result = self->object.getTable());
      return JArray<jobject>(result.this$).wrap(NULL);
    }

    static PyObject *t_AbstractDoubleArray_hashCode(t_AbstractDoubleArray *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(AbstractDoubleArray), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractDoubleArray_iterator(t_AbstractDoubleArray *self)
    {
      ::stallone::api::doubles::IDoubleIterator result((jobject) NULL);
      OBJ_CALL(result = self->object.iterator());
      return ::stallone::api::doubles::t_IDoubleIterator::wrap_Object(result);
    }

    static PyObject *t_AbstractDoubleArray_nonzeroIterator(t_AbstractDoubleArray *self)
    {
      ::stallone::api::doubles::IDoubleIterator result((jobject) NULL);
      OBJ_CALL(result = self->object.nonzeroIterator());
      return ::stallone::api::doubles::t_IDoubleIterator::wrap_Object(result);
    }

    static PyObject *t_AbstractDoubleArray_order(t_AbstractDoubleArray *self)
    {
      jint result;
      OBJ_CALL(result = self->object.order());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_AbstractDoubleArray_set(t_AbstractDoubleArray *self, PyObject *args)
    {
      jint a0;
      jdouble a1;

      if (!parseArgs(args, "ID", &a0, &a1))
      {
        OBJ_CALL(self->object.set(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "set", args);
      return NULL;
    }

    static PyObject *t_AbstractDoubleArray_size(t_AbstractDoubleArray *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_AbstractDoubleArray_toString(t_AbstractDoubleArray *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(AbstractDoubleArray), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_AbstractDoubleArray_view(t_AbstractDoubleArray *self, PyObject *args)
    {
      JArray< jint > a0((jobject) NULL);
      JArray< jint > a1((jobject) NULL);
      ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

      if (!parseArgs(args, "[I[I", &a0, &a1))
      {
        OBJ_CALL(result = self->object.view(a0, a1));
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "view", args);
      return NULL;
    }

    static PyObject *t_AbstractDoubleArray_viewBlock(t_AbstractDoubleArray *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint a2;
      jint a3;
      ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

      if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
      {
        OBJ_CALL(result = self->object.viewBlock(a0, a1, a2, a3));
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "viewBlock", args);
      return NULL;
    }

    static PyObject *t_AbstractDoubleArray_viewColumn(t_AbstractDoubleArray *self, PyObject *arg)
    {
      jint a0;
      ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.viewColumn(a0));
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "viewColumn", arg);
      return NULL;
    }

    static PyObject *t_AbstractDoubleArray_viewRow(t_AbstractDoubleArray *self, PyObject *arg)
    {
      jint a0;
      ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.viewRow(a0));
        return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "viewRow", arg);
      return NULL;
    }

    static PyObject *t_AbstractDoubleArray_zero(t_AbstractDoubleArray *self)
    {
      OBJ_CALL(self->object.zero());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractDoubleArray_get__array(t_AbstractDoubleArray *self, void *data)
    {
      JArray< jdouble > value((jobject) NULL);
      OBJ_CALL(value = self->object.getArray());
      return value.wrap();
    }

    static PyObject *t_AbstractDoubleArray_get__table(t_AbstractDoubleArray *self, void *data)
    {
      JArray< JArray< jdouble > > value((jobject) NULL);
      OBJ_CALL(value = self->object.getTable());
      return JArray<jobject>(value.this$).wrap(NULL);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/hmm/IHMMHiddenVariables.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace hmm {

      ::java::lang::Class *IHMMHiddenVariables::class$ = NULL;
      jmethodID *IHMMHiddenVariables::mids$ = NULL;
      bool IHMMHiddenVariables::live$ = false;

      jclass IHMMHiddenVariables::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/hmm/IHMMHiddenVariables");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getAlpha_d8d154b4] = env->getMethodID(cls, "getAlpha", "(II)D");
          mids$[mid_getBeta_d8d154b4] = env->getMethodID(cls, "getBeta", "(II)D");
          mids$[mid_getGamma_d8d154b4] = env->getMethodID(cls, "getGamma", "(II)D");
          mids$[mid_getGammaByState_e3ead0f5] = env->getMethodID(cls, "getGammaByState", "(I)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getMaxPath_dab10e75] = env->getMethodID(cls, "getMaxPath", "()[I");
          mids$[mid_getPout_d8d154b4] = env->getMethodID(cls, "getPout", "(II)D");
          mids$[mid_logLikelihood_54c6a174] = env->getMethodID(cls, "logLikelihood", "()D");
          mids$[mid_mostProbableState_39c7bd23] = env->getMethodID(cls, "mostProbableState", "(I)I");
          mids$[mid_nStates_54c6a179] = env->getMethodID(cls, "nStates", "()I");
          mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jdouble IHMMHiddenVariables::getAlpha(jint a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_getAlpha_d8d154b4], a0, a1);
      }

      jdouble IHMMHiddenVariables::getBeta(jint a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_getBeta_d8d154b4], a0, a1);
      }

      jdouble IHMMHiddenVariables::getGamma(jint a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_getGamma_d8d154b4], a0, a1);
      }

      ::stallone::api::doubles::IDoubleArray IHMMHiddenVariables::getGammaByState(jint a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getGammaByState_e3ead0f5], a0));
      }

      JArray< jint > IHMMHiddenVariables::getMaxPath() const
      {
        return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMaxPath_dab10e75]));
      }

      jdouble IHMMHiddenVariables::getPout(jint a0, jint a1) const
      {
        return env->callDoubleMethod(this$, mids$[mid_getPout_d8d154b4], a0, a1);
      }

      jdouble IHMMHiddenVariables::logLikelihood() const
      {
        return env->callDoubleMethod(this$, mids$[mid_logLikelihood_54c6a174]);
      }

      jint IHMMHiddenVariables::mostProbableState(jint a0) const
      {
        return env->callIntMethod(this$, mids$[mid_mostProbableState_39c7bd23], a0);
      }

      jint IHMMHiddenVariables::nStates() const
      {
        return env->callIntMethod(this$, mids$[mid_nStates_54c6a179]);
      }

      jint IHMMHiddenVariables::size() const
      {
        return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace hmm {
      static PyObject *t_IHMMHiddenVariables_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IHMMHiddenVariables_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IHMMHiddenVariables_getAlpha(t_IHMMHiddenVariables *self, PyObject *args);
      static PyObject *t_IHMMHiddenVariables_getBeta(t_IHMMHiddenVariables *self, PyObject *args);
      static PyObject *t_IHMMHiddenVariables_getGamma(t_IHMMHiddenVariables *self, PyObject *args);
      static PyObject *t_IHMMHiddenVariables_getGammaByState(t_IHMMHiddenVariables *self, PyObject *arg);
      static PyObject *t_IHMMHiddenVariables_getMaxPath(t_IHMMHiddenVariables *self);
      static PyObject *t_IHMMHiddenVariables_getPout(t_IHMMHiddenVariables *self, PyObject *args);
      static PyObject *t_IHMMHiddenVariables_logLikelihood(t_IHMMHiddenVariables *self);
      static PyObject *t_IHMMHiddenVariables_mostProbableState(t_IHMMHiddenVariables *self, PyObject *arg);
      static PyObject *t_IHMMHiddenVariables_nStates(t_IHMMHiddenVariables *self);
      static PyObject *t_IHMMHiddenVariables_size(t_IHMMHiddenVariables *self);
      static PyObject *t_IHMMHiddenVariables_get__maxPath(t_IHMMHiddenVariables *self, void *data);
      static PyGetSetDef t_IHMMHiddenVariables__fields_[] = {
        DECLARE_GET_FIELD(t_IHMMHiddenVariables, maxPath),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IHMMHiddenVariables__methods_[] = {
        DECLARE_METHOD(t_IHMMHiddenVariables, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IHMMHiddenVariables, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IHMMHiddenVariables, getAlpha, METH_VARARGS),
        DECLARE_METHOD(t_IHMMHiddenVariables, getBeta, METH_VARARGS),
        DECLARE_METHOD(t_IHMMHiddenVariables, getGamma, METH_VARARGS),
        DECLARE_METHOD(t_IHMMHiddenVariables, getGammaByState, METH_O),
        DECLARE_METHOD(t_IHMMHiddenVariables, getMaxPath, METH_NOARGS),
        DECLARE_METHOD(t_IHMMHiddenVariables, getPout, METH_VARARGS),
        DECLARE_METHOD(t_IHMMHiddenVariables, logLikelihood, METH_NOARGS),
        DECLARE_METHOD(t_IHMMHiddenVariables, mostProbableState, METH_O),
        DECLARE_METHOD(t_IHMMHiddenVariables, nStates, METH_NOARGS),
        DECLARE_METHOD(t_IHMMHiddenVariables, size, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IHMMHiddenVariables, t_IHMMHiddenVariables, ::java::lang::Object, IHMMHiddenVariables, abstract_init, 0, 0, t_IHMMHiddenVariables__fields_, 0, 0);

      void t_IHMMHiddenVariables::install(PyObject *module)
      {
        installType(&PY_TYPE(IHMMHiddenVariables), module, "IHMMHiddenVariables", 0);
      }

      void t_IHMMHiddenVariables::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IHMMHiddenVariables).tp_dict, "class_", make_descriptor(IHMMHiddenVariables::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IHMMHiddenVariables).tp_dict, "wrapfn_", make_descriptor(t_IHMMHiddenVariables::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IHMMHiddenVariables).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IHMMHiddenVariables_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IHMMHiddenVariables::initializeClass, 1)))
          return NULL;
        return t_IHMMHiddenVariables::wrap_Object(IHMMHiddenVariables(((t_IHMMHiddenVariables *) arg)->object.this$));
      }
      static PyObject *t_IHMMHiddenVariables_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IHMMHiddenVariables::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IHMMHiddenVariables_getAlpha(t_IHMMHiddenVariables *self, PyObject *args)
      {
        jint a0;
        jint a1;
        jdouble result;

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.getAlpha(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getAlpha", args);
        return NULL;
      }

      static PyObject *t_IHMMHiddenVariables_getBeta(t_IHMMHiddenVariables *self, PyObject *args)
      {
        jint a0;
        jint a1;
        jdouble result;

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.getBeta(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getBeta", args);
        return NULL;
      }

      static PyObject *t_IHMMHiddenVariables_getGamma(t_IHMMHiddenVariables *self, PyObject *args)
      {
        jint a0;
        jint a1;
        jdouble result;

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.getGamma(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getGamma", args);
        return NULL;
      }

      static PyObject *t_IHMMHiddenVariables_getGammaByState(t_IHMMHiddenVariables *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.getGammaByState(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getGammaByState", arg);
        return NULL;
      }

      static PyObject *t_IHMMHiddenVariables_getMaxPath(t_IHMMHiddenVariables *self)
      {
        JArray< jint > result((jobject) NULL);
        OBJ_CALL(result = self->object.getMaxPath());
        return result.wrap();
      }

      static PyObject *t_IHMMHiddenVariables_getPout(t_IHMMHiddenVariables *self, PyObject *args)
      {
        jint a0;
        jint a1;
        jdouble result;

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.getPout(a0, a1));
          return PyFloat_FromDouble((double) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getPout", args);
        return NULL;
      }

      static PyObject *t_IHMMHiddenVariables_logLikelihood(t_IHMMHiddenVariables *self)
      {
        jdouble result;
        OBJ_CALL(result = self->object.logLikelihood());
        return PyFloat_FromDouble((double) result);
      }

      static PyObject *t_IHMMHiddenVariables_mostProbableState(t_IHMMHiddenVariables *self, PyObject *arg)
      {
        jint a0;
        jint result;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.mostProbableState(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "mostProbableState", arg);
        return NULL;
      }

      static PyObject *t_IHMMHiddenVariables_nStates(t_IHMMHiddenVariables *self)
      {
        jint result;
        OBJ_CALL(result = self->object.nStates());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IHMMHiddenVariables_size(t_IHMMHiddenVariables *self)
      {
        jint result;
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IHMMHiddenVariables_get__maxPath(t_IHMMHiddenVariables *self, void *data)
      {
        JArray< jint > value((jobject) NULL);
        OBJ_CALL(value = self->object.getMaxPath());
        return value.wrap();
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/discretization/IDiscretization.h"
#include "stallone/api/doubles/IDoubleArray.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace discretization {

      ::java::lang::Class *IDiscretization::class$ = NULL;
      jmethodID *IDiscretization::mids$ = NULL;
      bool IDiscretization::live$ = false;

      jclass IDiscretization::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/discretization/IDiscretization");

          mids$ = new jmethodID[max_mid];
          mids$[mid_assign_02530855] = env->getMethodID(cls, "assign", "(Lstallone/api/doubles/IDoubleArray;)I");
          mids$[mid_assignFuzzy_32638cb7] = env->getMethodID(cls, "assignFuzzy", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");
          mids$[mid_getRepresentative_32638cb7] = env->getMethodID(cls, "getRepresentative", "(Lstallone/api/doubles/IDoubleArray;)Lstallone/api/doubles/IDoubleArray;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jint IDiscretization::assign(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_assign_02530855], a0.this$);
      }

      ::stallone::api::doubles::IDoubleArray IDiscretization::assignFuzzy(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_assignFuzzy_32638cb7], a0.this$));
      }

      ::stallone::api::doubles::IDoubleArray IDiscretization::getRepresentative(const ::stallone::api::doubles::IDoubleArray & a0) const
      {
        return ::stallone::api::doubles::IDoubleArray(env->callObjectMethod(this$, mids$[mid_getRepresentative_32638cb7], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace discretization {
      static PyObject *t_IDiscretization_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDiscretization_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IDiscretization_assign(t_IDiscretization *self, PyObject *arg);
      static PyObject *t_IDiscretization_assignFuzzy(t_IDiscretization *self, PyObject *arg);
      static PyObject *t_IDiscretization_getRepresentative(t_IDiscretization *self, PyObject *arg);

      static PyMethodDef t_IDiscretization__methods_[] = {
        DECLARE_METHOD(t_IDiscretization, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDiscretization, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IDiscretization, assign, METH_O),
        DECLARE_METHOD(t_IDiscretization, assignFuzzy, METH_O),
        DECLARE_METHOD(t_IDiscretization, getRepresentative, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IDiscretization, t_IDiscretization, ::java::lang::Object, IDiscretization, abstract_init, 0, 0, 0, 0, 0);

      void t_IDiscretization::install(PyObject *module)
      {
        installType(&PY_TYPE(IDiscretization), module, "IDiscretization", 0);
      }

      void t_IDiscretization::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IDiscretization).tp_dict, "class_", make_descriptor(IDiscretization::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IDiscretization).tp_dict, "wrapfn_", make_descriptor(t_IDiscretization::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IDiscretization).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IDiscretization_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IDiscretization::initializeClass, 1)))
          return NULL;
        return t_IDiscretization::wrap_Object(IDiscretization(((t_IDiscretization *) arg)->object.this$));
      }
      static PyObject *t_IDiscretization_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IDiscretization::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IDiscretization_assign(t_IDiscretization *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.assign(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "assign", arg);
        return NULL;
      }

      static PyObject *t_IDiscretization_assignFuzzy(t_IDiscretization *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.assignFuzzy(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "assignFuzzy", arg);
        return NULL;
      }

      static PyObject *t_IDiscretization_getRepresentative(t_IDiscretization *self, PyObject *arg)
      {
        ::stallone::api::doubles::IDoubleArray a0((jobject) NULL);
        ::stallone::api::doubles::IDoubleArray result((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::doubles::IDoubleArray::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.getRepresentative(a0));
          return ::stallone::api::doubles::t_IDoubleArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getRepresentative", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/algebra/IComplexNumber.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace algebra {

      ::java::lang::Class *IComplexNumber::class$ = NULL;
      jmethodID *IComplexNumber::mids$ = NULL;
      bool IComplexNumber::live$ = false;

      jclass IComplexNumber::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/algebra/IComplexNumber");

          mids$ = new jmethodID[max_mid];
          mids$[mid_abs_54c6a174] = env->getMethodID(cls, "abs", "()D");
          mids$[mid_add_4501e87b] = env->getMethodID(cls, "add", "(Lstallone/api/algebra/IComplexNumber;)Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_addIm_1bd67997] = env->getMethodID(cls, "addIm", "(D)Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_addRe_1bd67997] = env->getMethodID(cls, "addRe", "(D)Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_conj_8803cf94] = env->getMethodID(cls, "conj", "()Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_conj_4501e87b] = env->getMethodID(cls, "conj", "(Lstallone/api/algebra/IComplexNumber;)Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_conjInplace_8803cf94] = env->getMethodID(cls, "conjInplace", "()Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_copy_8803cf94] = env->getMethodID(cls, "copy", "()Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_copy_4501e87b] = env->getMethodID(cls, "copy", "(Lstallone/api/algebra/IComplexNumber;)Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_get_54c6a174] = env->getMethodID(cls, "get", "()D");
          mids$[mid_getIm_54c6a174] = env->getMethodID(cls, "getIm", "()D");
          mids$[mid_getRe_54c6a174] = env->getMethodID(cls, "getRe", "()D");
          mids$[mid_invert_8803cf94] = env->getMethodID(cls, "invert", "()Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_invert_4501e87b] = env->getMethodID(cls, "invert", "(Lstallone/api/algebra/IComplexNumber;)Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_invertInplace_8803cf94] = env->getMethodID(cls, "invertInplace", "()Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_isPurelyImaginary_54c6a16a] = env->getMethodID(cls, "isPurelyImaginary", "()Z");
          mids$[mid_isPurelyReal_54c6a16a] = env->getMethodID(cls, "isPurelyReal", "()Z");
          mids$[mid_isZero_54c6a16a] = env->getMethodID(cls, "isZero", "()Z");
          mids$[mid_multBy_4501e87b] = env->getMethodID(cls, "multBy", "(Lstallone/api/algebra/IComplexNumber;)Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_negate_8803cf94] = env->getMethodID(cls, "negate", "()Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_negate_4501e87b] = env->getMethodID(cls, "negate", "(Lstallone/api/algebra/IComplexNumber;)Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_negateInplace_8803cf94] = env->getMethodID(cls, "negateInplace", "()Lstallone/api/algebra/IComplexNumber;");
          mids$[mid_set_5d1c7645] = env->getMethodID(cls, "set", "(D)V");
          mids$[mid_setComplex_b1e28678] = env->getMethodID(cls, "setComplex", "(DD)V");
          mids$[mid_setIm_5d1c7645] = env->getMethodID(cls, "setIm", "(D)V");
          mids$[mid_setRe_5d1c7645] = env->getMethodID(cls, "setRe", "(D)V");
          mids$[mid_setScalar_0cb5c9b1] = env->getMethodID(cls, "setScalar", "(Lstallone/api/algebra/IComplexNumber;)V");
          mids$[mid_storesComplex_54c6a16a] = env->getMethodID(cls, "storesComplex", "()Z");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jdouble IComplexNumber::abs() const
      {
        return env->callDoubleMethod(this$, mids$[mid_abs_54c6a174]);
      }

      IComplexNumber IComplexNumber::add(const IComplexNumber & a0) const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_add_4501e87b], a0.this$));
      }

      IComplexNumber IComplexNumber::addIm(jdouble a0) const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_addIm_1bd67997], a0));
      }

      IComplexNumber IComplexNumber::addRe(jdouble a0) const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_addRe_1bd67997], a0));
      }

      IComplexNumber IComplexNumber::conj() const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_conj_8803cf94]));
      }

      IComplexNumber IComplexNumber::conj(const IComplexNumber & a0) const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_conj_4501e87b], a0.this$));
      }

      IComplexNumber IComplexNumber::conjInplace() const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_conjInplace_8803cf94]));
      }

      IComplexNumber IComplexNumber::copy() const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_copy_8803cf94]));
      }

      IComplexNumber IComplexNumber::copy(const IComplexNumber & a0) const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_copy_4501e87b], a0.this$));
      }

      jdouble IComplexNumber::get() const
      {
        return env->callDoubleMethod(this$, mids$[mid_get_54c6a174]);
      }

      jdouble IComplexNumber::getIm() const
      {
        return env->callDoubleMethod(this$, mids$[mid_getIm_54c6a174]);
      }

      jdouble IComplexNumber::getRe() const
      {
        return env->callDoubleMethod(this$, mids$[mid_getRe_54c6a174]);
      }

      IComplexNumber IComplexNumber::invert() const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_invert_8803cf94]));
      }

      IComplexNumber IComplexNumber::invert(const IComplexNumber & a0) const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_invert_4501e87b], a0.this$));
      }

      IComplexNumber IComplexNumber::invertInplace() const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_invertInplace_8803cf94]));
      }

      jboolean IComplexNumber::isPurelyImaginary() const
      {
        return env->callBooleanMethod(this$, mids$[mid_isPurelyImaginary_54c6a16a]);
      }

      jboolean IComplexNumber::isPurelyReal() const
      {
        return env->callBooleanMethod(this$, mids$[mid_isPurelyReal_54c6a16a]);
      }

      jboolean IComplexNumber::isZero() const
      {
        return env->callBooleanMethod(this$, mids$[mid_isZero_54c6a16a]);
      }

      IComplexNumber IComplexNumber::multBy(const IComplexNumber & a0) const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_multBy_4501e87b], a0.this$));
      }

      IComplexNumber IComplexNumber::negate() const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_negate_8803cf94]));
      }

      IComplexNumber IComplexNumber::negate(const IComplexNumber & a0) const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_negate_4501e87b], a0.this$));
      }

      IComplexNumber IComplexNumber::negateInplace() const
      {
        return IComplexNumber(env->callObjectMethod(this$, mids$[mid_negateInplace_8803cf94]));
      }

      void IComplexNumber::set(jdouble a0) const
      {
        env->callVoidMethod(this$, mids$[mid_set_5d1c7645], a0);
      }

      void IComplexNumber::setComplex(jdouble a0, jdouble a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setComplex_b1e28678], a0, a1);
      }

      void IComplexNumber::setIm(jdouble a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setIm_5d1c7645], a0);
      }

      void IComplexNumber::setRe(jdouble a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setRe_5d1c7645], a0);
      }

      void IComplexNumber::setScalar(const IComplexNumber & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setScalar_0cb5c9b1], a0.this$);
      }

      jboolean IComplexNumber::storesComplex() const
      {
        return env->callBooleanMethod(this$, mids$[mid_storesComplex_54c6a16a]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace algebra {
      static PyObject *t_IComplexNumber_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IComplexNumber_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IComplexNumber_abs(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_add(t_IComplexNumber *self, PyObject *arg);
      static PyObject *t_IComplexNumber_addIm(t_IComplexNumber *self, PyObject *arg);
      static PyObject *t_IComplexNumber_addRe(t_IComplexNumber *self, PyObject *arg);
      static PyObject *t_IComplexNumber_conj(t_IComplexNumber *self, PyObject *args);
      static PyObject *t_IComplexNumber_conjInplace(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_copy(t_IComplexNumber *self, PyObject *args);
      static PyObject *t_IComplexNumber_get(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_getIm(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_getRe(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_invert(t_IComplexNumber *self, PyObject *args);
      static PyObject *t_IComplexNumber_invertInplace(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_isPurelyImaginary(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_isPurelyReal(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_isZero(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_multBy(t_IComplexNumber *self, PyObject *arg);
      static PyObject *t_IComplexNumber_negate(t_IComplexNumber *self, PyObject *args);
      static PyObject *t_IComplexNumber_negateInplace(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_set(t_IComplexNumber *self, PyObject *arg);
      static PyObject *t_IComplexNumber_setComplex(t_IComplexNumber *self, PyObject *args);
      static PyObject *t_IComplexNumber_setIm(t_IComplexNumber *self, PyObject *arg);
      static PyObject *t_IComplexNumber_setRe(t_IComplexNumber *self, PyObject *arg);
      static PyObject *t_IComplexNumber_setScalar(t_IComplexNumber *self, PyObject *arg);
      static PyObject *t_IComplexNumber_storesComplex(t_IComplexNumber *self);
      static PyObject *t_IComplexNumber_get__im(t_IComplexNumber *self, void *data);
      static int t_IComplexNumber_set__im(t_IComplexNumber *self, PyObject *arg, void *data);
      static PyObject *t_IComplexNumber_get__purelyImaginary(t_IComplexNumber *self, void *data);
      static PyObject *t_IComplexNumber_get__purelyReal(t_IComplexNumber *self, void *data);
      static PyObject *t_IComplexNumber_get__re(t_IComplexNumber *self, void *data);
      static int t_IComplexNumber_set__re(t_IComplexNumber *self, PyObject *arg, void *data);
      static int t_IComplexNumber_set__scalar(t_IComplexNumber *self, PyObject *arg, void *data);
      static PyObject *t_IComplexNumber_get__zero(t_IComplexNumber *self, void *data);
      static PyGetSetDef t_IComplexNumber__fields_[] = {
        DECLARE_GETSET_FIELD(t_IComplexNumber, im),
        DECLARE_GET_FIELD(t_IComplexNumber, purelyImaginary),
        DECLARE_GET_FIELD(t_IComplexNumber, purelyReal),
        DECLARE_GETSET_FIELD(t_IComplexNumber, re),
        DECLARE_SET_FIELD(t_IComplexNumber, scalar),
        DECLARE_GET_FIELD(t_IComplexNumber, zero),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IComplexNumber__methods_[] = {
        DECLARE_METHOD(t_IComplexNumber, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IComplexNumber, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IComplexNumber, abs, METH_NOARGS),
        DECLARE_METHOD(t_IComplexNumber, add, METH_O),
        DECLARE_METHOD(t_IComplexNumber, addIm, METH_O),
        DECLARE_METHOD(t_IComplexNumber, addRe, METH_O),
        DECLARE_METHOD(t_IComplexNumber, conj, METH_VARARGS),
        DECLARE_METHOD(t_IComplexNumber, conjInplace, METH_NOARGS),
        DECLARE_METHOD(t_IComplexNumber, copy, METH_VARARGS),
        DECLARE_METHOD(t_IComplexNumber, get, METH_NOARGS),
        DECLARE_METHOD(t_IComplexNumber, getIm, METH_NOARGS),
        DECLARE_METHOD(t_IComplexNumber, getRe, METH_NOARGS),
        DECLARE_METHOD(t_IComplexNumber, invert, METH_VARARGS),
        DECLARE_METHOD(t_IComplexNumber, invertInplace, METH_NOARGS),
        DECLARE_METHOD(t_IComplexNumber, isPurelyImaginary, METH_NOARGS),
        DECLARE_METHOD(t_IComplexNumber, isPurelyReal, METH_NOARGS),
        DECLARE_METHOD(t_IComplexNumber, isZero, METH_NOARGS),
        DECLARE_METHOD(t_IComplexNumber, multBy, METH_O),
        DECLARE_METHOD(t_IComplexNumber, negate, METH_VARARGS),
        DECLARE_METHOD(t_IComplexNumber, negateInplace, METH_NOARGS),
        DECLARE_METHOD(t_IComplexNumber, set, METH_O),
        DECLARE_METHOD(t_IComplexNumber, setComplex, METH_VARARGS),
        DECLARE_METHOD(t_IComplexNumber, setIm, METH_O),
        DECLARE_METHOD(t_IComplexNumber, setRe, METH_O),
        DECLARE_METHOD(t_IComplexNumber, setScalar, METH_O),
        DECLARE_METHOD(t_IComplexNumber, storesComplex, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IComplexNumber, t_IComplexNumber, ::java::lang::Object, IComplexNumber, abstract_init, 0, 0, t_IComplexNumber__fields_, 0, 0);

      void t_IComplexNumber::install(PyObject *module)
      {
        installType(&PY_TYPE(IComplexNumber), module, "IComplexNumber", 0);
      }

      void t_IComplexNumber::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IComplexNumber).tp_dict, "class_", make_descriptor(IComplexNumber::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IComplexNumber).tp_dict, "wrapfn_", make_descriptor(t_IComplexNumber::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IComplexNumber).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IComplexNumber_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IComplexNumber::initializeClass, 1)))
          return NULL;
        return t_IComplexNumber::wrap_Object(IComplexNumber(((t_IComplexNumber *) arg)->object.this$));
      }
      static PyObject *t_IComplexNumber_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IComplexNumber::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IComplexNumber_abs(t_IComplexNumber *self)
      {
        jdouble result;
        OBJ_CALL(result = self->object.abs());
        return PyFloat_FromDouble((double) result);
      }

      static PyObject *t_IComplexNumber_add(t_IComplexNumber *self, PyObject *arg)
      {
        IComplexNumber a0((jobject) NULL);
        IComplexNumber result((jobject) NULL);

        if (!parseArg(arg, "k", IComplexNumber::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.add(a0));
          return t_IComplexNumber::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "add", arg);
        return NULL;
      }

      static PyObject *t_IComplexNumber_addIm(t_IComplexNumber *self, PyObject *arg)
      {
        jdouble a0;
        IComplexNumber result((jobject) NULL);

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(result = self->object.addIm(a0));
          return t_IComplexNumber::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "addIm", arg);
        return NULL;
      }

      static PyObject *t_IComplexNumber_addRe(t_IComplexNumber *self, PyObject *arg)
      {
        jdouble a0;
        IComplexNumber result((jobject) NULL);

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(result = self->object.addRe(a0));
          return t_IComplexNumber::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "addRe", arg);
        return NULL;
      }

      static PyObject *t_IComplexNumber_conj(t_IComplexNumber *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            IComplexNumber result((jobject) NULL);
            OBJ_CALL(result = self->object.conj());
            return t_IComplexNumber::wrap_Object(result);
          }
          break;
         case 1:
          {
            IComplexNumber a0((jobject) NULL);
            IComplexNumber result((jobject) NULL);

            if (!parseArgs(args, "k", IComplexNumber::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.conj(a0));
              return t_IComplexNumber::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "conj", args);
        return NULL;
      }

      static PyObject *t_IComplexNumber_conjInplace(t_IComplexNumber *self)
      {
        IComplexNumber result((jobject) NULL);
        OBJ_CALL(result = self->object.conjInplace());
        return t_IComplexNumber::wrap_Object(result);
      }

      static PyObject *t_IComplexNumber_copy(t_IComplexNumber *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            IComplexNumber result((jobject) NULL);
            OBJ_CALL(result = self->object.copy());
            return t_IComplexNumber::wrap_Object(result);
          }
          break;
         case 1:
          {
            IComplexNumber a0((jobject) NULL);
            IComplexNumber result((jobject) NULL);

            if (!parseArgs(args, "k", IComplexNumber::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.copy(a0));
              return t_IComplexNumber::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "copy", args);
        return NULL;
      }

      static PyObject *t_IComplexNumber_get(t_IComplexNumber *self)
      {
        jdouble result;
        OBJ_CALL(result = self->object.get());
        return PyFloat_FromDouble((double) result);
      }

      static PyObject *t_IComplexNumber_getIm(t_IComplexNumber *self)
      {
        jdouble result;
        OBJ_CALL(result = self->object.getIm());
        return PyFloat_FromDouble((double) result);
      }

      static PyObject *t_IComplexNumber_getRe(t_IComplexNumber *self)
      {
        jdouble result;
        OBJ_CALL(result = self->object.getRe());
        return PyFloat_FromDouble((double) result);
      }

      static PyObject *t_IComplexNumber_invert(t_IComplexNumber *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            IComplexNumber result((jobject) NULL);
            OBJ_CALL(result = self->object.invert());
            return t_IComplexNumber::wrap_Object(result);
          }
          break;
         case 1:
          {
            IComplexNumber a0((jobject) NULL);
            IComplexNumber result((jobject) NULL);

            if (!parseArgs(args, "k", IComplexNumber::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.invert(a0));
              return t_IComplexNumber::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "invert", args);
        return NULL;
      }

      static PyObject *t_IComplexNumber_invertInplace(t_IComplexNumber *self)
      {
        IComplexNumber result((jobject) NULL);
        OBJ_CALL(result = self->object.invertInplace());
        return t_IComplexNumber::wrap_Object(result);
      }

      static PyObject *t_IComplexNumber_isPurelyImaginary(t_IComplexNumber *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.isPurelyImaginary());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_IComplexNumber_isPurelyReal(t_IComplexNumber *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.isPurelyReal());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_IComplexNumber_isZero(t_IComplexNumber *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.isZero());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_IComplexNumber_multBy(t_IComplexNumber *self, PyObject *arg)
      {
        IComplexNumber a0((jobject) NULL);
        IComplexNumber result((jobject) NULL);

        if (!parseArg(arg, "k", IComplexNumber::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.multBy(a0));
          return t_IComplexNumber::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "multBy", arg);
        return NULL;
      }

      static PyObject *t_IComplexNumber_negate(t_IComplexNumber *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            IComplexNumber result((jobject) NULL);
            OBJ_CALL(result = self->object.negate());
            return t_IComplexNumber::wrap_Object(result);
          }
          break;
         case 1:
          {
            IComplexNumber a0((jobject) NULL);
            IComplexNumber result((jobject) NULL);

            if (!parseArgs(args, "k", IComplexNumber::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.negate(a0));
              return t_IComplexNumber::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "negate", args);
        return NULL;
      }

      static PyObject *t_IComplexNumber_negateInplace(t_IComplexNumber *self)
      {
        IComplexNumber result((jobject) NULL);
        OBJ_CALL(result = self->object.negateInplace());
        return t_IComplexNumber::wrap_Object(result);
      }

      static PyObject *t_IComplexNumber_set(t_IComplexNumber *self, PyObject *arg)
      {
        jdouble a0;

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(self->object.set(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "set", arg);
        return NULL;
      }

      static PyObject *t_IComplexNumber_setComplex(t_IComplexNumber *self, PyObject *args)
      {
        jdouble a0;
        jdouble a1;

        if (!parseArgs(args, "DD", &a0, &a1))
        {
          OBJ_CALL(self->object.setComplex(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setComplex", args);
        return NULL;
      }

      static PyObject *t_IComplexNumber_setIm(t_IComplexNumber *self, PyObject *arg)
      {
        jdouble a0;

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(self->object.setIm(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setIm", arg);
        return NULL;
      }

      static PyObject *t_IComplexNumber_setRe(t_IComplexNumber *self, PyObject *arg)
      {
        jdouble a0;

        if (!parseArg(arg, "D", &a0))
        {
          OBJ_CALL(self->object.setRe(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setRe", arg);
        return NULL;
      }

      static PyObject *t_IComplexNumber_setScalar(t_IComplexNumber *self, PyObject *arg)
      {
        IComplexNumber a0((jobject) NULL);

        if (!parseArg(arg, "k", IComplexNumber::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setScalar(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setScalar", arg);
        return NULL;
      }

      static PyObject *t_IComplexNumber_storesComplex(t_IComplexNumber *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.storesComplex());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_IComplexNumber_get__im(t_IComplexNumber *self, void *data)
      {
        jdouble value;
        OBJ_CALL(value = self->object.getIm());
        return PyFloat_FromDouble((double) value);
      }
      static int t_IComplexNumber_set__im(t_IComplexNumber *self, PyObject *arg, void *data)
      {
        {
          jdouble value;
          if (!parseArg(arg, "D", &value))
          {
            INT_CALL(self->object.setIm(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "im", arg);
        return -1;
      }

      static PyObject *t_IComplexNumber_get__purelyImaginary(t_IComplexNumber *self, void *data)
      {
        jboolean value;
        OBJ_CALL(value = self->object.isPurelyImaginary());
        Py_RETURN_BOOL(value);
      }

      static PyObject *t_IComplexNumber_get__purelyReal(t_IComplexNumber *self, void *data)
      {
        jboolean value;
        OBJ_CALL(value = self->object.isPurelyReal());
        Py_RETURN_BOOL(value);
      }

      static PyObject *t_IComplexNumber_get__re(t_IComplexNumber *self, void *data)
      {
        jdouble value;
        OBJ_CALL(value = self->object.getRe());
        return PyFloat_FromDouble((double) value);
      }
      static int t_IComplexNumber_set__re(t_IComplexNumber *self, PyObject *arg, void *data)
      {
        {
          jdouble value;
          if (!parseArg(arg, "D", &value))
          {
            INT_CALL(self->object.setRe(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "re", arg);
        return -1;
      }

      static int t_IComplexNumber_set__scalar(t_IComplexNumber *self, PyObject *arg, void *data)
      {
        {
          IComplexNumber value((jobject) NULL);
          if (!parseArg(arg, "k", IComplexNumber::initializeClass, &value))
          {
            INT_CALL(self->object.setScalar(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "scalar", arg);
        return -1;
      }

      static PyObject *t_IComplexNumber_get__zero(t_IComplexNumber *self, void *data)
      {
        jboolean value;
        OBJ_CALL(value = self->object.isZero());
        Py_RETURN_BOOL(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/algebra/INumericalEquality.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace algebra {

      ::java::lang::Class *INumericalEquality::class$ = NULL;
      jmethodID *INumericalEquality::mids$ = NULL;
      bool INumericalEquality::live$ = false;

      jclass INumericalEquality::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/algebra/INumericalEquality");

          mids$ = new jmethodID[max_mid];
          mids$[mid_numericallyEqual_d0549eb5] = env->getMethodID(cls, "numericallyEqual", "(Ljava/lang/Object;Ljava/lang/Object;D)Z");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jboolean INumericalEquality::numericallyEqual(const ::java::lang::Object & a0, const ::java::lang::Object & a1, jdouble a2) const
      {
        return env->callBooleanMethod(this$, mids$[mid_numericallyEqual_d0549eb5], a0.this$, a1.this$, a2);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace algebra {
      static PyObject *t_INumericalEquality_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_INumericalEquality_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_INumericalEquality_of_(t_INumericalEquality *self, PyObject *args);
      static PyObject *t_INumericalEquality_numericallyEqual(t_INumericalEquality *self, PyObject *args);
      static PyObject *t_INumericalEquality_get__parameters_(t_INumericalEquality *self, void *data);
      static PyGetSetDef t_INumericalEquality__fields_[] = {
        DECLARE_GET_FIELD(t_INumericalEquality, parameters_),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_INumericalEquality__methods_[] = {
        DECLARE_METHOD(t_INumericalEquality, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_INumericalEquality, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_INumericalEquality, of_, METH_VARARGS),
        DECLARE_METHOD(t_INumericalEquality, numericallyEqual, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(INumericalEquality, t_INumericalEquality, ::java::lang::Object, INumericalEquality, abstract_init, 0, 0, t_INumericalEquality__fields_, 0, 0);
      PyObject *t_INumericalEquality::wrap_Object(const INumericalEquality& object, PyTypeObject *T)
      {
        PyObject *obj = t_INumericalEquality::wrap_Object(object);
        if (obj != NULL && obj != Py_None)
        {
          t_INumericalEquality *self = (t_INumericalEquality *) obj;
          self->parameters[0] = T;
        }
        return obj;
      }

      PyObject *t_INumericalEquality::wrap_jobject(const jobject& object, PyTypeObject *T)
      {
        PyObject *obj = t_INumericalEquality::wrap_jobject(object);
        if (obj != NULL && obj != Py_None)
        {
          t_INumericalEquality *self = (t_INumericalEquality *) obj;
          self->parameters[0] = T;
        }
        return obj;
      }

      void t_INumericalEquality::install(PyObject *module)
      {
        installType(&PY_TYPE(INumericalEquality), module, "INumericalEquality", 0);
      }

      void t_INumericalEquality::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(INumericalEquality).tp_dict, "class_", make_descriptor(INumericalEquality::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(INumericalEquality).tp_dict, "wrapfn_", make_descriptor(t_INumericalEquality::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(INumericalEquality).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_INumericalEquality_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, INumericalEquality::initializeClass, 1)))
          return NULL;
        return t_INumericalEquality::wrap_Object(INumericalEquality(((t_INumericalEquality *) arg)->object.this$));
      }
      static PyObject *t_INumericalEquality_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, INumericalEquality::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_INumericalEquality_of_(t_INumericalEquality *self, PyObject *args)
      {
        if (!parseArg(args, "T", 1, &(self->parameters)))
          Py_RETURN_SELF;
        return PyErr_SetArgsError((PyObject *) self, "of_", args);
      }

      static PyObject *t_INumericalEquality_numericallyEqual(t_INumericalEquality *self, PyObject *args)
      {
        ::java::lang::Object a0((jobject) NULL);
        ::java::lang::Object a1((jobject) NULL);
        jdouble a2;
        jboolean result;

        if (!parseArgs(args, "OOD", self->parameters[0], self->parameters[0], &a0, &a1, &a2))
        {
          OBJ_CALL(result = self->object.numericallyEqual(a0, a1, a2));
          Py_RETURN_BOOL(result);
        }

        PyErr_SetArgsError((PyObject *) self, "numericallyEqual", args);
        return NULL;
      }
      static PyObject *t_INumericalEquality_get__parameters_(t_INumericalEquality *self, void *data)
      {
        return typeParameters(self->parameters, sizeof(self->parameters));
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/doubles/DoublesPrimitive.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace doubles {

      ::java::lang::Class *DoublesPrimitive::class$ = NULL;
      jmethodID *DoublesPrimitive::mids$ = NULL;
      bool DoublesPrimitive::live$ = false;

      jclass DoublesPrimitive::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/doubles/DoublesPrimitive");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      DoublesPrimitive::DoublesPrimitive() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace doubles {
      static PyObject *t_DoublesPrimitive_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DoublesPrimitive_instance_(PyTypeObject *type, PyObject *arg);
      static int t_DoublesPrimitive_init_(t_DoublesPrimitive *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_DoublesPrimitive__methods_[] = {
        DECLARE_METHOD(t_DoublesPrimitive, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DoublesPrimitive, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(DoublesPrimitive, t_DoublesPrimitive, ::java::lang::Object, DoublesPrimitive, t_DoublesPrimitive_init_, 0, 0, 0, 0, 0);

      void t_DoublesPrimitive::install(PyObject *module)
      {
        installType(&PY_TYPE(DoublesPrimitive), module, "DoublesPrimitive", 0);
      }

      void t_DoublesPrimitive::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(DoublesPrimitive).tp_dict, "class_", make_descriptor(DoublesPrimitive::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(DoublesPrimitive).tp_dict, "wrapfn_", make_descriptor(t_DoublesPrimitive::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(DoublesPrimitive).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_DoublesPrimitive_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, DoublesPrimitive::initializeClass, 1)))
          return NULL;
        return t_DoublesPrimitive::wrap_Object(DoublesPrimitive(((t_DoublesPrimitive *) arg)->object.this$));
      }
      static PyObject *t_DoublesPrimitive_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, DoublesPrimitive::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_DoublesPrimitive_init_(t_DoublesPrimitive *self, PyObject *args, PyObject *kwds)
      {
        DoublesPrimitive object((jobject) NULL);

        INT_CALL(object = DoublesPrimitive());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/intsequence/IIntSequenceLoader.h"
#include "stallone/api/ints/IIntArray.h"
#include "java/lang/String.h"
#include "java/lang/Iterable.h"
#include "java/lang/Integer.h"
#include "stallone/api/intsequence/IIntReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace intsequence {

      ::java::lang::Class *IIntSequenceLoader::class$ = NULL;
      jmethodID *IIntSequenceLoader::mids$ = NULL;
      bool IIntSequenceLoader::live$ = false;

      jclass IIntSequenceLoader::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/intsequence/IIntSequenceLoader");

          mids$ = new jmethodID[max_mid];
          mids$[mid_addSource_5fdc3f48] = env->getMethodID(cls, "addSource", "(Ljava/lang/String;)V");
          mids$[mid_getSingleIntLoader_0ab6fc38] = env->getMethodID(cls, "getSingleIntLoader", "()Ljava/lang/Iterable;");
          mids$[mid_getSingleSequenceLoader_0ab6fc38] = env->getMethodID(cls, "getSingleSequenceLoader", "()Ljava/lang/Iterable;");
          mids$[mid_load_d8d154b9] = env->getMethodID(cls, "load", "(II)I");
          mids$[mid_loadSequence_62213cdb] = env->getMethodID(cls, "loadSequence", "(I)Lstallone/api/ints/IIntArray;");
          mids$[mid_memorySizeOfLargestSequence_54c6a17a] = env->getMethodID(cls, "memorySizeOfLargestSequence", "()J");
          mids$[mid_memorySizeOfSingleSequence_39c7bd20] = env->getMethodID(cls, "memorySizeOfSingleSequence", "(I)J");
          mids$[mid_memorySizeTotal_54c6a17a] = env->getMethodID(cls, "memorySizeTotal", "()J");
          mids$[mid_numberOfSequences_54c6a179] = env->getMethodID(cls, "numberOfSequences", "()I");
          mids$[mid_scan_54c6a166] = env->getMethodID(cls, "scan", "()V");
          mids$[mid_setLoader_441086c2] = env->getMethodID(cls, "setLoader", "(Lstallone/api/intsequence/IIntReader;)V");
          mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
          mids$[mid_size_39c7bd23] = env->getMethodID(cls, "size", "(I)I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void IIntSequenceLoader::addSource(const ::java::lang::String & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_addSource_5fdc3f48], a0.this$);
      }

      ::java::lang::Iterable IIntSequenceLoader::getSingleIntLoader() const
      {
        return ::java::lang::Iterable(env->callObjectMethod(this$, mids$[mid_getSingleIntLoader_0ab6fc38]));
      }

      ::java::lang::Iterable IIntSequenceLoader::getSingleSequenceLoader() const
      {
        return ::java::lang::Iterable(env->callObjectMethod(this$, mids$[mid_getSingleSequenceLoader_0ab6fc38]));
      }

      jint IIntSequenceLoader::load(jint a0, jint a1) const
      {
        return env->callIntMethod(this$, mids$[mid_load_d8d154b9], a0, a1);
      }

      ::stallone::api::ints::IIntArray IIntSequenceLoader::loadSequence(jint a0) const
      {
        return ::stallone::api::ints::IIntArray(env->callObjectMethod(this$, mids$[mid_loadSequence_62213cdb], a0));
      }

      jlong IIntSequenceLoader::memorySizeOfLargestSequence() const
      {
        return env->callLongMethod(this$, mids$[mid_memorySizeOfLargestSequence_54c6a17a]);
      }

      jlong IIntSequenceLoader::memorySizeOfSingleSequence(jint a0) const
      {
        return env->callLongMethod(this$, mids$[mid_memorySizeOfSingleSequence_39c7bd20], a0);
      }

      jlong IIntSequenceLoader::memorySizeTotal() const
      {
        return env->callLongMethod(this$, mids$[mid_memorySizeTotal_54c6a17a]);
      }

      jint IIntSequenceLoader::numberOfSequences() const
      {
        return env->callIntMethod(this$, mids$[mid_numberOfSequences_54c6a179]);
      }

      void IIntSequenceLoader::scan() const
      {
        env->callVoidMethod(this$, mids$[mid_scan_54c6a166]);
      }

      void IIntSequenceLoader::setLoader(const ::stallone::api::intsequence::IIntReader & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setLoader_441086c2], a0.this$);
      }

      jint IIntSequenceLoader::size() const
      {
        return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
      }

      jint IIntSequenceLoader::size(jint a0) const
      {
        return env->callIntMethod(this$, mids$[mid_size_39c7bd23], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace intsequence {
      static PyObject *t_IIntSequenceLoader_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntSequenceLoader_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_IIntSequenceLoader_addSource(t_IIntSequenceLoader *self, PyObject *arg);
      static PyObject *t_IIntSequenceLoader_getSingleIntLoader(t_IIntSequenceLoader *self);
      static PyObject *t_IIntSequenceLoader_getSingleSequenceLoader(t_IIntSequenceLoader *self);
      static PyObject *t_IIntSequenceLoader_load(t_IIntSequenceLoader *self, PyObject *args);
      static PyObject *t_IIntSequenceLoader_loadSequence(t_IIntSequenceLoader *self, PyObject *arg);
      static PyObject *t_IIntSequenceLoader_memorySizeOfLargestSequence(t_IIntSequenceLoader *self);
      static PyObject *t_IIntSequenceLoader_memorySizeOfSingleSequence(t_IIntSequenceLoader *self, PyObject *arg);
      static PyObject *t_IIntSequenceLoader_memorySizeTotal(t_IIntSequenceLoader *self);
      static PyObject *t_IIntSequenceLoader_numberOfSequences(t_IIntSequenceLoader *self);
      static PyObject *t_IIntSequenceLoader_scan(t_IIntSequenceLoader *self);
      static PyObject *t_IIntSequenceLoader_setLoader(t_IIntSequenceLoader *self, PyObject *arg);
      static PyObject *t_IIntSequenceLoader_size(t_IIntSequenceLoader *self, PyObject *args);
      static int t_IIntSequenceLoader_set__loader(t_IIntSequenceLoader *self, PyObject *arg, void *data);
      static PyObject *t_IIntSequenceLoader_get__singleIntLoader(t_IIntSequenceLoader *self, void *data);
      static PyObject *t_IIntSequenceLoader_get__singleSequenceLoader(t_IIntSequenceLoader *self, void *data);
      static PyGetSetDef t_IIntSequenceLoader__fields_[] = {
        DECLARE_SET_FIELD(t_IIntSequenceLoader, loader),
        DECLARE_GET_FIELD(t_IIntSequenceLoader, singleIntLoader),
        DECLARE_GET_FIELD(t_IIntSequenceLoader, singleSequenceLoader),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_IIntSequenceLoader__methods_[] = {
        DECLARE_METHOD(t_IIntSequenceLoader, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntSequenceLoader, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_IIntSequenceLoader, addSource, METH_O),
        DECLARE_METHOD(t_IIntSequenceLoader, getSingleIntLoader, METH_NOARGS),
        DECLARE_METHOD(t_IIntSequenceLoader, getSingleSequenceLoader, METH_NOARGS),
        DECLARE_METHOD(t_IIntSequenceLoader, load, METH_VARARGS),
        DECLARE_METHOD(t_IIntSequenceLoader, loadSequence, METH_O),
        DECLARE_METHOD(t_IIntSequenceLoader, memorySizeOfLargestSequence, METH_NOARGS),
        DECLARE_METHOD(t_IIntSequenceLoader, memorySizeOfSingleSequence, METH_O),
        DECLARE_METHOD(t_IIntSequenceLoader, memorySizeTotal, METH_NOARGS),
        DECLARE_METHOD(t_IIntSequenceLoader, numberOfSequences, METH_NOARGS),
        DECLARE_METHOD(t_IIntSequenceLoader, scan, METH_NOARGS),
        DECLARE_METHOD(t_IIntSequenceLoader, setLoader, METH_O),
        DECLARE_METHOD(t_IIntSequenceLoader, size, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(IIntSequenceLoader, t_IIntSequenceLoader, ::java::lang::Object, IIntSequenceLoader, abstract_init, 0, 0, t_IIntSequenceLoader__fields_, 0, 0);

      void t_IIntSequenceLoader::install(PyObject *module)
      {
        installType(&PY_TYPE(IIntSequenceLoader), module, "IIntSequenceLoader", 0);
      }

      void t_IIntSequenceLoader::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(IIntSequenceLoader).tp_dict, "class_", make_descriptor(IIntSequenceLoader::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(IIntSequenceLoader).tp_dict, "wrapfn_", make_descriptor(t_IIntSequenceLoader::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(IIntSequenceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_IIntSequenceLoader_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, IIntSequenceLoader::initializeClass, 1)))
          return NULL;
        return t_IIntSequenceLoader::wrap_Object(IIntSequenceLoader(((t_IIntSequenceLoader *) arg)->object.this$));
      }
      static PyObject *t_IIntSequenceLoader_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, IIntSequenceLoader::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_IIntSequenceLoader_addSource(t_IIntSequenceLoader *self, PyObject *arg)
      {
        ::java::lang::String a0((jobject) NULL);

        if (!parseArg(arg, "s", &a0))
        {
          OBJ_CALL(self->object.addSource(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "addSource", arg);
        return NULL;
      }

      static PyObject *t_IIntSequenceLoader_getSingleIntLoader(t_IIntSequenceLoader *self)
      {
        ::java::lang::Iterable result((jobject) NULL);
        OBJ_CALL(result = self->object.getSingleIntLoader());
        return ::java::lang::t_Iterable::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
      }

      static PyObject *t_IIntSequenceLoader_getSingleSequenceLoader(t_IIntSequenceLoader *self)
      {
        ::java::lang::Iterable result((jobject) NULL);
        OBJ_CALL(result = self->object.getSingleSequenceLoader());
        return ::java::lang::t_Iterable::wrap_Object(result, &::stallone::api::ints::PY_TYPE(IIntArray));
      }

      static PyObject *t_IIntSequenceLoader_load(t_IIntSequenceLoader *self, PyObject *args)
      {
        jint a0;
        jint a1;
        jint result;

        if (!parseArgs(args, "II", &a0, &a1))
        {
          OBJ_CALL(result = self->object.load(a0, a1));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "load", args);
        return NULL;
      }

      static PyObject *t_IIntSequenceLoader_loadSequence(t_IIntSequenceLoader *self, PyObject *arg)
      {
        jint a0;
        ::stallone::api::ints::IIntArray result((jobject) NULL);

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.loadSequence(a0));
          return ::stallone::api::ints::t_IIntArray::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "loadSequence", arg);
        return NULL;
      }

      static PyObject *t_IIntSequenceLoader_memorySizeOfLargestSequence(t_IIntSequenceLoader *self)
      {
        jlong result;
        OBJ_CALL(result = self->object.memorySizeOfLargestSequence());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      static PyObject *t_IIntSequenceLoader_memorySizeOfSingleSequence(t_IIntSequenceLoader *self, PyObject *arg)
      {
        jint a0;
        jlong result;

        if (!parseArg(arg, "I", &a0))
        {
          OBJ_CALL(result = self->object.memorySizeOfSingleSequence(a0));
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        PyErr_SetArgsError((PyObject *) self, "memorySizeOfSingleSequence", arg);
        return NULL;
      }

      static PyObject *t_IIntSequenceLoader_memorySizeTotal(t_IIntSequenceLoader *self)
      {
        jlong result;
        OBJ_CALL(result = self->object.memorySizeTotal());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      static PyObject *t_IIntSequenceLoader_numberOfSequences(t_IIntSequenceLoader *self)
      {
        jint result;
        OBJ_CALL(result = self->object.numberOfSequences());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_IIntSequenceLoader_scan(t_IIntSequenceLoader *self)
      {
        OBJ_CALL(self->object.scan());
        Py_RETURN_NONE;
      }

      static PyObject *t_IIntSequenceLoader_setLoader(t_IIntSequenceLoader *self, PyObject *arg)
      {
        ::stallone::api::intsequence::IIntReader a0((jobject) NULL);

        if (!parseArg(arg, "k", ::stallone::api::intsequence::IIntReader::initializeClass, &a0))
        {
          OBJ_CALL(self->object.setLoader(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setLoader", arg);
        return NULL;
      }

      static PyObject *t_IIntSequenceLoader_size(t_IIntSequenceLoader *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }
          break;
         case 1:
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.size(a0));
              return PyInt_FromLong((long) result);
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "size", args);
        return NULL;
      }

      static int t_IIntSequenceLoader_set__loader(t_IIntSequenceLoader *self, PyObject *arg, void *data)
      {
        {
          ::stallone::api::intsequence::IIntReader value((jobject) NULL);
          if (!parseArg(arg, "k", ::stallone::api::intsequence::IIntReader::initializeClass, &value))
          {
            INT_CALL(self->object.setLoader(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "loader", arg);
        return -1;
      }

      static PyObject *t_IIntSequenceLoader_get__singleIntLoader(t_IIntSequenceLoader *self, void *data)
      {
        ::java::lang::Iterable value((jobject) NULL);
        OBJ_CALL(value = self->object.getSingleIntLoader());
        return ::java::lang::t_Iterable::wrap_Object(value);
      }

      static PyObject *t_IIntSequenceLoader_get__singleSequenceLoader(t_IIntSequenceLoader *self, void *data)
      {
        ::java::lang::Iterable value((jobject) NULL);
        OBJ_CALL(value = self->object.getSingleSequenceLoader());
        return ::java::lang::t_Iterable::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "stallone/api/algebra/AlgebraFactory$EigenvalueDecompositionEnum.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace stallone {
  namespace api {
    namespace algebra {

      ::java::lang::Class *AlgebraFactory$EigenvalueDecompositionEnum::class$ = NULL;
      jmethodID *AlgebraFactory$EigenvalueDecompositionEnum::mids$ = NULL;
      bool AlgebraFactory$EigenvalueDecompositionEnum::live$ = false;
      AlgebraFactory$EigenvalueDecompositionEnum *AlgebraFactory$EigenvalueDecompositionEnum::DENSE_BLAS = NULL;
      AlgebraFactory$EigenvalueDecompositionEnum *AlgebraFactory$EigenvalueDecompositionEnum::SPARSE_ARPACK = NULL;

      jclass AlgebraFactory$EigenvalueDecompositionEnum::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("stallone/api/algebra/AlgebraFactory$EigenvalueDecompositionEnum");

          mids$ = new jmethodID[max_mid];
          mids$[mid_isDense_54c6a16a] = env->getMethodID(cls, "isDense", "()Z");
          mids$[mid_valueOf_83753791] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lstallone/api/algebra/AlgebraFactory$EigenvalueDecompositionEnum;");
          mids$[mid_values_ccbe51eb] = env->getStaticMethodID(cls, "values", "()[Lstallone/api/algebra/AlgebraFactory$EigenvalueDecompositionEnum;");

          class$ = (::java::lang::Class *) new JObject(cls);
          cls = (jclass) class$->this$;

          DENSE_BLAS = new AlgebraFactory$EigenvalueDecompositionEnum(env->getStaticObjectField(cls, "DENSE_BLAS", "Lstallone/api/algebra/AlgebraFactory$EigenvalueDecompositionEnum;"));
          SPARSE_ARPACK = new AlgebraFactory$EigenvalueDecompositionEnum(env->getStaticObjectField(cls, "SPARSE_ARPACK", "Lstallone/api/algebra/AlgebraFactory$EigenvalueDecompositionEnum;"));
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      jboolean AlgebraFactory$EigenvalueDecompositionEnum::isDense() const
      {
        return env->callBooleanMethod(this$, mids$[mid_isDense_54c6a16a]);
      }

      AlgebraFactory$EigenvalueDecompositionEnum AlgebraFactory$EigenvalueDecompositionEnum::valueOf(const ::java::lang::String & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return AlgebraFactory$EigenvalueDecompositionEnum(env->callStaticObjectMethod(cls, mids$[mid_valueOf_83753791], a0.this$));
      }

      JArray< AlgebraFactory$EigenvalueDecompositionEnum > AlgebraFactory$EigenvalueDecompositionEnum::values()
      {
        jclass cls = env->getClass(initializeClass);
        return JArray< AlgebraFactory$EigenvalueDecompositionEnum >(env->callStaticObjectMethod(cls, mids$[mid_values_ccbe51eb]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace stallone {
  namespace api {
    namespace algebra {
      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_isDense(t_AlgebraFactory$EigenvalueDecompositionEnum *self);
      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_valueOf(PyTypeObject *type, PyObject *args);
      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_values(PyTypeObject *type);
      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_get__dense(t_AlgebraFactory$EigenvalueDecompositionEnum *self, void *data);
      static PyGetSetDef t_AlgebraFactory$EigenvalueDecompositionEnum__fields_[] = {
        DECLARE_GET_FIELD(t_AlgebraFactory$EigenvalueDecompositionEnum, dense),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_AlgebraFactory$EigenvalueDecompositionEnum__methods_[] = {
        DECLARE_METHOD(t_AlgebraFactory$EigenvalueDecompositionEnum, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_AlgebraFactory$EigenvalueDecompositionEnum, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_AlgebraFactory$EigenvalueDecompositionEnum, isDense, METH_NOARGS),
        DECLARE_METHOD(t_AlgebraFactory$EigenvalueDecompositionEnum, valueOf, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_AlgebraFactory$EigenvalueDecompositionEnum, values, METH_NOARGS | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(AlgebraFactory$EigenvalueDecompositionEnum, t_AlgebraFactory$EigenvalueDecompositionEnum, ::java::lang::Enum, AlgebraFactory$EigenvalueDecompositionEnum, abstract_init, 0, 0, t_AlgebraFactory$EigenvalueDecompositionEnum__fields_, 0, 0);

      void t_AlgebraFactory$EigenvalueDecompositionEnum::install(PyObject *module)
      {
        installType(&PY_TYPE(AlgebraFactory$EigenvalueDecompositionEnum), module, "AlgebraFactory$EigenvalueDecompositionEnum", 0);
      }

      void t_AlgebraFactory$EigenvalueDecompositionEnum::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$EigenvalueDecompositionEnum).tp_dict, "class_", make_descriptor(AlgebraFactory$EigenvalueDecompositionEnum::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$EigenvalueDecompositionEnum).tp_dict, "wrapfn_", make_descriptor(t_AlgebraFactory$EigenvalueDecompositionEnum::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$EigenvalueDecompositionEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        env->getClass(AlgebraFactory$EigenvalueDecompositionEnum::initializeClass);
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$EigenvalueDecompositionEnum).tp_dict, "DENSE_BLAS", make_descriptor(t_AlgebraFactory$EigenvalueDecompositionEnum::wrap_Object(*AlgebraFactory$EigenvalueDecompositionEnum::DENSE_BLAS)));
        PyDict_SetItemString(PY_TYPE(AlgebraFactory$EigenvalueDecompositionEnum).tp_dict, "SPARSE_ARPACK", make_descriptor(t_AlgebraFactory$EigenvalueDecompositionEnum::wrap_Object(*AlgebraFactory$EigenvalueDecompositionEnum::SPARSE_ARPACK)));
      }

      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, AlgebraFactory$EigenvalueDecompositionEnum::initializeClass, 1)))
          return NULL;
        return t_AlgebraFactory$EigenvalueDecompositionEnum::wrap_Object(AlgebraFactory$EigenvalueDecompositionEnum(((t_AlgebraFactory$EigenvalueDecompositionEnum *) arg)->object.this$));
      }
      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, AlgebraFactory$EigenvalueDecompositionEnum::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_isDense(t_AlgebraFactory$EigenvalueDecompositionEnum *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.isDense());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_valueOf(PyTypeObject *type, PyObject *args)
      {
        ::java::lang::String a0((jobject) NULL);
        AlgebraFactory$EigenvalueDecompositionEnum result((jobject) NULL);

        if (!parseArgs(args, "s", &a0))
        {
          OBJ_CALL(result = ::stallone::api::algebra::AlgebraFactory$EigenvalueDecompositionEnum::valueOf(a0));
          return t_AlgebraFactory$EigenvalueDecompositionEnum::wrap_Object(result);
        }

        return callSuper(type, "valueOf", args, 2);
      }

      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_values(PyTypeObject *type)
      {
        JArray< AlgebraFactory$EigenvalueDecompositionEnum > result((jobject) NULL);
        OBJ_CALL(result = ::stallone::api::algebra::AlgebraFactory$EigenvalueDecompositionEnum::values());
        return JArray<jobject>(result.this$).wrap(t_AlgebraFactory$EigenvalueDecompositionEnum::wrap_jobject);
      }

      static PyObject *t_AlgebraFactory$EigenvalueDecompositionEnum_get__dense(t_AlgebraFactory$EigenvalueDecompositionEnum *self, void *data)
      {
        jboolean value;
        OBJ_CALL(value = self->object.isDense());
        Py_RETURN_BOOL(value);
      }
    }
  }
}
